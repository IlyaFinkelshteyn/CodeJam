{
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | CodeJam",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to images folder if the file is referencing an image."
  },
  "api/main/index.html": {
    "href": "api/main/index.html",
    "title": "CodeJam library | CodeJam",
    "keywords": "CodeJam library"
  },
  "api/main/CodeJam.Reflection.InfoOf-1.html": {
    "href": "api/main/CodeJam.Reflection.InfoOf-1.html",
    "title": "Class InfoOf<T> | CodeJam",
    "keywords": "Class InfoOf<T> Provides a helper class to get the property, field, ctor or method from an expression. Inheritance System.Object InfoOf<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Reflection Assembly : CodeJam.dll Syntax public static class InfoOf<T> Type Parameters Name Description T Methods | Improve this Doc View Source Constructor(Expression<Func<T>>) Returns the constructor. Declaration public static ConstructorInfo Constructor(Expression<Func<T>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T>> expression The expression to analyze. Returns Type Description System.Reflection.ConstructorInfo The System.Reflection.ConstructorInfo instance. | Improve this Doc View Source Field<TValue>(Expression<Func<T, TValue>>) Returns the field. Declaration public static FieldInfo Field<TValue>(Expression<Func<T, TValue>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, TValue>> expression The expression to analyze. Returns Type Description System.Reflection.FieldInfo The System.Reflection.FieldInfo instance. Type Parameters Name Description TValue | Improve this Doc View Source Member<TValue>(Expression<Func<T, TValue>>) Returns the property or field. Declaration public static MemberInfo Member<TValue>(Expression<Func<T, TValue>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, TValue>> expression The expression to analyze. Returns Type Description System.Reflection.MemberInfo The System.Reflection.MemberInfo instance. Type Parameters Name Description TValue | Improve this Doc View Source Method(Expression<Action<T>>) Returns the method. Declaration public static MethodInfo Method(Expression<Action<T>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action <T>> expression The expression to analyze. Returns Type Description System.Reflection.MethodInfo The System.Reflection.MethodInfo instance. | Improve this Doc View Source Method<TResult>(Expression<Func<T, TResult>>) Returns the method. Declaration public static MethodInfo Method<TResult>(Expression<Func<T, TResult>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, TResult>> expression The expression to analyze. Returns Type Description System.Reflection.MethodInfo The System.Reflection.MethodInfo instance. Type Parameters Name Description TResult | Improve this Doc View Source Property<TValue>(Expression<Func<T, TValue>>) Returns the property. Declaration public static PropertyInfo Property<TValue>(Expression<Func<T, TValue>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, TValue>> expression The expression to analyze. Returns Type Description System.Reflection.PropertyInfo The System.Reflection.PropertyInfo instance. Type Parameters Name Description TValue"
  },
  "api/main/CodeJam.Reflection.AssemblyExtensions.html": {
    "href": "api/main/CodeJam.Reflection.AssemblyExtensions.html",
    "title": "Class AssemblyExtensions | CodeJam",
    "keywords": "Class AssemblyExtensions The System.Reflection.Assembly extensions. Inheritance System.Object AssemblyExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Reflection Assembly : CodeJam.dll Syntax public static class AssemblyExtensions Methods | Improve this Doc View Source GetAssemblyDirectory(Assembly) Returns directory part of path to assembly assembly file. Declaration public static string GetAssemblyDirectory(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly Assembly. Returns Type Description System.String Folder part of path to assembly . | Improve this Doc View Source GetAssemblyPath(Assembly) Returns path to the assembly file. Declaration public static string GetAssemblyPath(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly Assembly. Returns Type Description System.String Path to assembly . | Improve this Doc View Source GetRequiredResourceStream(Assembly, String) Loads the specified manifest resource from this assembly, and checks if it exists. Declaration public static Stream GetRequiredResourceStream(this Assembly assembly, string name) Parameters Type Name Description System.Reflection.Assembly assembly Resource assembly. System.String name The case-sensitive name of the manifest resource being requested. Returns Type Description System.IO.Stream The manifest resource. Exceptions Type Condition System.ArgumentNullException The name parameter is null. System.ArgumentException Resource with specified name not found | Improve this Doc View Source IsDebugAssembly(Assembly) Checks that the assembly is build with System.Diagnostics.DebuggableAttribute.IsJITOptimizerDisabled set to false . Declaration public static bool IsDebugAssembly(this Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to check. Returns Type Description System.Boolean true if the assembly was build with optimizations disabled."
  },
  "api/main/CodeJam.Ranges.CompositeRangeExtensions.html": {
    "href": "api/main/CodeJam.Ranges.CompositeRangeExtensions.html",
    "title": "Class CompositeRangeExtensions | CodeJam",
    "keywords": "Class CompositeRangeExtensions Extension methods for CompositeRange<T> . Inheritance System.Object CompositeRangeExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax public static class CompositeRangeExtensions Methods | Improve this Doc View Source Contains<T>(CompositeRange<T>, T) Determines whether the composite range contains the specified value. Declaration public static bool Contains<T>(this CompositeRange<T> compositeRange, T value) Parameters Type Name Description CompositeRange <T> compositeRange The source range. T value The value to check. Returns Type Description System.Boolean true , if the composite range contains the value. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Contains<T>(CompositeRange<T>, T, T) Determines whether the composite range contains another range. Declaration public static bool Contains<T>(this CompositeRange<T> compositeRange, T from, T to) Parameters Type Name Description CompositeRange <T> compositeRange The source range. T from The boundary From value of the range to check. T to The boundary To value of the range to check. Returns Type Description System.Boolean true , if the composite range contains another range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Contains<T>(CompositeRange<T>, Range<T>) Determines whether the composite range contains another range. Declaration public static bool Contains<T>(this CompositeRange<T> compositeRange, Range<T> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. Range <T> other The range to check. Returns Type Description System.Boolean true , if the composite range contains another range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Contains<T>(CompositeRange<T>, RangeBoundaryFrom<T>) Determines whether the composite range contains the specified range boundary. Declaration public static bool Contains<T>(this CompositeRange<T> compositeRange, RangeBoundaryFrom<T> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. RangeBoundaryFrom <T> other The boundary to check. Returns Type Description System.Boolean true , if the composite range contains the boundary. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Contains<T>(CompositeRange<T>, RangeBoundaryTo<T>) Determines whether the composite range contains the specified range boundary. Declaration public static bool Contains<T>(this CompositeRange<T> compositeRange, RangeBoundaryTo<T> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. RangeBoundaryTo <T> other The boundary to check. Returns Type Description System.Boolean true , if the composite range contains the boundary. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Contains<T, TKey>(CompositeRange<T, TKey>, T) Determines whether the composite range contains the specified value. Declaration public static bool Contains<T, TKey>(this CompositeRange<T, TKey> compositeRange, T value) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. T value The value to check. Returns Type Description System.Boolean true , if the composite range contains the value. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Contains<T, TKey>(CompositeRange<T, TKey>, T, T) Determines whether the composite range contains another range. Declaration public static bool Contains<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from, T to) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. T from The boundary From value of the range to check. T to The boundary To value of the range to check. Returns Type Description System.Boolean true , if the composite range contains another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Contains<T, TKey>(CompositeRange<T, TKey>, Range<T>) Determines whether the composite range contains another range. Declaration public static bool Contains<T, TKey>(this CompositeRange<T, TKey> compositeRange, Range<T> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Range <T> other The range to check. Returns Type Description System.Boolean true , if the composite range contains another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Contains<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryFrom<T>) Determines whether the composite range contains the specified range boundary. Declaration public static bool Contains<T, TKey>(this CompositeRange<T, TKey> compositeRange, RangeBoundaryFrom<T> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. RangeBoundaryFrom <T> other The boundary to check. Returns Type Description System.Boolean true , if the composite range contains the boundary. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Contains<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryTo<T>) Determines whether the composite range contains the specified range boundary. Declaration public static bool Contains<T, TKey>(this CompositeRange<T, TKey> compositeRange, RangeBoundaryTo<T> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. RangeBoundaryTo <T> other The boundary to check. Returns Type Description System.Boolean true , if the composite range contains the boundary. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Contains<T, TCompositeRange>(CompositeRange<T>, TCompositeRange) Determines whether the composite range contains another range. Declaration public static bool Contains<T, TCompositeRange>(this CompositeRange<T> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T> Parameters Type Name Description CompositeRange <T> compositeRange The source range. TCompositeRange other The range to check. Returns Type Description System.Boolean true , if the composite range contains another range. Type Parameters Name Description T The type of the range values. TCompositeRange The type of another range. | Improve this Doc View Source Contains<T, TKey2>(CompositeRange<T>, Range<T, TKey2>) Determines whether the composite range contains another range. Declaration public static bool Contains<T, TKey2>(this CompositeRange<T> compositeRange, Range<T, TKey2> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. Range <T, TKey2> other The range to check. Returns Type Description System.Boolean true , if the composite range contains another range. Type Parameters Name Description T The type of the range values. TKey2 The type of the other range key | Improve this Doc View Source Contains<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange) Determines whether the composite range contains another range. Declaration public static bool Contains<T, TKey, TCompositeRange>(this CompositeRange<T, TKey> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T> Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. TCompositeRange other The range to check. Returns Type Description System.Boolean true , if the composite range contains another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key TCompositeRange The type of another range. | Improve this Doc View Source Contains<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>) Determines whether the composite range contains another range. Declaration public static bool Contains<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, Range<T, TKey2> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Range <T, TKey2> other The range to check. Returns Type Description System.Boolean true , if the composite range contains another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key TKey2 The type of the other range key | Improve this Doc View Source Except<T>(CompositeRange<T>, T, T) Returns source range with other range excluded. Declaration public static CompositeRange<T> Except<T>(this CompositeRange<T> compositeRange, T from, T to) Parameters Type Name Description CompositeRange <T> compositeRange The source range. T from The boundary From value. T to The boundary To value. Returns Type Description CompositeRange <T> Source range with other range excluded. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Except<T>(CompositeRange<T>, Range<T>) Returns source range with other range excluded. Declaration public static CompositeRange<T> Except<T>(this CompositeRange<T> compositeRange, Range<T> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. Range <T> other The range to intersect with. Returns Type Description CompositeRange <T> Source range with other range excluded. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Except<T, TKey>(CompositeRange<T, TKey>, T, T) Returns source range with other range excluded. Declaration public static CompositeRange<T, TKey> Except<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from, T to) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. T from The boundary From value. T to The boundary To value. Returns Type Description CompositeRange <T, TKey> Source range with other range excluded. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Except<T, TKey>(CompositeRange<T, TKey>, Range<T>) Returns source range with other range excluded. Declaration public static CompositeRange<T, TKey> Except<T, TKey>(this CompositeRange<T, TKey> compositeRange, Range<T> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Range <T> other The range to intersect with. Returns Type Description CompositeRange <T, TKey> Source range with other range excluded. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Except<T, TCompositeRange>(CompositeRange<T>, TCompositeRange) Returns source range with other range excluded. Declaration public static CompositeRange<T> Except<T, TCompositeRange>(this CompositeRange<T> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T> Parameters Type Name Description CompositeRange <T> compositeRange The source range. TCompositeRange other The range to intersect with. Returns Type Description CompositeRange <T> Source range with other range excluded. Type Parameters Name Description T The type of the range values. TCompositeRange The type of another range. | Improve this Doc View Source Except<T, TKey2>(CompositeRange<T>, Range<T, TKey2>) Returns source range with other range excluded. Declaration public static CompositeRange<T> Except<T, TKey2>(this CompositeRange<T> compositeRange, Range<T, TKey2> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. Range <T, TKey2> other The range to intersect with. Returns Type Description CompositeRange <T> Source range with other range excluded. Type Parameters Name Description T The type of the range values. TKey2 The type of the other range key | Improve this Doc View Source Except<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange) Returns source range with other range excluded. Declaration public static CompositeRange<T, TKey> Except<T, TKey, TCompositeRange>(this CompositeRange<T, TKey> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T> Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. TCompositeRange other The range to intersect with. Returns Type Description CompositeRange <T, TKey> Source range with other range excluded. Type Parameters Name Description T The type of the range values. TKey The type of the range key TCompositeRange The type of another range. | Improve this Doc View Source Except<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>) Returns source range with other range excluded. Declaration public static CompositeRange<T, TKey> Except<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, Range<T, TKey2> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Range <T, TKey2> other The range to intersect with. Returns Type Description CompositeRange <T, TKey> Source range with other range excluded. Type Parameters Name Description T The type of the range values. TKey The type of the range key TKey2 The type of the other range key | Improve this Doc View Source ExtendFrom<T>(CompositeRange<T>, T) Extends the range from the left. Declaration public static CompositeRange<T> ExtendFrom<T>(this CompositeRange<T> compositeRange, T from) Parameters Type Name Description CompositeRange <T> compositeRange The source range. T from A new value From. Returns Type Description CompositeRange <T> A range with a new From boundary or the source fange if the new boundary is greater than original. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source ExtendFrom<T>(CompositeRange<T>, RangeBoundaryFrom<T>) Extends the range from the left. Declaration public static CompositeRange<T> ExtendFrom<T>(this CompositeRange<T> compositeRange, RangeBoundaryFrom<T> from) Parameters Type Name Description CompositeRange <T> compositeRange The source range. RangeBoundaryFrom <T> from A new boundary From. Returns Type Description CompositeRange <T> A range with a new From boundary or the source fange if the new boundary is greater than original. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source ExtendFrom<T, TKey>(CompositeRange<T, TKey>, T) Extends the range from the left. Declaration public static CompositeRange<T, TKey> ExtendFrom<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. T from A new value From. Returns Type Description CompositeRange <T, TKey> A range with a new From boundary or the source fange if the new boundary is greater than original. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source ExtendFrom<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryFrom<T>) Extends the range from the left. Declaration public static CompositeRange<T, TKey> ExtendFrom<T, TKey>(this CompositeRange<T, TKey> compositeRange, RangeBoundaryFrom<T> from) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. RangeBoundaryFrom <T> from A new boundary From. Returns Type Description CompositeRange <T, TKey> A range with a new From boundary or the source fange if the new boundary is greater than original. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source ExtendTo<T>(CompositeRange<T>, T) Extends the range from the right. Declaration public static CompositeRange<T> ExtendTo<T>(this CompositeRange<T> compositeRange, T to) Parameters Type Name Description CompositeRange <T> compositeRange The source range. T to A new value To. Returns Type Description CompositeRange <T> A range with a new To boundary or the source fange if the new boundary is less than original. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source ExtendTo<T>(CompositeRange<T>, RangeBoundaryTo<T>) Extends the range from the right. Declaration public static CompositeRange<T> ExtendTo<T>(this CompositeRange<T> compositeRange, RangeBoundaryTo<T> to) Parameters Type Name Description CompositeRange <T> compositeRange The source range. RangeBoundaryTo <T> to A new boundary To. Returns Type Description CompositeRange <T> A range with a new To boundary or the source fange if the new boundary is less than original. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source ExtendTo<T, TKey>(CompositeRange<T, TKey>, T) Extends the range from the right. Declaration public static CompositeRange<T, TKey> ExtendTo<T, TKey>(this CompositeRange<T, TKey> compositeRange, T to) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. T to A new value To. Returns Type Description CompositeRange <T, TKey> A range with a new To boundary or the source fange if the new boundary is less than original. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source ExtendTo<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryTo<T>) Extends the range from the right. Declaration public static CompositeRange<T, TKey> ExtendTo<T, TKey>(this CompositeRange<T, TKey> compositeRange, RangeBoundaryTo<T> to) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. RangeBoundaryTo <T> to A new boundary To. Returns Type Description CompositeRange <T, TKey> A range with a new To boundary or the source fange if the new boundary is less than original. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source GetComplementation<T>(CompositeRange<T>) Returns complementation composite range. Result range contains result of (infinityRange.Exclude( compositeRange ). Declaration public static CompositeRange<T> GetComplementation<T>(this CompositeRange<T> compositeRange) Parameters Type Name Description CompositeRange <T> compositeRange The source range. Returns Type Description CompositeRange <T> Complementation composite range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source GetComplementation<T>(Range<T>) Returns complementation composite range. Result range contains result of (infinityRange.Exclude( range ). Declaration public static CompositeRange<T> GetComplementation<T>(this Range<T> range) Parameters Type Name Description Range <T> range The source range. Returns Type Description CompositeRange <T> Complementation composite range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source GetComplementation<T, TKey>(CompositeRange<T, TKey>) Returns complementation composite range. Result range contains result of (infinityRange.Exclude( compositeRange ). Declaration public static CompositeRange<T> GetComplementation<T, TKey>(this CompositeRange<T, TKey> compositeRange) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Returns Type Description CompositeRange <T> Complementation composite range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source GetComplementation<T, TKey>(Range<T, TKey>) Returns complementation composite range. Result range contains result of (infinityRange.Exclude( range ). Declaration public static CompositeRange<T> GetComplementation<T, TKey>(this Range<T, TKey> range) Parameters Type Name Description Range <T, TKey> range The source range. Returns Type Description CompositeRange <T> Complementation composite range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source GetIntersection<T>(CompositeRange<T>, T) Returns ranges that has intersections with passed range. Declaration public static Range<T>[] GetIntersection<T>(this CompositeRange<T> compositeRange, T value) Parameters Type Name Description CompositeRange <T> compositeRange The source range. T value The value to check. Returns Type Description Range <T>[] Ranges that has intersections with passed range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source GetIntersection<T>(CompositeRange<T>, T, T) Returns ranges that has intersections with passed range. Declaration public static RangeIntersection<T> GetIntersection<T>(this CompositeRange<T> compositeRange, T from, T to) Parameters Type Name Description CompositeRange <T> compositeRange The source range. T from The boundary From value of the range to check. T to The boundary To value of the range to check. Returns Type Description RangeIntersection <T> Ranges that has intersections with passed range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source GetIntersection<T>(CompositeRange<T>, Range<T>) Returns ranges that has intersections with passed range. Declaration public static RangeIntersection<T> GetIntersection<T>(this CompositeRange<T> compositeRange, Range<T> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. Range <T> other The range to check. Returns Type Description RangeIntersection <T> Ranges that has intersections with passed range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source GetIntersection<T, TKey>(CompositeRange<T, TKey>, T) Returns ranges that has intersections with passed range. Declaration public static Range<T, TKey>[] GetIntersection<T, TKey>(this CompositeRange<T, TKey> compositeRange, T value) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. T value The value to check. Returns Type Description Range <T, TKey>[] Ranges that has intersections with passed range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source GetIntersection<T, TKey>(CompositeRange<T, TKey>, T, T) Returns ranges that has intersections with passed range. Declaration public static RangeIntersection<T, TKey> GetIntersection<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from, T to) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. T from The boundary From value of the range to check. T to The boundary To value of the range to check. Returns Type Description RangeIntersection <T, TKey> Ranges that has intersections with passed range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source GetIntersection<T, TKey>(CompositeRange<T, TKey>, Range<T>) Returns ranges that has intersections with passed range. Declaration public static RangeIntersection<T, TKey> GetIntersection<T, TKey>(this CompositeRange<T, TKey> compositeRange, Range<T> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Range <T> other The range to check. Returns Type Description RangeIntersection <T, TKey> Ranges that has intersections with passed range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source GetIntersection<T, TKey2>(CompositeRange<T>, Range<T, TKey2>) Returns ranges that has intersections with passed range. Declaration public static RangeIntersection<T> GetIntersection<T, TKey2>(this CompositeRange<T> compositeRange, Range<T, TKey2> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. Range <T, TKey2> other The range to check. Returns Type Description RangeIntersection <T> Ranges that has intersections with passed range. Type Parameters Name Description T The type of the range values. TKey2 The type of the other range key | Improve this Doc View Source GetIntersection<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>) Returns ranges that has intersections with passed range. Declaration public static RangeIntersection<T, TKey> GetIntersection<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, Range<T, TKey2> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Range <T, TKey2> other The range to check. Returns Type Description RangeIntersection <T, TKey> Ranges that has intersections with passed range. Type Parameters Name Description T The type of the range values. TKey The type of the range key TKey2 The type of the other range key | Improve this Doc View Source GetIntersections<T>(CompositeRange<T>) Returns all range intersections from the composite range. Declaration public static IEnumerable<RangeIntersection<T>> GetIntersections<T>(this CompositeRange<T> compositeRange) Parameters Type Name Description CompositeRange <T> compositeRange The source range. Returns Type Description System.Collections.Generic.IEnumerable < RangeIntersection <T>> All range intersections from the composite range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source GetIntersections<T, TKey>(CompositeRange<T, TKey>) Returns all range intersections from the composite range. Declaration public static IEnumerable<RangeIntersection<T, TKey>> GetIntersections<T, TKey>(this CompositeRange<T, TKey> compositeRange) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Returns Type Description System.Collections.Generic.IEnumerable < RangeIntersection <T, TKey>> All range intersections from the composite range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source HasIntersection<T>(CompositeRange<T>, T, T) Determines whether the composite has intersection with another range. Declaration public static bool HasIntersection<T>(this CompositeRange<T> compositeRange, T from, T to) Parameters Type Name Description CompositeRange <T> compositeRange The source range. T from The boundary From value of the range to check. T to The boundary To value of the range to check. Returns Type Description System.Boolean true , if the composite range has intersection with another range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source HasIntersection<T>(CompositeRange<T>, Range<T>) Determines whether the composite range has intersection with another range. Declaration public static bool HasIntersection<T>(this CompositeRange<T> compositeRange, Range<T> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. Range <T> other The range to check. Returns Type Description System.Boolean true , if the composite range has intersection with another range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source HasIntersection<T, TKey>(CompositeRange<T, TKey>, T, T) Determines whether the composite has intersection with another range. Declaration public static bool HasIntersection<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from, T to) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. T from The boundary From value of the range to check. T to The boundary To value of the range to check. Returns Type Description System.Boolean true , if the composite range has intersection with another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source HasIntersection<T, TKey>(CompositeRange<T, TKey>, Range<T>) Determines whether the composite range has intersection with another range. Declaration public static bool HasIntersection<T, TKey>(this CompositeRange<T, TKey> compositeRange, Range<T> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Range <T> other The range to check. Returns Type Description System.Boolean true , if the composite range has intersection with another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source HasIntersection<T, TCompositeRange>(CompositeRange<T>, TCompositeRange) Determines whether the composite range has intersection with another range. Declaration public static bool HasIntersection<T, TCompositeRange>(this CompositeRange<T> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T> Parameters Type Name Description CompositeRange <T> compositeRange The source range. TCompositeRange other The range to check. Returns Type Description System.Boolean true , if the composite range has intersection with another range. Type Parameters Name Description T The type of the range values. TCompositeRange The type of another range. | Improve this Doc View Source HasIntersection<T, TKey2>(CompositeRange<T>, Range<T, TKey2>) Determines whether the composite range has intersection with another range. Declaration public static bool HasIntersection<T, TKey2>(this CompositeRange<T> compositeRange, Range<T, TKey2> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. Range <T, TKey2> other The range to check. Returns Type Description System.Boolean true , if the composite range has intersection with another range. Type Parameters Name Description T The type of the range values. TKey2 The type of the other range key | Improve this Doc View Source HasIntersection<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange) Determines whether the composite range has intersection with another range. Declaration public static bool HasIntersection<T, TKey, TCompositeRange>(this CompositeRange<T, TKey> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T> Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. TCompositeRange other The range to check. Returns Type Description System.Boolean true , if the composite range has intersection with another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key TCompositeRange The type of another range. | Improve this Doc View Source HasIntersection<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>) Determines whether the composite range has intersection with another range. Declaration public static bool HasIntersection<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, Range<T, TKey2> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Range <T, TKey2> other The range to check. Returns Type Description System.Boolean true , if the composite range has intersection with another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key TKey2 The type of the other range key | Improve this Doc View Source Intersect<T>(CompositeRange<T>, T, T) Returns an intersection of the the ranges. Declaration public static CompositeRange<T> Intersect<T>(this CompositeRange<T> compositeRange, T from, T to) Parameters Type Name Description CompositeRange <T> compositeRange The source range. T from The boundary From value. T to The boundary To value. Returns Type Description CompositeRange <T> An intersection range or empty range if the ranges do not intersect. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Intersect<T>(CompositeRange<T>, Range<T>) Returns an intersection of the the ranges. Declaration public static CompositeRange<T> Intersect<T>(this CompositeRange<T> compositeRange, Range<T> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. Range <T> other The range to intersect with. Returns Type Description CompositeRange <T> An intersection range or empty range if the ranges do not intersect. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Intersect<T, TKey>(CompositeRange<T, TKey>, T, T) Returns an intersection of the the ranges. Declaration public static CompositeRange<T, TKey> Intersect<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from, T to) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. T from The boundary From value. T to The boundary To value. Returns Type Description CompositeRange <T, TKey> An intersection range or empty range if the ranges do not intersect. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Intersect<T, TKey>(CompositeRange<T, TKey>, Range<T>) Returns an intersection of the the ranges. Declaration public static CompositeRange<T, TKey> Intersect<T, TKey>(this CompositeRange<T, TKey> compositeRange, Range<T> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Range <T> other The range to intersect with. Returns Type Description CompositeRange <T, TKey> An intersection range or empty range if the ranges do not intersect. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Intersect<T, TCompositeRange>(CompositeRange<T>, TCompositeRange) Returns an intersection of the the ranges. Declaration public static CompositeRange<T> Intersect<T, TCompositeRange>(this CompositeRange<T> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T> Parameters Type Name Description CompositeRange <T> compositeRange The source range. TCompositeRange other The range to intersect with. Returns Type Description CompositeRange <T> An intersection range or empty range if the ranges do not intersect. Type Parameters Name Description T The type of the range values. TCompositeRange The type of another range. | Improve this Doc View Source Intersect<T, TKey2>(CompositeRange<T>, Range<T, TKey2>) Returns an intersection of the the ranges. Declaration public static CompositeRange<T> Intersect<T, TKey2>(this CompositeRange<T> compositeRange, Range<T, TKey2> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. Range <T, TKey2> other The range to intersect with. Returns Type Description CompositeRange <T> An intersection range or empty range if the ranges do not intersect. Type Parameters Name Description T The type of the range values. TKey2 The type of the other range key | Improve this Doc View Source Intersect<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange) Returns an intersection of the the ranges. Declaration public static CompositeRange<T, TKey> Intersect<T, TKey, TCompositeRange>(this CompositeRange<T, TKey> compositeRange, TCompositeRange other)where TCompositeRange : ICompositeRange<T> Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. TCompositeRange other The range to intersect with. Returns Type Description CompositeRange <T, TKey> An intersection range or empty range if the ranges do not intersect. Type Parameters Name Description T The type of the range values. TKey The type of the range key TCompositeRange The type of another range. | Improve this Doc View Source Intersect<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>) Returns an intersection of the the ranges. Declaration public static CompositeRange<T, TKey> Intersect<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, Range<T, TKey2> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Range <T, TKey2> other The range to intersect with. Returns Type Description CompositeRange <T, TKey> An intersection range or empty range if the ranges do not intersect. Type Parameters Name Description T The type of the range values. TKey The type of the range key TKey2 The type of the other range key | Improve this Doc View Source MakeExclusive<T>(CompositeRange<T>, Func<T, T>, Func<T, T>) Replaces inclusive boundaries with exclusive ones with the values from the selector callbacks Declaration public static CompositeRange<T> MakeExclusive<T>(this CompositeRange<T> compositeRange, Func<T, T> fromValueSelector, Func<T, T> toValueSelector) Parameters Type Name Description CompositeRange <T> compositeRange The source range. System.Func <T, T> fromValueSelector Callback to obtain a new value for the From boundary. Used if the boundary is inclusive. System.Func <T, T> toValueSelector Callback to obtain a new value for the To boundary. Used if the boundary is inclusive. Returns Type Description CompositeRange <T> A range with exclusive boundaries. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source MakeExclusive<T, TKey>(CompositeRange<T, TKey>, Func<T, T>, Func<T, T>) Replaces inclusive boundaries with exclusive ones with the values from the selector callbacks Declaration public static CompositeRange<T, TKey> MakeExclusive<T, TKey>(this CompositeRange<T, TKey> compositeRange, Func<T, T> fromValueSelector, Func<T, T> toValueSelector) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. System.Func <T, T> fromValueSelector Callback to obtain a new value for the From boundary. Used if the boundary is inclusive. System.Func <T, T> toValueSelector Callback to obtain a new value for the To boundary. Used if the boundary is inclusive. Returns Type Description CompositeRange <T, TKey> A range with exclusive boundaries. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source MakeInclusive<T>(CompositeRange<T>, Func<T, T>, Func<T, T>) Replaces exclusive boundaries with inclusive ones with the values from the selector callbacks Declaration public static CompositeRange<T> MakeInclusive<T>(this CompositeRange<T> compositeRange, Func<T, T> fromValueSelector, Func<T, T> toValueSelector) Parameters Type Name Description CompositeRange <T> compositeRange The source range. System.Func <T, T> fromValueSelector Callback to obtain a new value for the From boundary. Used if the boundary is exclusive. System.Func <T, T> toValueSelector Callback to obtain a new value for the To boundary. Used if the boundary is exclusive. Returns Type Description CompositeRange <T> A range with inclusive boundaries. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source MakeInclusive<T, TKey>(CompositeRange<T, TKey>, Func<T, T>, Func<T, T>) Replaces exclusive boundaries with inclusive ones with the values from the selector callbacks Declaration public static CompositeRange<T, TKey> MakeInclusive<T, TKey>(this CompositeRange<T, TKey> compositeRange, Func<T, T> fromValueSelector, Func<T, T> toValueSelector) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. System.Func <T, T> fromValueSelector Callback to obtain a new value for the From boundary. Used if the boundary is exclusive. System.Func <T, T> toValueSelector Callback to obtain a new value for the To boundary. Used if the boundary is exclusive. Returns Type Description CompositeRange <T, TKey> A range with inclusive boundaries. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source ToCompositeRange<T>(Range<T>) Converts range to the composite range. Declaration public static CompositeRange<T> ToCompositeRange<T>(this Range<T> range) Parameters Type Name Description Range <T> range The range. Returns Type Description CompositeRange <T> A new composite range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source ToCompositeRange<T>(IEnumerable<Range<T>>) Converts sequence of elements to the composite range. Declaration public static CompositeRange<T> ToCompositeRange<T>(this IEnumerable<Range<T>> ranges) Parameters Type Name Description System.Collections.Generic.IEnumerable < Range <T>> ranges The ranges. Returns Type Description CompositeRange <T> A new composite range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source ToCompositeRange<T, TKey>(Range<T, TKey>) Converts range to the composite range. Declaration public static CompositeRange<T, TKey> ToCompositeRange<T, TKey>(this Range<T, TKey> range) Parameters Type Name Description Range <T, TKey> range The range. Returns Type Description CompositeRange <T, TKey> A new composite range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source ToCompositeRange<T, TKey>(IEnumerable<TKey>, Func<TKey, T>, Func<TKey, T>) Converts sequence of elements to the composite range. Declaration public static CompositeRange<T, TKey> ToCompositeRange<T, TKey>(this IEnumerable<TKey> source, Func<TKey, T> fromValueSelector, Func<TKey, T> toValueSelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TKey> source Original collection. System.Func <TKey, T> fromValueSelector Callback to obtain a value for the From boundary. System.Func <TKey, T> toValueSelector Callback to obtain a value for the To boundary. Returns Type Description CompositeRange <T, TKey> A new composite range with keys filled from the original collection. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source ToCompositeRange<T, TKey>(IEnumerable<Range<T, TKey>>) Converts sequence of elements to the composite range. Declaration public static CompositeRange<T, TKey> ToCompositeRange<T, TKey>(this IEnumerable<Range<T, TKey>> ranges) Parameters Type Name Description System.Collections.Generic.IEnumerable < Range <T, TKey>> ranges The ranges. Returns Type Description CompositeRange <T, TKey> A new composite range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source ToCompositeRange<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, T>, Func<TSource, TKey>) Converts sequence of elements to the composite range. Declaration public static CompositeRange<T, TKey> ToCompositeRange<TSource, T, TKey>(this IEnumerable<TSource> source, Func<TSource, T> fromValueSelector, Func<TSource, T> toValueSelector, Func<TSource, TKey> keySelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source Original collection. System.Func <TSource, T> fromValueSelector Callback to obtain a value for the From boundary. System.Func <TSource, T> toValueSelector Callback to obtain a value for the To boundary. System.Func <TSource, TKey> keySelector Callback to obtain a value for the range key. Returns Type Description CompositeRange <T, TKey> A new composite range with keys filled from the original collection. Type Parameters Name Description TSource The type of the values in original collection. T The type of the range values. TKey The type of the range key | Improve this Doc View Source ToCompositeRangeFrom<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) Converts sequence of elements to the composite range using only From boundary. The To boundary value is taken from the next item in sequence (+∞ for the last item in sequence) Declaration public static CompositeRange<T, TSource> ToCompositeRangeFrom<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> fromValueSelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source Original collection. System.Func <TSource, T> fromValueSelector Callback to obtain a value for the From boundary. Returns Type Description CompositeRange <T, TSource> A new composite range with keys filled from the original collection. Type Parameters Name Description TSource The type of the values in original collection. T The type of the range values. | Improve this Doc View Source ToCompositeRangeFrom<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) Converts sequence of elements to the composite range using only From boundary. The To boundary value is taken from the next item in sequence (+∞ for the last item in sequence) Declaration public static CompositeRange<T, TKey> ToCompositeRangeFrom<TSource, T, TKey>(this IEnumerable<TSource> source, Func<TSource, T> fromValueSelector, Func<TSource, TKey> keySelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source Original collection. System.Func <TSource, T> fromValueSelector Callback to obtain a value for the From boundary. System.Func <TSource, TKey> keySelector Callback to obtain a value for the range key. Returns Type Description CompositeRange <T, TKey> A new composite range with keys filled from the original collection. Type Parameters Name Description TSource The type of the values in original collection. T The type of the range values. TKey The type of the range key | Improve this Doc View Source ToCompositeRangeTo<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) Converts sequence of elements to the composite range using only To boundary. The From boundary value is taken from the previous item in sequence (-∞ for the last item in sequence). Declaration public static CompositeRange<T, TSource> ToCompositeRangeTo<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> toValueSelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source Original collection. System.Func <TSource, T> toValueSelector Callback to obtain a value for the To boundary. Returns Type Description CompositeRange <T, TSource> A new composite range with keys filled from the original collection. Type Parameters Name Description TSource The type of the values in original collection. T The type of the range values. | Improve this Doc View Source ToCompositeRangeTo<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) Converts sequence of elements to the composite range using only To boundary. The From boundary value is taken from the previous item in sequence (-∞ for the last item in sequence). Declaration public static CompositeRange<T, TKey> ToCompositeRangeTo<TSource, T, TKey>(this IEnumerable<TSource> source, Func<TSource, T> toValueSelector, Func<TSource, TKey> keySelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source Original collection. System.Func <TSource, T> toValueSelector Callback to obtain a value for the To boundary. System.Func <TSource, TKey> keySelector Callback to obtain a value for the range key. Returns Type Description CompositeRange <T, TKey> A new composite range with keys filled from the original collection. Type Parameters Name Description TSource The type of the values in original collection. T The type of the range values. TKey The type of the range key | Improve this Doc View Source TrimFrom<T>(CompositeRange<T>, T) Trims the range from the left. Declaration public static CompositeRange<T> TrimFrom<T>(this CompositeRange<T> compositeRange, T from) Parameters Type Name Description CompositeRange <T> compositeRange The source range. T from A new value From. Returns Type Description CompositeRange <T> A range trimmed with a new From boundary. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source TrimFrom<T>(CompositeRange<T>, RangeBoundaryFrom<T>) Trims the range from the left. Declaration public static CompositeRange<T> TrimFrom<T>(this CompositeRange<T> compositeRange, RangeBoundaryFrom<T> from) Parameters Type Name Description CompositeRange <T> compositeRange The source range. RangeBoundaryFrom <T> from A new boundary From. Returns Type Description CompositeRange <T> A range trimmed with a new From boundary. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source TrimFrom<T, TKey>(CompositeRange<T, TKey>, T) Trims the range from the left. Declaration public static CompositeRange<T, TKey> TrimFrom<T, TKey>(this CompositeRange<T, TKey> compositeRange, T from) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. T from A new value From. Returns Type Description CompositeRange <T, TKey> A range trimmed with a new From boundary. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source TrimFrom<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryFrom<T>) Trims the range from the left. Declaration public static CompositeRange<T, TKey> TrimFrom<T, TKey>(this CompositeRange<T, TKey> compositeRange, RangeBoundaryFrom<T> from) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. RangeBoundaryFrom <T> from A new boundary From. Returns Type Description CompositeRange <T, TKey> A range trimmed with a new From boundary. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source TrimTo<T>(CompositeRange<T>, T) Trims the range from the right. Declaration public static CompositeRange<T> TrimTo<T>(this CompositeRange<T> compositeRange, T to) Parameters Type Name Description CompositeRange <T> compositeRange The source range. T to A new value To. Returns Type Description CompositeRange <T> A range trimmed with a new To boundary. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source TrimTo<T>(CompositeRange<T>, RangeBoundaryTo<T>) Trims the range from the right. Declaration public static CompositeRange<T> TrimTo<T>(this CompositeRange<T> compositeRange, RangeBoundaryTo<T> to) Parameters Type Name Description CompositeRange <T> compositeRange The source range. RangeBoundaryTo <T> to A new boundary To. Returns Type Description CompositeRange <T> A range trimmed with a new To boundary. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source TrimTo<T, TKey>(CompositeRange<T, TKey>, T) Trims the range from the right. Declaration public static CompositeRange<T, TKey> TrimTo<T, TKey>(this CompositeRange<T, TKey> compositeRange, T to) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. T to A new value To. Returns Type Description CompositeRange <T, TKey> A range trimmed with a new To boundary. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source TrimTo<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryTo<T>) Trims the range from the right. Declaration public static CompositeRange<T, TKey> TrimTo<T, TKey>(this CompositeRange<T, TKey> compositeRange, RangeBoundaryTo<T> to) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. RangeBoundaryTo <T> to A new boundary To. Returns Type Description CompositeRange <T, TKey> A range trimmed with a new To boundary. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Union<T>(CompositeRange<T>, CompositeRange<T>) Returns a union range containing all subranges. Declaration public static CompositeRange<T> Union<T>(this CompositeRange<T> compositeRange, CompositeRange<T> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. CompositeRange <T> other The range to union with. Returns Type Description CompositeRange <T> A union range containing all subranges. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Union<T>(CompositeRange<T>, Range<T>) Returns a union range containing all subranges. Declaration public static CompositeRange<T> Union<T>(this CompositeRange<T> compositeRange, Range<T> other) Parameters Type Name Description CompositeRange <T> compositeRange The source range. Range <T> other The range to union with. Returns Type Description CompositeRange <T> A union range containing all subranges. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Union<T, TKey>(CompositeRange<T, TKey>, CompositeRange<T, TKey>) Returns a union range containing all subranges. Declaration public static CompositeRange<T, TKey> Union<T, TKey>(this CompositeRange<T, TKey> compositeRange, CompositeRange<T, TKey> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. CompositeRange <T, TKey> other The range to union with. Returns Type Description CompositeRange <T, TKey> A union range containing all subranges. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Union<T, TKey>(CompositeRange<T, TKey>, Range<T, TKey>) Returns a union range containing all subranges. Declaration public static CompositeRange<T, TKey> Union<T, TKey>(this CompositeRange<T, TKey> compositeRange, Range<T, TKey> other) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Range <T, TKey> other The range to union with. Returns Type Description CompositeRange <T, TKey> A union range containing all subranges. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source WithKeys<T, TKey2>(CompositeRange<T>, TKey2) Creates a new composite range with the key specified. Declaration public static CompositeRange<T, TKey2> WithKeys<T, TKey2>(this CompositeRange<T> compositeRange, TKey2 key) Parameters Type Name Description CompositeRange <T> compositeRange The source range. TKey2 key The value of the new key. Returns Type Description CompositeRange <T, TKey2> A new composite range with the key specified. Type Parameters Name Description T The type of the range values. TKey2 The type of the new key. | Improve this Doc View Source WithKeys<T, TKey, TKey2>(CompositeRange<T, TKey>, TKey2) Creates a new composite range with the key specified. Declaration public static CompositeRange<T, TKey2> WithKeys<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, TKey2 key) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. TKey2 key The value of the new key. Returns Type Description CompositeRange <T, TKey2> A new composite range with the key specified. Type Parameters Name Description T The type of the range values. TKey The type of the range key TKey2 The type of the new key. | Improve this Doc View Source WithKeys<T, TKey, TKey2>(CompositeRange<T, TKey>, Func<TKey, TKey2>) Creates a new composite range with the key specified. Declaration public static CompositeRange<T, TKey2> WithKeys<T, TKey, TKey2>(this CompositeRange<T, TKey> compositeRange, Func<TKey, TKey2> keySelector) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. System.Func <TKey, TKey2> keySelector Callback to obtain a value for the range key. Returns Type Description CompositeRange <T, TKey2> A new composite range with the key specified. Type Parameters Name Description T The type of the range values. TKey The type of the range key TKey2 The type of the new key. | Improve this Doc View Source WithoutKeys<T, TKey>(CompositeRange<T, TKey>) Removes keys from the composite range. Declaration public static CompositeRange<T> WithoutKeys<T, TKey>(this CompositeRange<T, TKey> compositeRange) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. Returns Type Description CompositeRange <T> A new composite range without associated keys. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source WithValues<T, T2>(CompositeRange<T>, Func<T, T2>) Creates a new composite range with the key specified. Declaration public static CompositeRange<T2> WithValues<T, T2>(this CompositeRange<T> compositeRange, Func<T, T2> newValueSelector) Parameters Type Name Description CompositeRange <T> compositeRange The source range. System.Func <T, T2> newValueSelector The value of the new key. Returns Type Description CompositeRange <T2> A new composite range with the key specified. Type Parameters Name Description T The type of the range values. T2 The type of new range values. | Improve this Doc View Source WithValues<T, T2>(CompositeRange<T>, Func<T, T2>, Func<T, T2>) Creates a new composite range with the key specified. Declaration public static CompositeRange<T2> WithValues<T, T2>(this CompositeRange<T> compositeRange, Func<T, T2> fromValueSelector, Func<T, T2> toValueSelector) Parameters Type Name Description CompositeRange <T> compositeRange The source range. System.Func <T, T2> fromValueSelector Callback to obtain a new value for the From boundary. Used if boundary has a value. System.Func <T, T2> toValueSelector Callback to obtain a new value for the To boundary. Used if boundary has a value. Returns Type Description CompositeRange <T2> A new composite range with the key specified. Type Parameters Name Description T The type of the range values. T2 The type of new range values. | Improve this Doc View Source WithValues<T, TKey, T2>(CompositeRange<T, TKey>, Func<T, T2>) Creates a new composite range with the key specified. Declaration public static CompositeRange<T2, TKey> WithValues<T, TKey, T2>(this CompositeRange<T, TKey> compositeRange, Func<T, T2> newValueSelector) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. System.Func <T, T2> newValueSelector The value of the new key. Returns Type Description CompositeRange <T2, TKey> A new composite range with the key specified. Type Parameters Name Description T The type of the range values. TKey The type of the range key T2 The type of new range values. | Improve this Doc View Source WithValues<T, TKey, T2>(CompositeRange<T, TKey>, Func<T, T2>, Func<T, T2>) Creates a new composite range with the key specified. Declaration public static CompositeRange<T2, TKey> WithValues<T, TKey, T2>(this CompositeRange<T, TKey> compositeRange, Func<T, T2> fromValueSelector, Func<T, T2> toValueSelector) Parameters Type Name Description CompositeRange <T, TKey> compositeRange The source range. System.Func <T, T2> fromValueSelector Callback to obtain a new value for the From boundary. Used if boundary has a value. System.Func <T, T2> toValueSelector Callback to obtain a new value for the To boundary. Used if boundary has a value. Returns Type Description CompositeRange <T2, TKey> A new composite range with the key specified. Type Parameters Name Description T The type of the range values. TKey The type of the range key T2 The type of new range values."
  },
  "api/main/CodeJam.Ranges.CompositeRange.html": {
    "href": "api/main/CodeJam.Ranges.CompositeRange.html",
    "title": "Class CompositeRange | CodeJam",
    "keywords": "Class CompositeRange Helper methods for the CompositeRange<T> . Inheritance System.Object CompositeRange Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax public static class CompositeRange Methods | Improve this Doc View Source Create<T>(Range<T>) Creates the composite range. Declaration public static CompositeRange<T> Create<T>(Range<T> range) Parameters Type Name Description Range <T> range The range. Returns Type Description CompositeRange <T> A new composite range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Create<T>(Range<T>[]) Creates the composite range. Declaration public static CompositeRange<T> Create<T>(params Range<T>[] ranges) Parameters Type Name Description Range <T>[] ranges The ranges. Returns Type Description CompositeRange <T> A new composite range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Create<T, TKey>(Range<T, TKey>) Creates the composite range. Declaration public static CompositeRange<T, TKey> Create<T, TKey>(Range<T, TKey> range) Parameters Type Name Description Range <T, TKey> range The range. Returns Type Description CompositeRange <T, TKey> A new composite range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Create<T, TKey>(Range<T, TKey>[]) Creates the composite range. Declaration public static CompositeRange<T, TKey> Create<T, TKey>(params Range<T, TKey>[] ranges) Parameters Type Name Description Range <T, TKey>[] ranges The ranges. Returns Type Description CompositeRange <T, TKey> A new composite range. Type Parameters Name Description T The type of the range values. TKey The type of the range key"
  },
  "api/main/CodeJam.Memory.html": {
    "href": "api/main/CodeJam.Memory.html",
    "title": "Class Memory | CodeJam",
    "keywords": "Class Memory The utility class for working with arrays of primitive types. Inheritance System.Object Memory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class Memory Methods | Improve this Doc View Source Compare(Byte*, Byte*, Int32) Determines whether the first count of bytes of the p1 is equal to the p2 . Declaration public static bool Compare(byte *p1, byte *p2, int count) Parameters Type Name Description System.Byte * p1 The first buffer to compare. System.Byte * p2 The second buffer to compare. System.Int32 count The number of bytes to compare. Returns Type Description System.Boolean true if all count bytes of the p1 and p2 are equal; otherwise, false. | Improve this Doc View Source CompareInline(Byte*, Byte*, Int32) Determines whether the first count of bytes of the p1 is equal to the p2 . Declaration public static bool CompareInline(byte *p1, byte *p2, int count) Parameters Type Name Description System.Byte * p1 The first buffer to compare. System.Byte * p2 The second buffer to compare. System.Int32 count The number of bytes to compare. Returns Type Description System.Boolean true if all count bytes of the p1 and p2 are equal; otherwise, false. Remarks This is a forced inline version, use with care."
  },
  "api/main/CodeJam.Lazy.html": {
    "href": "api/main/CodeJam.Lazy.html",
    "title": "Class Lazy | CodeJam",
    "keywords": "Class Lazy Helper methods for System.Lazy<T> class. Inheritance System.Object Lazy Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class Lazy Methods | Improve this Doc View Source Create<T>() Initializes a new instance of the System.Lazy<T> class. When lazy initialization occurs, the default constructor of the target type is used. Declaration public static Lazy<T> Create<T>() Returns Type Description System.Lazy <T> New System.Lazy<T> instance. Type Parameters Name Description T The type of object that is being lazily initialized. | Improve this Doc View Source Create<T>(Boolean) Initializes a new instance of the System.Lazy<T> class. When lazy initialization occurs, the default constructor of the target type is used. Declaration public static Lazy<T> Create<T>(bool isThreadSafe) Parameters Type Name Description System.Boolean isThreadSafe true to make this instance usable concurrently by multiple threads; false to make the instance usable by only one thread at a time. Returns Type Description System.Lazy <T> New System.Lazy<T> instance. Type Parameters Name Description T The type of object that is being lazily initialized. | Improve this Doc View Source Create<T>(Func<T>) Initializes a new instance of the System.Lazy<T> class. When lazy initialization occurs, the default constructor of the target type is used. Declaration public static Lazy<T> Create<T>(Func<T> valueFactory) Parameters Type Name Description System.Func <T> valueFactory The delegate that is invoked to produce the lazily initialized value when it is needed. Returns Type Description System.Lazy <T> New System.Lazy<T> instance. Type Parameters Name Description T The type of object that is being lazily initialized. | Improve this Doc View Source Create<T>(Func<T>, Boolean) Initializes a new instance of the System.Lazy<T> class. When lazy initialization occurs, the default constructor of the target type is used. Declaration public static Lazy<T> Create<T>(Func<T> valueFactory, bool isThreadSafe) Parameters Type Name Description System.Func <T> valueFactory The delegate that is invoked to produce the lazily initialized value when it is needed. System.Boolean isThreadSafe true to make this instance usable concurrently by multiple threads; false to make the instance usable by only one thread at a time. Returns Type Description System.Lazy <T> New System.Lazy<T> instance. Type Parameters Name Description T The type of object that is being lazily initialized. | Improve this Doc View Source Create<T>(Func<T>, LazyThreadSafetyMode) Initializes a new instance of the System.Lazy<T> class. When lazy initialization occurs, the default constructor of the target type is used. Declaration public static Lazy<T> Create<T>(Func<T> valueFactory, LazyThreadSafetyMode mode) Parameters Type Name Description System.Func <T> valueFactory The delegate that is invoked to produce the lazily initialized value when it is needed. System.Threading.LazyThreadSafetyMode mode One of the enumeration values that specifies the thread safety mode. Returns Type Description System.Lazy <T> New System.Lazy<T> instance. Type Parameters Name Description T The type of object that is being lazily initialized. | Improve this Doc View Source Create<T>(LazyThreadSafetyMode) Initializes a new instance of the System.Lazy<T> class. When lazy initialization occurs, the default constructor of the target type is used. Declaration public static Lazy<T> Create<T>(LazyThreadSafetyMode mode) Parameters Type Name Description System.Threading.LazyThreadSafetyMode mode One of the enumeration values that specifies the thread safety mode. Returns Type Description System.Lazy <T> New System.Lazy<T> instance. Type Parameters Name Description T The type of object that is being lazily initialized."
  },
  "api/main/CodeJam.IO.IoCodeExceptions.html": {
    "href": "api/main/CodeJam.IO.IoCodeExceptions.html",
    "title": "Class IoCodeExceptions | CodeJam",
    "keywords": "Class IoCodeExceptions IO exception factory class Inheritance System.Object IoCodeExceptions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.IO Assembly : CodeJam.dll Syntax public static class IoCodeExceptions Methods | Improve this Doc View Source ArgumentDirectoryExistsFileExpected(String, String) Creates System.IO.FileNotFoundException for missing file when there is a dictionary. Declaration public static FileNotFoundException ArgumentDirectoryExistsFileExpected(string argumentName, string filePath) Parameters Type Name Description System.String argumentName Name of the argument. System.String filePath The file being checked. Returns Type Description System.IO.FileNotFoundException Initialized instance of System.IO.FileNotFoundException . | Improve this Doc View Source ArgumentDirectoryNotFound(String, String) Creates System.IO.DirectoryNotFoundException for missing directory. Declaration public static DirectoryNotFoundException ArgumentDirectoryNotFound(string argumentName, string directoryPath) Parameters Type Name Description System.String argumentName Name of the argument. System.String directoryPath The directory being checked. Returns Type Description System.IO.DirectoryNotFoundException Initialized instance of System.IO.DirectoryNotFoundException . | Improve this Doc View Source ArgumentFileExistsDirectoryExpected(String, String) Creates System.IO.DirectoryNotFoundException for missing directory when there is a file. Declaration public static DirectoryNotFoundException ArgumentFileExistsDirectoryExpected(string argumentName, string directoryPath) Parameters Type Name Description System.String argumentName Name of the argument. System.String directoryPath The directory being checked. Returns Type Description System.IO.DirectoryNotFoundException Initialized instance of System.IO.DirectoryNotFoundException . | Improve this Doc View Source ArgumentFileNotFound(String, String) Creates System.IO.FileNotFoundException for missing file. Declaration public static FileNotFoundException ArgumentFileNotFound(string argumentName, string filePath) Parameters Type Name Description System.String argumentName Name of the argument. System.String filePath The file being checked. Returns Type Description System.IO.FileNotFoundException Initialized instance of System.IO.FileNotFoundException . | Improve this Doc View Source ArgumentNotSimpleName(String, String) Creates System.ArgumentException for invalid simple name. Declaration public static ArgumentException ArgumentNotSimpleName(string argumentName, string path) Parameters Type Name Description System.String argumentName Name of the argument. System.String path The path being checked. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException . | Improve this Doc View Source ArgumentNotVolumeOrDirectoryPath(String, String) Creates System.ArgumentException if path does not ends with one of path separator chars. Declaration public static ArgumentException ArgumentNotVolumeOrDirectoryPath(string argumentName, string path) Parameters Type Name Description System.String argumentName Name of the argument. System.String path The path being checked. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException . | Improve this Doc View Source ArgumentNotWellFormedAbsolutePath(String, String) Creates System.ArgumentException for invalid full path. Declaration public static ArgumentException ArgumentNotWellFormedAbsolutePath(string argumentName, string path) Parameters Type Name Description System.String argumentName Name of the argument. System.String path The path being checked. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException . | Improve this Doc View Source ArgumentNotWellFormedPath(String, String) Creates System.ArgumentException for invalid path. Declaration public static ArgumentException ArgumentNotWellFormedPath(string argumentName, string path) Parameters Type Name Description System.String argumentName Name of the argument. System.String path The path being checked. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException . | Improve this Doc View Source ArgumentRootedOrNotRelativePath(String, String) Creates System.ArgumentException for invalid relative path. Declaration public static ArgumentException ArgumentRootedOrNotRelativePath(string argumentName, string path) Parameters Type Name Description System.String argumentName Name of the argument. System.String path The path being checked. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException . | Improve this Doc View Source DirectoryExists(String) Creates IOException(String, Object[]) for directory that should not exist. Declaration public static IOException DirectoryExists(string directoryPath) Parameters Type Name Description System.String directoryPath The directory being checked. Returns Type Description System.IO.IOException Initialized instance of IOException(String, Object[]) . | Improve this Doc View Source FileExists(String) Creates IOException(String, Object[]) for file that should not exist. Declaration public static IOException FileExists(string filePath) Parameters Type Name Description System.String filePath The file being checked. Returns Type Description System.IO.IOException Initialized instance of IOException(String, Object[]) . | Improve this Doc View Source IOException(String, Object[]) Creates IOException(String, Object[]) . Declaration public static IOException IOException(string messageFormat, params object[] args) Parameters Type Name Description System.String messageFormat The message format. System.Object [] args The arguments. Returns Type Description System.IO.IOException Initialized instance of IOException(String, Object[]) ."
  },
  "api/main/CodeJam.IO.IoCode.html": {
    "href": "api/main/CodeJam.IO.IoCode.html",
    "title": "Class IoCode | CodeJam",
    "keywords": "Class IoCode IO assertions class. Inheritance System.Object IoCode Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.IO Assembly : CodeJam.dll Syntax public static class IoCode Methods | Improve this Doc View Source DirectoryExists(String, String) Asserts that specified directory does exist. Declaration public static void DirectoryExists(string directoryPath, string argName) Parameters Type Name Description System.String directoryPath Path to the directory. System.String argName Name of the argument. | Improve this Doc View Source FileExists(String, String) Asserts that specified file does exist. Declaration public static void FileExists(string filePath, string argName) Parameters Type Name Description System.String filePath Path to the file. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedAbsolutePath(String, String) Asserts that specified path is well-formed full path. Declaration public static void IsWellFormedAbsolutePath(string path, string argName) Parameters Type Name Description System.String path The path. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedContainerPath(String, String) Asserts that specified path is well formed and ends with directory or volume separator chars. Declaration public static void IsWellFormedContainerPath(string path, string argName) Parameters Type Name Description System.String path The path. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedPath(String, String) Asserts that specified path is either absolute or relative not rooted path. Declaration public static void IsWellFormedPath(string path, string argName) Parameters Type Name Description System.String path The path. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedRelativePath(String, String) Asserts that specified path is well-formed full path. Declaration public static void IsWellFormedRelativePath(string path, string argName) Parameters Type Name Description System.String path The path. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedSimpleName(String, String) Asserts that specified path is well-formed simple name. Declaration public static void IsWellFormedSimpleName(string path, string argName) Parameters Type Name Description System.String path The path. System.String argName Name of the argument. | Improve this Doc View Source PathIsFree(String) Asserts that specified path is not a path to existent file or a directory. Declaration public static void PathIsFree(string path) Parameters Type Name Description System.String path The path."
  },
  "api/main/CodeJam.EnumCode.html": {
    "href": "api/main/CodeJam.EnumCode.html",
    "title": "Class EnumCode | CodeJam",
    "keywords": "Class EnumCode Enum assertions class. Inheritance System.Object EnumCode Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class EnumCode Methods | Improve this Doc View Source AnyFlagSet<TEnum>(TEnum, String, TEnum) Asserts that any bit from specified argument flag is set. Declaration public static void AnyFlagSet<TEnum>(TEnum value, string argName, TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The argument. System.String argName Name of the argument. TEnum flags The bitwise combinations of the flags. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source AnyFlagUnset<TEnum>(TEnum, String, TEnum) Asserts that any bit from specified argument flag is not set. Declaration public static void AnyFlagUnset<TEnum>(TEnum value, string argName, TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The argument. System.String argName Name of the argument. TEnum flags The bitwise combinations of the flags. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source AnyStateFlagSet<TEnum>(TEnum, TEnum, String) Asserts that any bit from specified state flag is set. Declaration public static void AnyStateFlagSet<TEnum>(TEnum value, TEnum flags, string message)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flags The bitwise combinations of the flags. System.String message The message. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source AnyStateFlagSet<TEnum>(TEnum, TEnum, String, Object[]) Asserts that any bit from specified state flag is set. Declaration public static void AnyStateFlagSet<TEnum>(TEnum value, TEnum flags, string messageFormat, params object[] args)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flags The bitwise combinations of the flags. System.String messageFormat The message format. System.Object [] args The arguments. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source AnyStateFlagUnset<TEnum>(TEnum, TEnum, String) Asserts that any bit from specified state flag is not set. Declaration public static void AnyStateFlagUnset<TEnum>(TEnum value, TEnum flags, string message)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flags The bitwise combinations of the flags. System.String message The message. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source AnyStateFlagUnset<TEnum>(TEnum, TEnum, String, Object[]) Asserts that any bit from specified state flag is not set. Declaration public static void AnyStateFlagUnset<TEnum>(TEnum value, TEnum flags, string messageFormat, params object[] args)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flags The bitwise combinations of the flags. System.String messageFormat The message format. System.Object [] args The arguments. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source Defined<TEnum>(TEnum, String) Asserts that specified argument enum value is defined. Declaration public static void Defined<TEnum>(TEnum value, string argName)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The argument. System.String argName Name of the argument. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source FlagsDefined<TEnum>(TEnum, String) Asserts that all bits of the flags combination are defined. Declaration public static void FlagsDefined<TEnum>(TEnum argFlags, string argName)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum argFlags The bitwise combinations of the flags to check. System.String argName Name of the argument. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source FlagSet<TEnum>(TEnum, String, TEnum) Asserts that the specified argument flag is set. Declaration public static void FlagSet<TEnum>(TEnum value, string argName, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The argument. System.String argName Name of the argument. TEnum flag The flag. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source FlagUnset<TEnum>(TEnum, String, TEnum) Asserts that the specified argument flag is not set. Declaration public static void FlagUnset<TEnum>(TEnum value, string argName, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The argument. System.String argName Name of the argument. TEnum flag The flag. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source StateFlagSet<TEnum>(TEnum, TEnum, String) Asserts that the specified state flag is set. Declaration public static void StateFlagSet<TEnum>(TEnum value, TEnum flag, string message)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flag The flag. System.String message The message. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source StateFlagSet<TEnum>(TEnum, TEnum, String, Object[]) Asserts that the specified state flag is set. Declaration public static void StateFlagSet<TEnum>(TEnum value, TEnum flag, string messageFormat, params object[] args)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flag The flag. System.String messageFormat The message format. System.Object [] args The arguments. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source StateFlagUnset<TEnum>(TEnum, TEnum, String) Asserts that the specified state flag is not set. Declaration public static void StateFlagUnset<TEnum>(TEnum value, TEnum flag, string message)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flag The flag. System.String message The message. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source StateFlagUnset<TEnum>(TEnum, TEnum, String, Object[]) Asserts that the specified state flag is not set. Declaration public static void StateFlagUnset<TEnum>(TEnum value, TEnum flag, string messageFormat, params object[] args)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flag The flag. System.String messageFormat The message format. System.Object [] args The arguments. Type Parameters Name Description TEnum The type of the enum value."
  },
  "api/main/CodeJam.DisposableExtensions.html": {
    "href": "api/main/CodeJam.DisposableExtensions.html",
    "title": "Class DisposableExtensions | CodeJam",
    "keywords": "Class DisposableExtensions The System.IDisposable extensions. Inheritance System.Object DisposableExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class DisposableExtensions Methods | Improve this Doc View Source DisposeAll(IEnumerable<IDisposable>) Invokes the dispose for each item in the disposables . Declaration public static void DisposeAll(this IEnumerable<IDisposable> disposables) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.IDisposable > disposables The multiple System.IDisposable instances. Exceptions Type Condition System.AggregateException | Improve this Doc View Source DisposeAll(IEnumerable<IDisposable>, Func<Exception, Boolean>) Invokes the dispose for each item in the disposables . Declaration public static void DisposeAll(this IEnumerable<IDisposable> disposables, Func<Exception, bool> exceptionHandler) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.IDisposable > disposables The multiple System.IDisposable instances. System.Func < System.Exception , System.Boolean > exceptionHandler The exception handler."
  },
  "api/main/CodeJam.Dates.html": {
    "href": "api/main/CodeJam.Dates.html",
    "title": "Namespace CodeJam.Dates | CodeJam",
    "keywords": "Namespace CodeJam.Dates Classes DateTimeExtensions Helper methods for date manipulations DateTimeRangeExtensions Helper methods for date manipulations"
  },
  "api/main/CodeJam.Collections.KeyEqualityComparer-2.html": {
    "href": "api/main/CodeJam.Collections.KeyEqualityComparer-2.html",
    "title": "Class KeyEqualityComparer<T, TKey> | CodeJam",
    "keywords": "Class KeyEqualityComparer<T, TKey> An implementation of the System.Collections.Generic.IEqualityComparer<T> interface for compare values by comparing their extracted key values. Inheritance System.Object KeyEqualityComparer<T, TKey> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public sealed class KeyEqualityComparer<T, TKey> : IEqualityComparer<T> Type Parameters Name Description T TKey Constructors | Improve this Doc View Source KeyEqualityComparer(Func<T, TKey>) Initializes a new instance of the KeyEqualityComparer<T, TKey> . Declaration public KeyEqualityComparer(Func<T, TKey> keySelector) Parameters Type Name Description System.Func <T, TKey> keySelector The function to extract the key for each element. | Improve this Doc View Source KeyEqualityComparer(Func<T, TKey>, IEqualityComparer<TKey>) Initializes a new instance of the KeyEqualityComparer<T, TKey> . Declaration public KeyEqualityComparer(Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Func <T, TKey> keySelector The function to extract the key for each element. System.Collections.Generic.IEqualityComparer <TKey> comparer The equality comparer to use to compare the keys. Properties | Improve this Doc View Source Comparer Gets the equality comparer to use to compare the keys. Declaration public IEqualityComparer<TKey> Comparer { get; } Property Value Type Description System.Collections.Generic.IEqualityComparer <TKey> The equality comparer to use to compare the keys. | Improve this Doc View Source KeySelector Gets the function to extract the key for each element. Declaration public Func<T, TKey> KeySelector { get; } Property Value Type Description System.Func <T, TKey> The function to extract the key for each element. Methods | Improve this Doc View Source Equals(T, T) Determines whether the specified objects are equal. Declaration public bool Equals(T x, T y) Parameters Type Name Description T x The first object of type T to compare. T y The second object of type T to compare. Returns Type Description System.Boolean true if the specified objects are equal; otherwise, false. Implements System.Collections.Generic.IEqualityComparer<T>.Equals(T, T) | Improve this Doc View Source GetHashCode(T) Returns a hash code for the specified object. Declaration public int GetHashCode(T obj) Parameters Type Name Description T obj The System.Object for which a hash code is to be returned. Returns Type Description System.Int32 A hash code for the specified object. Implements System.Collections.Generic.IEqualityComparer<T>.GetHashCode(T) Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Collections.CollectionExtensions.html": {
    "href": "api/main/CodeJam.Collections.CollectionExtensions.html",
    "title": "Class CollectionExtensions | CodeJam",
    "keywords": "Class CollectionExtensions Various collections extensions. Inheritance System.Object CollectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public static class CollectionExtensions Methods | Improve this Doc View Source AddRange<T>(ICollection<T>, T[]) Adds the elements to the end of the System.Collections.Generic.ICollection<T> . Declaration public static void AddRange<T>(this ICollection<T> source, params T[] items) Parameters Type Name Description System.Collections.Generic.ICollection <T> source The collection to add the elements to. T[] items The items to add to the collection. Type Parameters Name Description T The type of the items that the collection contains. | Improve this Doc View Source AddRange<T>(ICollection<T>, IEnumerable<T>) Adds the elements to the end of the System.Collections.Generic.ICollection<T> . Declaration public static void AddRange<T>(this ICollection<T> source, IEnumerable<T> items) Parameters Type Name Description System.Collections.Generic.ICollection <T> source The collection to add the elements to. System.Collections.Generic.IEnumerable <T> items The items to add to the collection. Type Parameters Name Description T The type of the items that the collection contains. | Improve this Doc View Source AddRange<T>(ICollection<T>, IList<T>) Adds the elements to the end of the System.Collections.Generic.ICollection<T> . Declaration public static void AddRange<T>(this ICollection<T> source, IList<T> items) Parameters Type Name Description System.Collections.Generic.ICollection <T> source The collection to add the elements to. System.Collections.Generic.IList <T> items The items to add to the collection. Type Parameters Name Description T The type of the items that the collection contains. | Improve this Doc View Source IsNullOrEmpty<T>(T[]) Indicates whether the specified array is null or empty. Declaration public static bool IsNullOrEmpty<T>(this T[] array) Parameters Type Name Description T[] array The collection to test for emptiness. Returns Type Description System.Boolean true , if the array parameter is null or empty; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source IsNullOrEmpty<T>(ICollection<T>) Indicates whether the specified collection is null or empty. Declaration public static bool IsNullOrEmpty<T>(this ICollection<T> collection) Parameters Type Name Description System.Collections.Generic.ICollection <T> collection The collection to test for emptiness. Returns Type Description System.Boolean true , if the collection parameter is null or empty; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source NotNullNorEmpty<T>(T[]) Indicates whether the specified array is is not null nor empty. Declaration public static bool NotNullNorEmpty<T>(this T[] array) Parameters Type Name Description T[] array The collection to test. Returns Type Description System.Boolean true , if the array parameter is not null nor empty; otherwise, false . Type Parameters Name Description T | Improve this Doc View Source NotNullNorEmpty<T>(ICollection<T>) Indicates whether the specified collection is not null nor empty. Declaration public static bool NotNullNorEmpty<T>(this ICollection<T> collection) Parameters Type Name Description System.Collections.Generic.ICollection <T> collection The collection to test. Returns Type Description System.Boolean true , if the collection parameter is not null nor empty; otherwise, false . Type Parameters Name Description T"
  },
  "api/main/CodeJam.Algorithms.html": {
    "href": "api/main/CodeJam.Algorithms.html",
    "title": "Class Algorithms | CodeJam",
    "keywords": "Class Algorithms Miscellaneous algorithms Inheritance System.Object Algorithms Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class Algorithms Methods | Improve this Doc View Source EqualRange(IList<DateTime>, DateTime) Returns the tuple of [i, j] where i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange(this IList<DateTime> list, DateTime value) Parameters Type Name Description System.Collections.Generic.IList < System.DateTime > list The sorted list System.DateTime value The value to compare Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<DateTime>, DateTime, Int32) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange(this IList<DateTime> list, DateTime value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.DateTime > list The sorted list System.DateTime value The value to compare System.Int32 startIndex The minimum index Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<DateTime>, DateTime, Int32, Int32) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists Declaration public static Range<int> EqualRange(this IList<DateTime> list, DateTime value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.DateTime > list The sorted list System.DateTime value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<DateTimeOffset>, DateTimeOffset) Returns the tuple of [i, j] where i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange(this IList<DateTimeOffset> list, DateTimeOffset value) Parameters Type Name Description System.Collections.Generic.IList < System.DateTimeOffset > list The sorted list System.DateTimeOffset value The value to compare Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<DateTimeOffset>, DateTimeOffset, Int32) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange(this IList<DateTimeOffset> list, DateTimeOffset value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.DateTimeOffset > list The sorted list System.DateTimeOffset value The value to compare System.Int32 startIndex The minimum index Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<DateTimeOffset>, DateTimeOffset, Int32, Int32) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists Declaration public static Range<int> EqualRange(this IList<DateTimeOffset> list, DateTimeOffset value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.DateTimeOffset > list The sorted list System.DateTimeOffset value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<Double>, Double) Returns the tuple of [i, j] where i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange(this IList<double> list, double value) Parameters Type Name Description System.Collections.Generic.IList < System.Double > list The sorted list System.Double value The value to compare Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<Double>, Double, Int32) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange(this IList<double> list, double value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.Double > list The sorted list System.Double value The value to compare System.Int32 startIndex The minimum index Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<Double>, Double, Int32, Int32) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists Declaration public static Range<int> EqualRange(this IList<double> list, double value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.Double > list The sorted list System.Double value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<Single>, Single) Returns the tuple of [i, j] where i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange(this IList<float> list, float value) Parameters Type Name Description System.Collections.Generic.IList < System.Single > list The sorted list System.Single value The value to compare Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<Single>, Single, Int32) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange(this IList<float> list, float value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.Single > list The sorted list System.Single value The value to compare System.Int32 startIndex The minimum index Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<Single>, Single, Int32, Int32) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists Declaration public static Range<int> EqualRange(this IList<float> list, float value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.Single > list The sorted list System.Single value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<TimeSpan>, TimeSpan) Returns the tuple of [i, j] where i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange(this IList<TimeSpan> list, TimeSpan value) Parameters Type Name Description System.Collections.Generic.IList < System.TimeSpan > list The sorted list System.TimeSpan value The value to compare Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<TimeSpan>, TimeSpan, Int32) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange(this IList<TimeSpan> list, TimeSpan value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.TimeSpan > list The sorted list System.TimeSpan value The value to compare System.Int32 startIndex The minimum index Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange(IList<TimeSpan>, TimeSpan, Int32, Int32) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists Declaration public static Range<int> EqualRange(this IList<TimeSpan> list, TimeSpan value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.TimeSpan > list The sorted list System.TimeSpan value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value | Improve this Doc View Source EqualRange<TElement, TValue>(IList<TElement>, TValue) Returns the tuple of [i, j] where i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange<TElement, TValue>(this IList<TElement> list, TValue value)where TElement : IComparable<TValue> Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value Type Parameters Name Description TElement The list element type Should implement IComparable<TValue> TValue The type of the value | Improve this Doc View Source EqualRange<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Returns the tuple of [i, j] where i is the smallest index in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange<TElement, TValue>(this IList<TElement> list, TValue value, Func<TElement, TValue, int> comparer) Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Func <TElement, TValue, System.Int32 > comparer The function with the Comparer<T>.Compare semantics Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value Type Parameters Name Description TElement The list element type TValue The type of the value | Improve this Doc View Source EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex)where TElement : IComparable<TValue> Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Int32 startIndex The minimum index Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value Type Parameters Name Description TElement The list element type Should implement IComparable<TValue> TValue The type of the value | Improve this Doc View Source EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists j is the smallest index in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such j exists Declaration public static Range<int> EqualRange<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, Func<TElement, TValue, int> comparer) Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Int32 startIndex The minimum index System.Func <TElement, TValue, System.Int32 > comparer The function with the Comparer<T>.Compare semantics Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value Type Parameters Name Description TElement The list element type TValue The type of the value | Improve this Doc View Source EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists Declaration public static Range<int> EqualRange<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, int endIndex)where TElement : IComparable<TValue> Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value Type Parameters Name Description TElement The list element type Should implement IComparable<TValue> TValue The type of the value | Improve this Doc View Source EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) Returns the tuple of [i, j] where i is the smallest index in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists j is the smallest index in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such j exists Declaration public static Range<int> EqualRange<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, int endIndex, Func<TElement, TValue, int> comparer) Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) System.Func <TElement, TValue, System.Int32 > comparer The function with the Comparer<T>.Compare semantics Returns Type Description Range < System.Int32 > The tuple of lower bound and upper bound for the value Type Parameters Name Description TElement The list element type TValue The type of the value | Improve this Doc View Source LowerBound(IList<DateTime>, DateTime) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound(this IList<DateTime> list, DateTime value) Parameters Type Name Description System.Collections.Generic.IList < System.DateTime > list The sorted list System.DateTime value The value to compare Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<DateTime>, DateTime, Int32) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound(this IList<DateTime> list, DateTime value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.DateTime > list The sorted list System.DateTime value The value to compare System.Int32 startIndex The minimum index Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<DateTime>, DateTime, Int32, Int32) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists Declaration public static int LowerBound(this IList<DateTime> list, DateTime value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.DateTime > list The sorted list System.DateTime value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<DateTimeOffset>, DateTimeOffset) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound(this IList<DateTimeOffset> list, DateTimeOffset value) Parameters Type Name Description System.Collections.Generic.IList < System.DateTimeOffset > list The sorted list System.DateTimeOffset value The value to compare Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<DateTimeOffset>, DateTimeOffset, Int32) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound(this IList<DateTimeOffset> list, DateTimeOffset value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.DateTimeOffset > list The sorted list System.DateTimeOffset value The value to compare System.Int32 startIndex The minimum index Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<DateTimeOffset>, DateTimeOffset, Int32, Int32) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists Declaration public static int LowerBound(this IList<DateTimeOffset> list, DateTimeOffset value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.DateTimeOffset > list The sorted list System.DateTimeOffset value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<Double>, Double) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound(this IList<double> list, double value) Parameters Type Name Description System.Collections.Generic.IList < System.Double > list The sorted list System.Double value The value to compare Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<Double>, Double, Int32) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound(this IList<double> list, double value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.Double > list The sorted list System.Double value The value to compare System.Int32 startIndex The minimum index Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<Double>, Double, Int32, Int32) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists Declaration public static int LowerBound(this IList<double> list, double value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.Double > list The sorted list System.Double value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<Single>, Single) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound(this IList<float> list, float value) Parameters Type Name Description System.Collections.Generic.IList < System.Single > list The sorted list System.Single value The value to compare Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<Single>, Single, Int32) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound(this IList<float> list, float value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.Single > list The sorted list System.Single value The value to compare System.Int32 startIndex The minimum index Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<Single>, Single, Int32, Int32) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists Declaration public static int LowerBound(this IList<float> list, float value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.Single > list The sorted list System.Single value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<TimeSpan>, TimeSpan) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound(this IList<TimeSpan> list, TimeSpan value) Parameters Type Name Description System.Collections.Generic.IList < System.TimeSpan > list The sorted list System.TimeSpan value The value to compare Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<TimeSpan>, TimeSpan, Int32) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound(this IList<TimeSpan> list, TimeSpan value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.TimeSpan > list The sorted list System.TimeSpan value The value to compare System.Int32 startIndex The minimum index Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound(IList<TimeSpan>, TimeSpan, Int32, Int32) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists Declaration public static int LowerBound(this IList<TimeSpan> list, TimeSpan value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.TimeSpan > list The sorted list System.TimeSpan value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description System.Int32 The lower bound for the value | Improve this Doc View Source LowerBound<TElement, TValue>(IList<TElement>, TValue) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound<TElement, TValue>(this IList<TElement> list, TValue value)where TElement : IComparable<TValue> Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare Returns Type Description System.Int32 The lower bound for the value Type Parameters Name Description TElement The list element type Should implement IComparable<TValue> TValue The type of the value | Improve this Doc View Source LowerBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound<TElement, TValue>(this IList<TElement> list, TValue value, Func<TElement, TValue, int> comparer) Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Func <TElement, TValue, System.Int32 > comparer The function with the Comparer<T>.Compare semantics Returns Type Description System.Int32 The lower bound for the value Type Parameters Name Description TElement The list element type TValue The type of the value | Improve this Doc View Source LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex)where TElement : IComparable<TValue> Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Int32 startIndex The minimum index Returns Type Description System.Int32 The lower bound for the value Type Parameters Name Description TElement The list element type Should implement IComparable<TValue> TValue The type of the value | Improve this Doc View Source LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] >= value or list.Count if no such i exists Declaration public static int LowerBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, Func<TElement, TValue, int> comparer) Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Int32 startIndex The minimum index System.Func <TElement, TValue, System.Int32 > comparer The function with the Comparer<T>.Compare semantics Returns Type Description System.Int32 The lower bound for the value Type Parameters Name Description TElement The list element type TValue The type of the value | Improve this Doc View Source LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists Declaration public static int LowerBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, int endIndex)where TElement : IComparable<TValue> Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description System.Int32 The lower bound for the value Type Parameters Name Description TElement The list element type Should implement IComparable<TValue> TValue The type of the value | Improve this Doc View Source LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] >= value or endIndex if no such i exists Declaration public static int LowerBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, int endIndex, Func<TElement, TValue, int> comparer) Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) System.Func <TElement, TValue, System.Int32 > comparer The function with the Comparer<T>.Compare semantics Returns Type Description System.Int32 The lower bound for the value Type Parameters Name Description TElement The list element type TValue The type of the value | Improve this Doc View Source Memoize<TArg, TResult>(Func<TArg, TResult>, Boolean) Caches function value for specific argument. Declaration public static Func<TArg, TResult> Memoize<TArg, TResult>(this Func<TArg, TResult> func, bool threadSafe = false) Parameters Type Name Description System.Func <TArg, TResult> func Function to memoize. System.Boolean threadSafe If true - returns thread safe implementation Returns Type Description System.Func <TArg, TResult> Memoized function Type Parameters Name Description TArg Type of argument TResult Type of result | Improve this Doc View Source Memoize<TArg, TResult>(Func<TArg, TResult>, IEqualityComparer<TArg>, Boolean) Caches function value for specific argument. Declaration public static Func<TArg, TResult> Memoize<TArg, TResult>(this Func<TArg, TResult> func, IEqualityComparer<TArg> comparer, bool threadSafe = false) Parameters Type Name Description System.Func <TArg, TResult> func Function to memoize. System.Collections.Generic.IEqualityComparer <TArg> comparer Argument comparer System.Boolean threadSafe If true - returns thread safe implementation Returns Type Description System.Func <TArg, TResult> Memoized function Type Parameters Name Description TArg Type of argument TResult Type of result | Improve this Doc View Source Memoize<TArg, TResult>(Func<TArg, TResult>, IEqualityComparer<TArg>, LazyThreadSafetyMode) Caches function value for specific argument. Declaration public static Func<TArg, TResult> Memoize<TArg, TResult>(this Func<TArg, TResult> func, IEqualityComparer<TArg> comparer, LazyThreadSafetyMode threadSafety) Parameters Type Name Description System.Func <TArg, TResult> func Function to memoize. System.Collections.Generic.IEqualityComparer <TArg> comparer Argument comparer System.Threading.LazyThreadSafetyMode threadSafety One of the enumeration values that specifies the thread safety mode. Returns Type Description System.Func <TArg, TResult> Memoized function Type Parameters Name Description TArg Type of argument TResult Type of result | Improve this Doc View Source Memoize<TArg, TResult>(Func<TArg, TResult>, LazyThreadSafetyMode) Caches function value for specific argument. Declaration public static Func<TArg, TResult> Memoize<TArg, TResult>(this Func<TArg, TResult> func, LazyThreadSafetyMode threadSafety) Parameters Type Name Description System.Func <TArg, TResult> func Function to memoize. System.Threading.LazyThreadSafetyMode threadSafety One of the enumeration values that specifies the thread safety mode. Returns Type Description System.Func <TArg, TResult> Memoized function Type Parameters Name Description TArg Type of argument TResult Type of result | Improve this Doc View Source Memoize<TArg1, TArg2, TResult>(Func<TArg1, TArg2, TResult>, Boolean) Caches function value for specific arguments. Declaration public static Func<TArg1, TArg2, TResult> Memoize<TArg1, TArg2, TResult>(this Func<TArg1, TArg2, TResult> func, bool threadSafe = false) Parameters Type Name Description System.Func <TArg1, TArg2, TResult> func Function to memoize. System.Boolean threadSafe If true - returns thread safe implementation Returns Type Description System.Func <TArg1, TArg2, TResult> Memoized function Type Parameters Name Description TArg1 Type of argument 1 TArg2 Type of argument 2 TResult Type of result | Improve this Doc View Source Memoize<TArg1, TArg2, TResult>(Func<TArg1, TArg2, TResult>, LazyThreadSafetyMode) Caches function value for specific arguments. Declaration public static Func<TArg1, TArg2, TResult> Memoize<TArg1, TArg2, TResult>(this Func<TArg1, TArg2, TResult> func, LazyThreadSafetyMode threadSafety) Parameters Type Name Description System.Func <TArg1, TArg2, TResult> func Function to memoize. System.Threading.LazyThreadSafetyMode threadSafety One of the enumeration values that specifies the thread safety mode. Returns Type Description System.Func <TArg1, TArg2, TResult> Memoized function Type Parameters Name Description TArg1 Type of argument 1 TArg2 Type of argument 2 TResult Type of result | Improve this Doc View Source Memoize<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, TResult>, Boolean) Caches function value for specific arguments. Declaration public static Func<TArg1, TArg2, TArg3, TResult> Memoize<TArg1, TArg2, TArg3, TResult>(this Func<TArg1, TArg2, TArg3, TResult> func, bool threadSafe = false) Parameters Type Name Description System.Func <TArg1, TArg2, TArg3, TResult> func Function to memoize. System.Boolean threadSafe If true - returns thread safe implementation Returns Type Description System.Func <TArg1, TArg2, TArg3, TResult> Memoized function Type Parameters Name Description TArg1 Type of argument 1 TArg2 Type of argument 2 TArg3 Type of argument 3 TResult Type of result | Improve this Doc View Source Memoize<TArg1, TArg2, TArg3, TResult>(Func<TArg1, TArg2, TArg3, TResult>, LazyThreadSafetyMode) Caches function value for specific arguments. Declaration public static Func<TArg1, TArg2, TArg3, TResult> Memoize<TArg1, TArg2, TArg3, TResult>(this Func<TArg1, TArg2, TArg3, TResult> func, LazyThreadSafetyMode threadSafety) Parameters Type Name Description System.Func <TArg1, TArg2, TArg3, TResult> func Function to memoize. System.Threading.LazyThreadSafetyMode threadSafety One of the enumeration values that specifies the thread safety mode. Returns Type Description System.Func <TArg1, TArg2, TArg3, TResult> Memoized function Type Parameters Name Description TArg1 Type of argument 1 TArg2 Type of argument 2 TArg3 Type of argument 3 TResult Type of result | Improve this Doc View Source Memoize<TArg1, TArg2, TArg3, TArg4, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TResult>, Boolean) Caches function value for specific arguments. Declaration public static Func<TArg1, TArg2, TArg3, TArg4, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TResult> func, bool threadSafe = false) Parameters Type Name Description System.Func <TArg1, TArg2, TArg3, TArg4, TResult> func Function to memoize. System.Boolean threadSafe If true - returns thread safe implementation Returns Type Description System.Func <TArg1, TArg2, TArg3, TArg4, TResult> Memoized function Type Parameters Name Description TArg1 Type of argument 1 TArg2 Type of argument 2 TArg3 Type of argument 3 TArg4 Type of argument 4 TResult Type of result | Improve this Doc View Source Memoize<TArg1, TArg2, TArg3, TArg4, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TResult>, LazyThreadSafetyMode) Caches function value for specific arguments. Declaration public static Func<TArg1, TArg2, TArg3, TArg4, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TResult> func, LazyThreadSafetyMode threadSafety) Parameters Type Name Description System.Func <TArg1, TArg2, TArg3, TArg4, TResult> func Function to memoize. System.Threading.LazyThreadSafetyMode threadSafety One of the enumeration values that specifies the thread safety mode. Returns Type Description System.Func <TArg1, TArg2, TArg3, TArg4, TResult> Memoized function Type Parameters Name Description TArg1 Type of argument 1 TArg2 Type of argument 2 TArg3 Type of argument 3 TArg4 Type of argument 4 TResult Type of result | Improve this Doc View Source Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>, Boolean) Caches function value for specific arguments. Declaration public static Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult> func, bool threadSafe = false) Parameters Type Name Description System.Func <TArg1, TArg2, TArg3, TArg4, TArg5, TResult> func Function to memoize. System.Boolean threadSafe If true - returns thread safe implementation Returns Type Description System.Func <TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Memoized function Type Parameters Name Description TArg1 Type of argument 1 TArg2 Type of argument 2 TArg3 Type of argument 3 TArg4 Type of argument 4 TArg5 Type of argument 5 TResult Type of result | Improve this Doc View Source Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>, LazyThreadSafetyMode) Caches function value for specific arguments. Declaration public static Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TArg5, TResult> func, LazyThreadSafetyMode threadSafety) Parameters Type Name Description System.Func <TArg1, TArg2, TArg3, TArg4, TArg5, TResult> func Function to memoize. System.Threading.LazyThreadSafetyMode threadSafety One of the enumeration values that specifies the thread safety mode. Returns Type Description System.Func <TArg1, TArg2, TArg3, TArg4, TArg5, TResult> Memoized function Type Parameters Name Description TArg1 Type of argument 1 TArg2 Type of argument 2 TArg3 Type of argument 3 TArg4 Type of argument 4 TArg5 Type of argument 5 TResult Type of result | Improve this Doc View Source Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>, Boolean) Caches function value for specific arguments. Declaration public static Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> func, bool threadSafe = false) Parameters Type Name Description System.Func <TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> func Function to memoize. System.Boolean threadSafe If true - returns thread safe implementation Returns Type Description System.Func <TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> Memoized function Type Parameters Name Description TArg1 Type of argument 1 TArg2 Type of argument 2 TArg3 Type of argument 3 TArg4 Type of argument 4 TArg5 Type of argument 5 TArg6 Type of argument 6 TResult Type of result | Improve this Doc View Source Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>, LazyThreadSafetyMode) Caches function value for specific arguments. Declaration public static Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> func, LazyThreadSafetyMode threadSafety) Parameters Type Name Description System.Func <TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> func Function to memoize. System.Threading.LazyThreadSafetyMode threadSafety One of the enumeration values that specifies the thread safety mode. Returns Type Description System.Func <TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TResult> Memoized function Type Parameters Name Description TArg1 Type of argument 1 TArg2 Type of argument 2 TArg3 Type of argument 3 TArg4 Type of argument 4 TArg5 Type of argument 5 TArg6 Type of argument 6 TResult Type of result | Improve this Doc View Source Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>, Boolean) Caches function value for specific arguments. Declaration public static Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> func, bool threadSafe = false) Parameters Type Name Description System.Func <TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> func Function to memoize. System.Boolean threadSafe If true - returns thread safe implementation Returns Type Description System.Func <TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> Memoized function Type Parameters Name Description TArg1 Type of argument 1 TArg2 Type of argument 2 TArg3 Type of argument 3 TArg4 Type of argument 4 TArg5 Type of argument 5 TArg6 Type of argument 6 TArg7 Type of argument 7 TResult Type of result | Improve this Doc View Source Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>, LazyThreadSafetyMode) Caches function value for specific arguments. Declaration public static Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> Memoize<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult>(this Func<TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> func, LazyThreadSafetyMode threadSafety) Parameters Type Name Description System.Func <TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> func Function to memoize. System.Threading.LazyThreadSafetyMode threadSafety One of the enumeration values that specifies the thread safety mode. Returns Type Description System.Func <TArg1, TArg2, TArg3, TArg4, TArg5, TArg6, TArg7, TResult> Memoized function Type Parameters Name Description TArg1 Type of argument 1 TArg2 Type of argument 2 TArg3 Type of argument 3 TArg4 Type of argument 4 TArg5 Type of argument 5 TArg6 Type of argument 6 TArg7 Type of argument 7 TResult Type of result | Improve this Doc View Source PartitionPoint<T>(IList<T>, Int32, Int32, Predicate<T>) Returns the index i in the range [startIndex, endIndex - 1] such that predicate(list[j]) = true for j < i and predicate(list[k]) = false for k >= i or endIndex if no such i exists The list should be partitioned according to the predicate Declaration public static int PartitionPoint<T>(this IList<T> list, int startIndex, int endIndex, Predicate<T> predicate) Parameters Type Name Description System.Collections.Generic.IList <T> list The sorted list System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) System.Predicate <T> predicate The predicate Returns Type Description System.Int32 The partition point Type Parameters Name Description T The list element type | Improve this Doc View Source PartitionPoint<T>(IList<T>, Int32, Predicate<T>) Returns the index i in the range [startIndex, list.Count - 1] such that predicate(list[j]) = true for j < i and predicate(list[k]) = false for k >= i or list.Count if no such i exists The list should be partitioned according to the predicate Declaration public static int PartitionPoint<T>(this IList<T> list, int startIndex, Predicate<T> predicate) Parameters Type Name Description System.Collections.Generic.IList <T> list The sorted list System.Int32 startIndex The minimum index System.Predicate <T> predicate The predicate Returns Type Description System.Int32 The partition point Type Parameters Name Description T The list element type | Improve this Doc View Source PartitionPoint<T>(IList<T>, Predicate<T>) Returns the index i in the range [0, list.Count - 1] such that predicate(list[j]) = true for j < i and predicate(list[k]) = false for k >= i or list.Count if no such i exists The list should be partitioned according to the predicate Declaration public static int PartitionPoint<T>(this IList<T> list, Predicate<T> predicate) Parameters Type Name Description System.Collections.Generic.IList <T> list The sorted list System.Predicate <T> predicate The predicate Returns Type Description System.Int32 The partition point Type Parameters Name Description T The list element type | Improve this Doc View Source Swap<T>(ref T, ref T) Swaps two objects Declaration public static void Swap<T>(ref T value1, ref T value2) Parameters Type Name Description T value1 First value to swap. T value2 Second value to swap. Type Parameters Name Description T Type of values | Improve this Doc View Source UpperBound(IList<DateTime>, DateTime) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound(this IList<DateTime> list, DateTime value) Parameters Type Name Description System.Collections.Generic.IList < System.DateTime > list The sorted list System.DateTime value The value to compare Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<DateTime>, DateTime, Int32) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound(this IList<DateTime> list, DateTime value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.DateTime > list The sorted list System.DateTime value The value to compare System.Int32 startIndex The minimum index Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<DateTime>, DateTime, Int32, Int32) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such i exists Declaration public static int UpperBound(this IList<DateTime> list, DateTime value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.DateTime > list The sorted list System.DateTime value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<DateTimeOffset>, DateTimeOffset) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound(this IList<DateTimeOffset> list, DateTimeOffset value) Parameters Type Name Description System.Collections.Generic.IList < System.DateTimeOffset > list The sorted list System.DateTimeOffset value The value to compare Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<DateTimeOffset>, DateTimeOffset, Int32) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound(this IList<DateTimeOffset> list, DateTimeOffset value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.DateTimeOffset > list The sorted list System.DateTimeOffset value The value to compare System.Int32 startIndex The minimum index Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<DateTimeOffset>, DateTimeOffset, Int32, Int32) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such i exists Declaration public static int UpperBound(this IList<DateTimeOffset> list, DateTimeOffset value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.DateTimeOffset > list The sorted list System.DateTimeOffset value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<Double>, Double) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound(this IList<double> list, double value) Parameters Type Name Description System.Collections.Generic.IList < System.Double > list The sorted list System.Double value The value to compare Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<Double>, Double, Int32) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound(this IList<double> list, double value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.Double > list The sorted list System.Double value The value to compare System.Int32 startIndex The minimum index Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<Double>, Double, Int32, Int32) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such i exists Declaration public static int UpperBound(this IList<double> list, double value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.Double > list The sorted list System.Double value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<Single>, Single) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound(this IList<float> list, float value) Parameters Type Name Description System.Collections.Generic.IList < System.Single > list The sorted list System.Single value The value to compare Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<Single>, Single, Int32) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound(this IList<float> list, float value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.Single > list The sorted list System.Single value The value to compare System.Int32 startIndex The minimum index Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<Single>, Single, Int32, Int32) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such i exists Declaration public static int UpperBound(this IList<float> list, float value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.Single > list The sorted list System.Single value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<TimeSpan>, TimeSpan) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound(this IList<TimeSpan> list, TimeSpan value) Parameters Type Name Description System.Collections.Generic.IList < System.TimeSpan > list The sorted list System.TimeSpan value The value to compare Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<TimeSpan>, TimeSpan, Int32) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound(this IList<TimeSpan> list, TimeSpan value, int startIndex) Parameters Type Name Description System.Collections.Generic.IList < System.TimeSpan > list The sorted list System.TimeSpan value The value to compare System.Int32 startIndex The minimum index Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound(IList<TimeSpan>, TimeSpan, Int32, Int32) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such i exists Declaration public static int UpperBound(this IList<TimeSpan> list, TimeSpan value, int startIndex, int endIndex) Parameters Type Name Description System.Collections.Generic.IList < System.TimeSpan > list The sorted list System.TimeSpan value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description System.Int32 The upper bound for the value | Improve this Doc View Source UpperBound<TElement, TValue>(IList<TElement>, TValue) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound<TElement, TValue>(this IList<TElement> list, TValue value)where TElement : IComparable<TValue> Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare Returns Type Description System.Int32 The upper bound for the value Type Parameters Name Description TElement The list element type Should implement IComparable<TValue> TValue The type of the value | Improve this Doc View Source UpperBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Returns the minimum index i in the range [0, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound<TElement, TValue>(this IList<TElement> list, TValue value, Func<TElement, TValue, int> comparer) Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Func <TElement, TValue, System.Int32 > comparer The function with the Comparer<T>.Compare semantics Returns Type Description System.Int32 The upper bound for the value Type Parameters Name Description TElement The list element type TValue The type of the value | Improve this Doc View Source UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex)where TElement : IComparable<TValue> Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Int32 startIndex The minimum index Returns Type Description System.Int32 The upper bound for the value Type Parameters Name Description TElement The list element type Should implement IComparable<TValue> TValue The type of the value | Improve this Doc View Source UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Returns the minimum index i in the range [startIndex, list.Count - 1] such that list[i] > value or list.Count if no such i exists Declaration public static int UpperBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, Func<TElement, TValue, int> comparer) Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Int32 startIndex The minimum index System.Func <TElement, TValue, System.Int32 > comparer The function with the Comparer<T>.Compare semantics Returns Type Description System.Int32 The upper bound for the value Type Parameters Name Description TElement The list element type TValue The type of the value | Improve this Doc View Source UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such i exists Declaration public static int UpperBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, int endIndex)where TElement : IComparable<TValue> Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) Returns Type Description System.Int32 The upper bound for the value Type Parameters Name Description TElement The list element type Should implement IComparable<TValue> TValue The type of the value | Improve this Doc View Source UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) Returns the minimum index i in the range [startIndex, endIndex - 1] such that list[i] > value or endIndex if no such i exists Declaration public static int UpperBound<TElement, TValue>(this IList<TElement> list, TValue value, int startIndex, int endIndex, Func<TElement, TValue, int> comparer) Parameters Type Name Description System.Collections.Generic.IList <TElement> list The sorted list TValue value The value to compare System.Int32 startIndex The minimum index System.Int32 endIndex The upper bound for the index (not included) System.Func <TElement, TValue, System.Int32 > comparer The function with the Comparer<T>.Compare semantics Returns Type Description System.Int32 The upper bound for the value Type Parameters Name Description TElement The list element type TValue The type of the value"
  },
  "api/blocks/CodeJam.TableData.CsvFormat.html": {
    "href": "api/blocks/CodeJam.TableData.CsvFormat.html",
    "title": "Class CsvFormat | CodeJam",
    "keywords": "Class CsvFormat CSV format support. Inheritance System.Object CsvFormat Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.TableData Assembly : CodeJam.Blocks.dll Syntax public static class CsvFormat Methods | Improve this Doc View Source CreateParser(Boolean, Char) Creates RFC4180 compliant CSV parser. Declaration public static Parser CreateParser(bool allowEscaping = true, char columnSeparator = ',') Parameters Type Name Description System.Boolean allowEscaping If true, allows values escaping. System.Char columnSeparator Char to use as column separator Returns Type Description Parser Parser to use with Parse(Parser, String) | Improve this Doc View Source EscapeValue(String) Escapes csv value. Declaration public static string EscapeValue(string value) Parameters Type Name Description System.String value The value. Returns Type Description System.String Escaped value. | Improve this Doc View Source Parse(TextReader, Boolean, Char) Parses CSV data. Declaration public static IEnumerable<DataLine> Parse(TextReader reader, bool allowEscaping = true, char columnSeparator = ',') Parameters Type Name Description System.IO.TextReader reader Text to parse System.Boolean allowEscaping If true, allows values escaping. System.Char columnSeparator Char to use as column separator Returns Type Description System.Collections.Generic.IEnumerable < DataLine > Enumeration of DataLine contained parsed data. | Improve this Doc View Source Print(TextWriter, IEnumerable<String[]>, String, Boolean) Prints full data table Declaration public static void Print(TextWriter writer, IEnumerable<string[]> data, string indent = null, bool allowEscaping = true) Parameters Type Name Description System.IO.TextWriter writer Instance of System.IO.TextWriter to write to. System.Collections.Generic.IEnumerable < System.String []> data Data to write. System.String indent The indent. System.Boolean allowEscaping If true, allows values escaping."
  },
  "api/blocks/CodeJam.Metadata.IMetadataReader.html": {
    "href": "api/blocks/CodeJam.Metadata.IMetadataReader.html",
    "title": "Interface IMetadataReader | CodeJam",
    "keywords": "Interface IMetadataReader Metadata reader interface. Namespace : CodeJam.Metadata Assembly : CodeJam.Blocks.dll Syntax public interface IMetadataReader Methods | Improve this Doc View Source GetAttributes<T>(MemberInfo, Boolean) Returns custom attributes applied to provided type member. Declaration T[] GetAttributes<T>(MemberInfo memberInfo, bool inherit = true)where T : Attribute Parameters Type Name Description System.Reflection.MemberInfo memberInfo Type member. System.Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . Returns Type Description T[] Array of custom attributes. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this member are returned. | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Returns custom attributes applied to provided type. Declaration T[] GetAttributes<T>(Type type, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type Object type System.Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . Returns Type Description T[] Array of custom attributes. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this type are returned. Extension Methods Map.DeepCopy<T>(T)"
  },
  "api/blocks/CodeJam.Mapping.MapperBuilder-2.html": {
    "href": "api/blocks/CodeJam.Mapping.MapperBuilder-2.html",
    "title": "Class MapperBuilder<TFrom, TTo> | CodeJam",
    "keywords": "Class MapperBuilder<TFrom, TTo> Builds a mapper that maps an object of TFrom type to an object of TTo type. Inheritance System.Object MapperBuilder<TFrom, TTo> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax public class MapperBuilder<TFrom, TTo> : IMapperBuilder Type Parameters Name Description TFrom Type to map from. TTo Type to map to. Properties | Improve this Doc View Source DeepCopy If true, performs deep copy. if default (null), the GetMapperExpressionEx() method does not do deep copy, however the GetMapperExpression() method does. Declaration public bool ? DeepCopy { get; set; } Property Value Type Description System.Nullable < System.Boolean > Implements IMapperBuilder.DeepCopy | Improve this Doc View Source FromMappingDictionary Defines member name mapping for source types. Declaration public Dictionary<Type, Dictionary<string, string>> FromMappingDictionary { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.Type , System.Collections.Generic.Dictionary < System.String , System.String >> Implements IMapperBuilder.FromMappingDictionary | Improve this Doc View Source FromType Type to map from. Declaration public Type FromType { get; } Property Value Type Description System.Type Implements IMapperBuilder.FromType | Improve this Doc View Source MappingSchema Mapping schema. Declaration public MappingSchema MappingSchema { get; set; } Property Value Type Description MappingSchema Implements IMapperBuilder.MappingSchema | Improve this Doc View Source MemberFilter Filters target members to map. Declaration public Func<MemberAccessor, bool> MemberFilter { get; set; } Property Value Type Description System.Func < MemberAccessor , System.Boolean > Implements IMapperBuilder.MemberFilter | Improve this Doc View Source MemberMappers Member mappers. Declaration public List<> MemberMappers { get; set; } Property Value Type Description System.Collections.Generic.List < System. > Implements IMapperBuilder.MemberMappers | Improve this Doc View Source ProcessCrossReferences If true, processes object cross references. if default (null), the GetMapperExpressionEx() method does not process cross references, however the GetMapperExpression() method does. Declaration public bool ? ProcessCrossReferences { get; set; } Property Value Type Description System.Nullable < System.Boolean > Implements IMapperBuilder.ProcessCrossReferences | Improve this Doc View Source ToMappingDictionary Defines member name mapping for destination types. Declaration public Dictionary<Type, Dictionary<string, string>> ToMappingDictionary { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.Type , System.Collections.Generic.Dictionary < System.String , System.String >> Implements IMapperBuilder.ToMappingDictionary | Improve this Doc View Source ToType Type to map to. Declaration public Type ToType { get; } Property Value Type Description System.Type Implements IMapperBuilder.ToType Methods | Improve this Doc View Source FromMapping(IReadOnlyDictionary<String, String>) Defines member name mapping for source types. Declaration public MapperBuilder<TFrom, TTo> FromMapping(IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source FromMapping(String, String) Defines member name mapping for source types. Declaration public MapperBuilder<TFrom, TTo> FromMapping(string memberName, string mapName) Parameters Type Name Description System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source FromMapping(Type, IReadOnlyDictionary<String, String>) Defines member name mapping for source types. Declaration public MapperBuilder<TFrom, TTo> FromMapping(Type type, IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description System.Type type Type to map. System.Collections.Generic.IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source FromMapping(Type, String, String) Defines member name mapping for source types. Declaration public MapperBuilder<TFrom, TTo> FromMapping(Type type, string memberName, string mapName) Parameters Type Name Description System.Type type Type to map. System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source FromMapping<T>(IReadOnlyDictionary<String, String>) Defines member name mapping for source types. Declaration public MapperBuilder<TFrom, TTo> FromMapping<T>(IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type to map. | Improve this Doc View Source FromMapping<T>(String, String) Defines member name mapping for source types. Declaration public MapperBuilder<TFrom, TTo> FromMapping<T>(string memberName, string mapName) Parameters Type Name Description System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type to map. | Improve this Doc View Source GetMapper() Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public Mapper<TFrom, TTo> GetMapper() Returns Type Description Mapper <TFrom, TTo> Mapping expression. | Improve this Doc View Source GetMapperExpression() Returns a mapper expression to map an object of TFrom type to an object of TTo type. Declaration public Expression<Func<TFrom, TTo, IDictionary<object, object>, TTo>> GetMapperExpression() Returns Type Description System.Linq.Expressions.Expression < System.Func <TFrom, TTo, System.Collections.Generic.IDictionary < System.Object , System.Object >, TTo>> Mapping expression. | Improve this Doc View Source GetMapperExpressionEx() Returns a mapper expression to map an object of TFrom type to an object of TTo type. Returned expression is compatible to IQueriable. Declaration public Expression<Func<TFrom, TTo>> GetMapperExpressionEx() Returns Type Description System.Linq.Expressions.Expression < System.Func <TFrom, TTo>> Mapping expression. | Improve this Doc View Source MapMember<T>(Expression<Func<TTo, T>>, Expression<Func<TFrom, T>>) Adds member mapper. Declaration public MapperBuilder<TFrom, TTo> MapMember<T>(Expression<Func<TTo, T>> toMember, Expression<Func<TFrom, T>> setter) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TTo, T>> toMember Expression that returns a member to map. System.Linq.Expressions.Expression < System.Func <TFrom, T>> setter Expression to set the member. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type of the member to map. Examples This example shows how to explicitly convert one value to another. | Improve this Doc View Source Mapping(IReadOnlyDictionary<String, String>) Defines member name mapping for source and destination types. Declaration public MapperBuilder<TFrom, TTo> Mapping(IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source Mapping(String, String) Defines member name mapping for source and destination types. Declaration public MapperBuilder<TFrom, TTo> Mapping(string memberName, string mapName) Parameters Type Name Description System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source Mapping(Type, IReadOnlyDictionary<String, String>) Defines member name mapping for source and destination types. Declaration public MapperBuilder<TFrom, TTo> Mapping(Type type, IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description System.Type type Type to map. System.Collections.Generic.IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source Mapping(Type, String, String) Defines member name mapping for source and destination types. Declaration public MapperBuilder<TFrom, TTo> Mapping(Type type, string memberName, string mapName) Parameters Type Name Description System.Type type Type to map. System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source Mapping<T>(IReadOnlyDictionary<String, String>) Defines member name mapping for source and destination types. Declaration public MapperBuilder<TFrom, TTo> Mapping<T>(IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type to map. | Improve this Doc View Source Mapping<T>(String, String) Defines member name mapping for source and destination types. Declaration public MapperBuilder<TFrom, TTo> Mapping<T>(string memberName, string mapName) Parameters Type Name Description System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type to map. | Improve this Doc View Source SetDeepCopy(Nullable<Boolean>) If true, performs deep copy. Declaration public MapperBuilder<TFrom, TTo> SetDeepCopy(bool ? deepCopy) Parameters Type Name Description System.Nullable < System.Boolean > deepCopy If true, performs deep copy. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source SetMappingSchema(MappingSchema) Sets mapping schema. Declaration public MapperBuilder<TFrom, TTo> SetMappingSchema(MappingSchema schema) Parameters Type Name Description MappingSchema schema Mapping schema to set. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source SetMemberFilter(Func<MemberAccessor, Boolean>) Adds a predicate to filter target members to map. Declaration public MapperBuilder<TFrom, TTo> SetMemberFilter(Func<MemberAccessor, bool> predicate) Parameters Type Name Description System.Func < MemberAccessor , System.Boolean > predicate Predicate to filter members to map. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source SetProcessCrossReferences(Nullable<Boolean>) If true, processes object cross references. Declaration public MapperBuilder<TFrom, TTo> SetProcessCrossReferences(bool ? doProcess) Parameters Type Name Description System.Nullable < System.Boolean > doProcess If true, processes object cross references. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source ToMapping(IReadOnlyDictionary<String, String>) Defines member name mapping for destination types. Declaration public MapperBuilder<TFrom, TTo> ToMapping(IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source ToMapping(String, String) Defines member name mapping for destination types. Declaration public MapperBuilder<TFrom, TTo> ToMapping(string memberName, string mapName) Parameters Type Name Description System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source ToMapping(Type, IReadOnlyDictionary<String, String>) Defines member name mapping for destination types. Declaration public MapperBuilder<TFrom, TTo> ToMapping(Type type, IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description System.Type type Type to map. System.Collections.Generic.IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source ToMapping(Type, String, String) Defines member name mapping for destination types. Declaration public MapperBuilder<TFrom, TTo> ToMapping(Type type, string memberName, string mapName) Parameters Type Name Description System.Type type Type to map. System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. | Improve this Doc View Source ToMapping<T>(IReadOnlyDictionary<String, String>) Defines member name mapping for destination types. Declaration public MapperBuilder<TFrom, TTo> ToMapping<T>(IReadOnlyDictionary<string, string> mapping) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary < System.String , System.String > mapping Mapping parameters. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type to map. | Improve this Doc View Source ToMapping<T>(String, String) Defines member name mapping for destination types. Declaration public MapperBuilder<TFrom, TTo> ToMapping<T>(string memberName, string mapName) Parameters Type Name Description System.String memberName Type member name. System.String mapName Mapping name. Returns Type Description MapperBuilder <TFrom, TTo> Returns this mapper. Type Parameters Name Description T Type to map. Explicit Interface Implementations | Improve this Doc View Source IMapperBuilder.GetMapperLambdaExpression() Declaration LambdaExpression IMapperBuilder.GetMapperLambdaExpression() Returns Type Description System.Linq.Expressions.LambdaExpression Implements IMapperBuilder.GetMapperLambdaExpression() | Improve this Doc View Source IMapperBuilder.GetMapperLambdaExpressionEx() Declaration LambdaExpression IMapperBuilder.GetMapperLambdaExpressionEx() Returns Type Description System.Linq.Expressions.LambdaExpression Implements IMapperBuilder.GetMapperLambdaExpressionEx() Extension Methods Map.DeepCopy<T>(T)"
  },
  "api/blocks/CodeJam.Mapping.IMapperBuilder.html": {
    "href": "api/blocks/CodeJam.Mapping.IMapperBuilder.html",
    "title": "Interface IMapperBuilder | CodeJam",
    "keywords": "Interface IMapperBuilder Builds a mapper that maps an object of TFrom type to an object of TTo type. Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax public interface IMapperBuilder Properties | Improve this Doc View Source DeepCopy If true, performs deep copy. if default (null), the GetMapperLambdaExpressionEx() method does not do deep copy, however the GetMapperLambdaExpression() method does. Declaration bool ? DeepCopy { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source FromMappingDictionary Defines member name mapping for source types. Declaration Dictionary<Type, Dictionary<string, string>> FromMappingDictionary { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.Type , System.Collections.Generic.Dictionary < System.String , System.String >> | Improve this Doc View Source FromType Type to map from. Declaration Type FromType { get; } Property Value Type Description System.Type | Improve this Doc View Source MappingSchema Mapping schema. Declaration MappingSchema MappingSchema { get; set; } Property Value Type Description MappingSchema | Improve this Doc View Source MemberFilter Filters target members to map. Declaration Func<MemberAccessor, bool> MemberFilter { get; set; } Property Value Type Description System.Func < MemberAccessor , System.Boolean > | Improve this Doc View Source MemberMappers Member mappers. Declaration List<> MemberMappers { get; set; } Property Value Type Description System.Collections.Generic.List < System. > | Improve this Doc View Source ProcessCrossReferences If true, processes object cross references. if default (null), the GetMapperLambdaExpressionEx() method does not process cross references, however the GetMapperLambdaExpression() method does. Declaration bool ? ProcessCrossReferences { get; set; } Property Value Type Description System.Nullable < System.Boolean > | Improve this Doc View Source ToMappingDictionary Defines member name mapping for destination types. Declaration Dictionary<Type, Dictionary<string, string>> ToMappingDictionary { get; set; } Property Value Type Description System.Collections.Generic.Dictionary < System.Type , System.Collections.Generic.Dictionary < System.String , System.String >> | Improve this Doc View Source ToType Type to map to. Declaration Type ToType { get; } Property Value Type Description System.Type Methods | Improve this Doc View Source GetMapperLambdaExpression() Returns a mapper expression to map an object of TFrom type to an object of TTo type. Declaration LambdaExpression GetMapperLambdaExpression() Returns Type Description System.Linq.Expressions.LambdaExpression Mapping expression. | Improve this Doc View Source GetMapperLambdaExpressionEx() Returns a mapper expression to map an object of TFrom type to an object of TTo type. Returned expression is compatible to IQueriable. Declaration LambdaExpression GetMapperLambdaExpressionEx() Returns Type Description System.Linq.Expressions.LambdaExpression Mapping expression. Extension Methods Map.DeepCopy<T>(T)"
  },
  "api/blocks/index.html": {
    "href": "api/blocks/index.html",
    "title": "This is the HOMEPAGE. | CodeJam",
    "keywords": "This is the HOMEPAGE . Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to images folder if the file is referencing an image."
  },
  "articles/intro.html": {
    "href": "articles/intro.html",
    "title": "Add your introductions here! | CodeJam",
    "keywords": "Add your introductions here!"
  },
  "api/main/CodeJam.UriCodeExceptions.html": {
    "href": "api/main/CodeJam.UriCodeExceptions.html",
    "title": "Class UriCodeExceptions | CodeJam",
    "keywords": "Class UriCodeExceptions Uri exception factory class Inheritance System.Object UriCodeExceptions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class UriCodeExceptions Methods | Improve this Doc View Source ArgumentNotWellFormedUri(String, String, UriKind) Creates System.ArgumentException for invalid URI value. Declaration public static ArgumentException ArgumentNotWellFormedUri(string argumentName, string uri, UriKind uriKind) Parameters Type Name Description System.String argumentName Name of the argument. System.String uri The URI being checked. System.UriKind uriKind Expected kind of the URI. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException ."
  },
  "api/main/CodeJam.UriCode.html": {
    "href": "api/main/CodeJam.UriCode.html",
    "title": "Class UriCode | CodeJam",
    "keywords": "Class UriCode URI assertions class. Inheritance System.Object UriCode Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class UriCode Methods | Improve this Doc View Source IsWellFormedAbsoluteUri(String, String) Asserts that specified URI is well-formed absolute URI. Declaration public static void IsWellFormedAbsoluteUri(string uri, string argName) Parameters Type Name Description System.String uri The URI. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedRelativeUri(String, String) Asserts that specified URI is well-formed relative URI. Declaration public static void IsWellFormedRelativeUri(string uri, string argName) Parameters Type Name Description System.String uri The URI. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedUri(String, String) Asserts that specified URI is well-formed absolute or relative URI. Declaration public static void IsWellFormedUri(string uri, string argName) Parameters Type Name Description System.String uri The URI. System.String argName Name of the argument."
  },
  "api/main/CodeJam.Reflection.html": {
    "href": "api/main/CodeJam.Reflection.html",
    "title": "Namespace CodeJam.Reflection | CodeJam",
    "keywords": "Namespace CodeJam.Reflection Classes AssemblyExtensions The System.Reflection.Assembly extensions. InfoOf Provides a helper class to get the property, field, ctor or method from an expression. InfoOf<T> Provides a helper class to get the property, field, ctor or method from an expression. MemberAccessor Provides fast access to a type member. ParamInfo Parameter data for CreateInstance method. ReflectionEnumHelper Reflection helper methods for enumeration. ReflectionExtensions Reflection extension methods. TypeAccessor Provides fast access to type and its members. TypeAccessor<T> Provides fast access to type and its members."
  },
  "api/main/CodeJam.Reflection.TypeAccessor.html": {
    "href": "api/main/CodeJam.Reflection.TypeAccessor.html",
    "title": "Class TypeAccessor | CodeJam",
    "keywords": "Class TypeAccessor Provides fast access to type and its members. Inheritance System.Object TypeAccessor TypeAccessor <T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Reflection Assembly : CodeJam.dll Syntax public abstract class TypeAccessor Properties | Improve this Doc View Source Item[Int32] Returns MemberAccessor by index. Declaration public MemberAccessor this[int index] { get; } Parameters Type Name Description System.Int32 index Member index. Property Value Type Description MemberAccessor Instance of MemberAccessor . | Improve this Doc View Source Item[String] Returns MemberAccessor by its name. Declaration public MemberAccessor this[string memberName] { get; } Parameters Type Name Description System.String memberName Member name. Property Value Type Description MemberAccessor Instance of MemberAccessor . | Improve this Doc View Source Members Type members. Declaration public List<MemberAccessor> Members { get; } Property Value Type Description System.Collections.Generic.List < MemberAccessor > | Improve this Doc View Source Type Type to access. Declaration public abstract Type Type { get; } Property Value Type Description System.Type Methods | Improve this Doc View Source AddMember(MemberAccessor) Adds MemberAccessor . Declaration protected void AddMember(MemberAccessor member) Parameters Type Name Description MemberAccessor member Instance of MemberAccessor . | Improve this Doc View Source CreateInstance() Creates an instance of the accessed type. Declaration public virtual object CreateInstance() Returns Type Description System.Object An instance of the accessed type. | Improve this Doc View Source GetAccessor(Type) Creates an instance of TypeAccessor . Declaration public static TypeAccessor GetAccessor(Type type) Parameters Type Name Description System.Type type Type to access. Returns Type Description TypeAccessor Instance of TypeAccessor . | Improve this Doc View Source GetAccessor<T>() Creates an instance of TypeAccessor . Declaration public static TypeAccessor<T> GetAccessor<T>() Returns Type Description TypeAccessor <T> Instance of TypeAccessor . Type Parameters Name Description T Type to access. Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Ranges.Range.html": {
    "href": "api/main/CodeJam.Ranges.Range.html",
    "title": "Class Range | CodeJam",
    "keywords": "Class Range Helper methods for the Range<T> . Inheritance System.Object Range Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax public static class Range Methods | Improve this Doc View Source BoundaryFrom<T>(T) Inclusive boundary From factory method. Declaration public static RangeBoundaryFrom<T> BoundaryFrom<T>(T fromValue) Parameters Type Name Description T fromValue From value. Returns Type Description RangeBoundaryFrom <T> New inclusive boundary From, or negative infinity boundary if the fromValue is null or equals to NegativeInfinity static field of the T . or empty boundary if the fromValue equals to NaN static field of the T . Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source BoundaryFromExclusive<T>(T) Exclusive boundary From factory method. Declaration public static RangeBoundaryFrom<T> BoundaryFromExclusive<T>(T fromValue) Parameters Type Name Description T fromValue From value. Returns Type Description RangeBoundaryFrom <T> New exclusive boundary From, or negative infinity boundary if the fromValue is null or equals to NegativeInfinity static field of the T . or empty boundary if the fromValue equals to NaN static field of the T . Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source BoundaryFromInfinity<T>() Negative infinity boundary (-∞) factory method. Declaration public static RangeBoundaryFrom<T> BoundaryFromInfinity<T>() Returns Type Description RangeBoundaryFrom <T> The negative infinity boundary (-∞). Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source BoundaryTo<T>(T) Inclusive boundary To factory method. Declaration public static RangeBoundaryTo<T> BoundaryTo<T>(T toValue) Parameters Type Name Description T toValue To value. Returns Type Description RangeBoundaryTo <T> New inclusive boundary To, or positive infinity boundary if the toValue is null or equals to PositiveInfinity static field of the T . or empty boundary if the toValue equals to NaN static field of the T . Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source BoundaryToExclusive<T>(T) Exclusive boundary To factory method. Declaration public static RangeBoundaryTo<T> BoundaryToExclusive<T>(T toValue) Parameters Type Name Description T toValue To value. Returns Type Description RangeBoundaryTo <T> New exclusive boundary To, or positive infinity boundary if the toValue is null or equals to PositiveInfinity static field of the T . or empty boundary if the toValue equals to NaN static field of the T . Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source BoundaryToInfinity<T>() Positive infinity boundary (+∞) factory method. Declaration public static RangeBoundaryTo<T> BoundaryToInfinity<T>() Returns Type Description RangeBoundaryTo <T> The positive infinity boundary (-∞). Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source Create<T>(T, T) Creates the range. Declaration public static Range<T> Create<T>(T fromValue, T toValue) Parameters Type Name Description T fromValue The value of the boundary From inclusive. T toValue The value of the boundary To inclusive. Returns Type Description Range <T> A new range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Create<T>(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Creates the range. Declaration public static Range<T> Create<T>(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to) Parameters Type Name Description RangeBoundaryFrom <T> from Boundary From. RangeBoundaryTo <T> to Boundary To. Returns Type Description Range <T> A new range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Create<T, TKey>(T, T, TKey) Creates the range. Declaration public static Range<T, TKey> Create<T, TKey>(T fromValue, T toValue, TKey key) Parameters Type Name Description T fromValue The value of the boundary From inclusive. T toValue The value of the boundary To inclusive. TKey key The value of the range key. Returns Type Description Range <T, TKey> A new range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Create<T, TKey>(RangeBoundaryFrom<T>, RangeBoundaryTo<T>, TKey) Creates the range. Declaration public static Range<T, TKey> Create<T, TKey>(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to, TKey key) Parameters Type Name Description RangeBoundaryFrom <T> from Boundary From. RangeBoundaryTo <T> to Boundary To. TKey key The value of the range key. Returns Type Description Range <T, TKey> A new range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source CreateExclusive<T>(T, T) Creates the range. Declaration public static Range<T> CreateExclusive<T>(T fromValue, T toValue) Parameters Type Name Description T fromValue The value of the boundary From exclusive. T toValue The value of the boundary To exclusive. Returns Type Description Range <T> A new range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source CreateExclusive<T, TKey>(T, T, TKey) Creates the range. Declaration public static Range<T, TKey> CreateExclusive<T, TKey>(T fromValue, T toValue, TKey key) Parameters Type Name Description T fromValue The value of the boundary From exclusive. T toValue The value of the boundary To exclusive. TKey key The value of the range key. Returns Type Description Range <T, TKey> A new range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source CreateExclusiveFrom<T>(T, T) Creates the range. Declaration public static Range<T> CreateExclusiveFrom<T>(T fromValue, T toValue) Parameters Type Name Description T fromValue The value of the boundary From exclusive. T toValue The value of the boundary To inclusive. Returns Type Description Range <T> A new range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source CreateExclusiveFrom<T, TKey>(T, T, TKey) Creates the range. Declaration public static Range<T, TKey> CreateExclusiveFrom<T, TKey>(T fromValue, T toValue, TKey key) Parameters Type Name Description T fromValue The value of the boundary From exclusive. T toValue The value of the boundary To inclusive. TKey key The value of the range key. Returns Type Description Range <T, TKey> A new range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source CreateExclusiveTo<T>(T, T) Creates the range. Declaration public static Range<T> CreateExclusiveTo<T>(T fromValue, T toValue) Parameters Type Name Description T fromValue The value of the boundary From inclusive. T toValue The value of the boundary To exclusive. Returns Type Description Range <T> A new range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source CreateExclusiveTo<T, TKey>(T, T, TKey) Creates the range. Declaration public static Range<T, TKey> CreateExclusiveTo<T, TKey>(T fromValue, T toValue, TKey key) Parameters Type Name Description T fromValue The value of the boundary From inclusive. T toValue The value of the boundary To exclusive. TKey key The value of the range key. Returns Type Description Range <T, TKey> A new range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source IsValid<T>(T, T) Returns true if the boundaries can be used for valid range creation. Declaration public static bool IsValid<T>(T from, T to) Parameters Type Name Description T from The value of the boundary From. T to The value of the boundary To. Returns Type Description System.Boolean true , if the boundaries can be used for valid range creation. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source IsValid<T>(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Returns true if the boundaries can be used for valid range creation. Declaration public static bool IsValid<T>(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to) Parameters Type Name Description RangeBoundaryFrom <T> from Boundary From. RangeBoundaryTo <T> to Boundary To. Returns Type Description System.Boolean true , if the boundaries can be used for valid range creation. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Max<T>(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>) Returns the greater one of the two boundaries. Declaration public static RangeBoundaryFrom<T> Max<T>(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description RangeBoundaryFrom <T> The greater one of the two boundaries. Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source Max<T>(RangeBoundaryTo<T>, RangeBoundaryTo<T>) Returns the greater one of the two boundaries. Declaration public static RangeBoundaryTo<T> Max<T>(RangeBoundaryTo<T> boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description RangeBoundaryTo <T> The greater one of the two boundaries. Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source MaxFrom<T>(T, T) Returns the greater one of the two From boundaries. Declaration public static RangeBoundaryFrom<T> MaxFrom<T>(T value1, T value2) Parameters Type Name Description T value1 The value of the boundary1. T value2 The value of the boundary2. Returns Type Description RangeBoundaryFrom <T> The greater one of the two From boundaries. Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source MaxTo<T>(T, T) Returns the greater one of the two To boundaries. Declaration public static RangeBoundaryTo<T> MaxTo<T>(T value1, T value2) Parameters Type Name Description T value1 The value of the boundary1. T value2 The value of the boundary2. Returns Type Description RangeBoundaryTo <T> The greater one of the two To boundaries. Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source Min<T>(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>) Returns the less one of the two boundaries. Declaration public static RangeBoundaryFrom<T> Min<T>(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description RangeBoundaryFrom <T> The less one of the two boundaries. Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source Min<T>(RangeBoundaryTo<T>, RangeBoundaryTo<T>) Returns the less one of the two boundaries. Declaration public static RangeBoundaryTo<T> Min<T>(RangeBoundaryTo<T> boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description RangeBoundaryTo <T> The less one of the two boundaries. Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source MinFrom<T>(T, T) Returns the less one of the two From boundaries. Declaration public static RangeBoundaryFrom<T> MinFrom<T>(T value1, T value2) Parameters Type Name Description T value1 The value of the boundary1. T value2 The value of the boundary2. Returns Type Description RangeBoundaryFrom <T> The less one of the two From boundaries. Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source MinTo<T>(T, T) Returns the less one of the two To boundaries. Declaration public static RangeBoundaryTo<T> MinTo<T>(T value1, T value2) Parameters Type Name Description T value1 The value of the boundary1. T value2 The value of the boundary2. Returns Type Description RangeBoundaryTo <T> The less one of the two To boundaries. Type Parameters Name Description T The type of the boundary value. | Improve this Doc View Source TryCreate<T>(T, T) Tries to create the range. Returns empty range if failed. Declaration public static Range<T> TryCreate<T>(T fromValue, T toValue) Parameters Type Name Description T fromValue The value of the boundary From inclusive. T toValue The value of the boundary To inclusive. Returns Type Description Range <T> A new range or empty range if the boundaries forms invalid range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source TryCreate<T>(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Tries to create the range. Returns empty range if failed. Declaration public static Range<T> TryCreate<T>(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to) Parameters Type Name Description RangeBoundaryFrom <T> from Boundary From. RangeBoundaryTo <T> to Boundary To. Returns Type Description Range <T> A new range or empty range if the boundaries forms invalid range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source TryCreate<T, TKey>(T, T, TKey) Tries to create the range. Returns empty range if failed. Declaration public static Range<T, TKey> TryCreate<T, TKey>(T fromValue, T toValue, TKey key) Parameters Type Name Description T fromValue The value of the boundary From inclusive. T toValue The value of the boundary To inclusive. TKey key The value of the range key. Returns Type Description Range <T, TKey> A new range or empty range if the boundaries forms invalid range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source TryCreate<T, TKey>(RangeBoundaryFrom<T>, RangeBoundaryTo<T>, TKey) Tries to create the range. Returns empty range if failed. Declaration public static Range<T, TKey> TryCreate<T, TKey>(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to, TKey key) Parameters Type Name Description RangeBoundaryFrom <T> from Boundary From. RangeBoundaryTo <T> to Boundary To. TKey key The value of the range key Returns Type Description Range <T, TKey> A new range or empty range if the boundaries forms invalid range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source TryCreateExclusive<T>(T, T) Tries to create the range. Returnss empty range if failed. Declaration public static Range<T> TryCreateExclusive<T>(T fromValue, T toValue) Parameters Type Name Description T fromValue The value of the boundary From exclusive. T toValue The value of the boundary To exclusive. Returns Type Description Range <T> A new range or empty range if the boundaries forms invalid range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source TryCreateExclusive<T, TKey>(T, T, TKey) Tries to create the range. Returnss empty range if failed. Declaration public static Range<T, TKey> TryCreateExclusive<T, TKey>(T fromValue, T toValue, TKey key) Parameters Type Name Description T fromValue The value of the boundary From exclusive. T toValue The value of the boundary To exclusive. TKey key The value of the range key. Returns Type Description Range <T, TKey> A new range or empty range if the boundaries forms invalid range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source TryCreateExclusiveFrom<T>(T, T) Tries to create the range. Returns empty range if failed. Declaration public static Range<T> TryCreateExclusiveFrom<T>(T fromValue, T toValue) Parameters Type Name Description T fromValue The value of the boundary From exclusive. T toValue The value of the boundary To inclusive. Returns Type Description Range <T> A new range or empty range if the boundaries forms invalid range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source TryCreateExclusiveFrom<T, TKey>(T, T, TKey) Tries to create the range. Returns empty range if failed. Declaration public static Range<T, TKey> TryCreateExclusiveFrom<T, TKey>(T fromValue, T toValue, TKey key) Parameters Type Name Description T fromValue The value of the boundary From exclusive. T toValue The value of the boundary To inclusive. TKey key The value of the range key. Returns Type Description Range <T, TKey> A new range or empty range if the boundaries forms invalid range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source TryCreateExclusiveTo<T>(T, T) Tries to create the range. Returns empty range if failed. Declaration public static Range<T> TryCreateExclusiveTo<T>(T fromValue, T toValue) Parameters Type Name Description T fromValue The value of the boundary From inclusive. T toValue The value of the boundary To exclusive. Returns Type Description Range <T> A new range or empty range if the boundaries forms invalid range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source TryCreateExclusiveTo<T, TKey>(T, T, TKey) Tries to create the range. Returns empty range if failed. Declaration public static Range<T, TKey> TryCreateExclusiveTo<T, TKey>(T fromValue, T toValue, TKey key) Parameters Type Name Description T fromValue The value of the boundary From inclusive. T toValue The value of the boundary To exclusive. TKey key The value of the range key. Returns Type Description Range <T, TKey> A new range or empty range if the boundaries forms invalid range. Type Parameters Name Description T The type of the range values. TKey The type of the range key"
  },
  "api/main/CodeJam.Ranges.Range-2.html": {
    "href": "api/main/CodeJam.Ranges.Range-2.html",
    "title": "Struct Range<T, TKey> | CodeJam",
    "keywords": "Struct Range<T, TKey> Describes a range of the values with a key attached. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax [Serializable] public struct Range<T, TKey> : IRangeFactory<T, Range<T, TKey>>, IRange<T>, IEquatable<Range<T, TKey>>, IFormattable Type Parameters Name Description T The type of the value. Should implement System.IComparable<T> or System.IComparable . TKey The type of the range key Constructors | Improve this Doc View Source Range(T, T, TKey) Creates instance of Range<T> Declaration public Range(T from, T to, TKey key) Parameters Type Name Description T from Boundary From. T to Boundary To. TKey key The value of the range key. | Improve this Doc View Source Range(RangeBoundaryFrom<T>, RangeBoundaryTo<T>, TKey) Creates instance of Range<T> Declaration public Range(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to, TKey key) Parameters Type Name Description RangeBoundaryFrom <T> from Boundary From. RangeBoundaryTo <T> to Boundary To. TKey key The value of the range key. Fields | Improve this Doc View Source Empty Empty range, ∅ Declaration public static readonly Range<T, TKey> Empty Field Value Type Description Range <T, TKey> | Improve this Doc View Source Infinite Infinite range, (-∞..+∞) Declaration public static readonly Range<T, TKey> Infinite Field Value Type Description Range <T, TKey> Properties | Improve this Doc View Source From Boundary From. Limits the values from the left. Declaration public RangeBoundaryFrom<T> From { get; } Property Value Type Description RangeBoundaryFrom <T> Boundary From. Implements IRange<T>.From | Improve this Doc View Source FromValue The value of Boundary From. Declaration public T FromValue { get; } Property Value Type Description T The value of Boundary From or InvalidOperationException, if From.HasValue is false . Exceptions Type Condition System.InvalidOperationException Thrown if From.HasValue is false . | Improve this Doc View Source IsEmpty The range is empty, ∅. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if the range is empty; otherwise, false . Implements IRange<T>.IsEmpty | Improve this Doc View Source IsInfinite The range is Infinite range (-∞..+∞). Declaration public bool IsInfinite { get; } Property Value Type Description System.Boolean true if the range is infinite; otherwise, false . | Improve this Doc View Source IsNotEmpty The range is NOT empty, ≠ ∅. Declaration public bool IsNotEmpty { get; } Property Value Type Description System.Boolean true if the range is not empty; otherwise, false . Implements IRange<T>.IsNotEmpty | Improve this Doc View Source IsSinglePoint The range is Zero length range (the values of the boundary From and the boundary To are the same). Declaration public bool IsSinglePoint { get; } Property Value Type Description System.Boolean true if the range is single point range; otherwise, false . | Improve this Doc View Source Key The value associated with the range. Declaration public TKey Key { get; } Property Value Type Description TKey The value of the range key. | Improve this Doc View Source To Boundary To. Limits the values from the right. Declaration public RangeBoundaryTo<T> To { get; } Property Value Type Description RangeBoundaryTo <T> Boundary To. Implements IRange<T>.To | Improve this Doc View Source ToValue The value of Boundary To. Declaration public T ToValue { get; } Property Value Type Description T The value of Boundary To or InvalidOperationException, if To.HasValue is false . Exceptions Type Condition System.InvalidOperationException Thrown if To.HasValue is false . Methods | Improve this Doc View Source Equals(Range<T, TKey>) Indicates whether the current range is equal to another. Declaration public bool Equals(Range<T, TKey> other) Parameters Type Name Description Range <T, TKey> other An range to compare with this. Returns Type Description System.Boolean True if the current range is equal to the other parameter; otherwise, false. Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Indicates whether the current range and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with this. Returns Type Description System.Boolean True if obj and the current range are the same type and represent the same value; otherwise, false. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for the current range. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns string representation of the range. Declaration public override string ToString() Returns Type Description System.String The string representation of the range. Overrides System.ValueType.ToString() | Improve this Doc View Source ToString(IFormatProvider) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format string. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String, IFormatProvider) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format string. System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. Implements System.IFormattable.ToString(System.String, System.IFormatProvider) Operators | Improve this Doc View Source Equality(Range<T, TKey>, Range<T, TKey>) Implements the operator ==. Declaration public static bool operator ==(Range<T, TKey> range1, Range<T, TKey> range2) Parameters Type Name Description Range <T, TKey> range1 The range1. Range <T, TKey> range2 The range2. Returns Type Description System.Boolean True , if ranges are equal. | Improve this Doc View Source Inequality(Range<T, TKey>, Range<T, TKey>) Implements the operator !=. Declaration public static bool operator !=(Range<T, TKey> range1, Range<T, TKey> range2) Parameters Type Name Description Range <T, TKey> range1 The range1. Range <T, TKey> range2 The range2. Returns Type Description System.Boolean True , if ranges are not equal. Explicit Interface Implementations | Improve this Doc View Source IRangeFactory<T, Range<T, TKey>>.CreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Creates a new instance of the range. Declaration Range<T, TKey> IRangeFactory<T, Range<T, TKey>>.CreateRange(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to) Parameters Type Name Description RangeBoundaryFrom <T> from Boundary From. RangeBoundaryTo <T> to Boundary To. Returns Type Description Range <T, TKey> A new instance of the range with specified From-To boundaries. Implements IRangeFactory<T, TRange>.CreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) | Improve this Doc View Source IRangeFactory<T, Range<T, TKey>>.TryCreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Creates a new instance of the range, if possible. Declaration Range<T, TKey> IRangeFactory<T, Range<T, TKey>>.TryCreateRange(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to) Parameters Type Name Description RangeBoundaryFrom <T> from Boundary From. RangeBoundaryTo <T> to Boundary To. Returns Type Description Range <T, TKey> A new instance of the range with specified From-To boundaries, or empty range, if from-to boundaries forms invalid range pair. Implements IRangeFactory<T, TRange>.TryCreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Extension Methods NullableHelper.AsNullable<T>(T) CompositeRangeExtensions.GetComplementation<T, TKey>(Range<T, TKey>) CompositeRangeExtensions.ToCompositeRange<T, TKey>(Range<T, TKey>) RangeExtensions.WithValues<T, T2, TKey>(Range<T, TKey>, Func<T, T2>) RangeExtensions.WithValues<T, T2, TKey>(Range<T, TKey>, Func<T, T2>, Func<T, T2>) RangeExtensions.WithoutKey<T, TKey>(Range<T, TKey>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.MakeInclusive<T, TKey>(Range<T, TKey>, Func<T, T>, Func<T, T>) RangeExtensions.MakeExclusive<T, TKey>(Range<T, TKey>, Func<T, T>, Func<T, T>) RangeExtensions.WithKey<T, TKey, TKey2>(Range<T, TKey>, TKey2) RangeExtensions.Contains<T, TKey>(Range<T, TKey>, T) RangeExtensions.Contains<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>) RangeExtensions.Contains<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>) RangeExtensions.Contains<T, TKey>(Range<T, TKey>, T, T) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.HasIntersection<T, TKey>(Range<T, TKey>, T, T) RangeExtensions.HasIntersection<T, TKey, TRange>(Range<T, TKey>, TRange) RangeExtensions.Clamp<T, TKey>(Range<T, TKey>, T) RangeExtensions.StartsAfter<T, TKey>(Range<T, TKey>, T) RangeExtensions.StartsAfter<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>) RangeExtensions.StartsAfter<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey>(Range<T, TKey>, T) RangeExtensions.EndsBefore<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>) RangeExtensions.EndsBefore<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.Union<T, TKey>(Range<T, TKey>, T, T) RangeExtensions.Union<T, TKey, TRange>(Range<T, TKey>, TRange) RangeExtensions.ExtendFrom<T, TKey>(Range<T, TKey>, T) RangeExtensions.ExtendFrom<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>) RangeExtensions.ExtendTo<T, TKey>(Range<T, TKey>, T) RangeExtensions.ExtendTo<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>) RangeExtensions.Intersect<T, TKey>(Range<T, TKey>, T, T) RangeExtensions.Intersect<T, TKey, TRange>(Range<T, TKey>, TRange) RangeExtensions.TrimFrom<T, TKey>(Range<T, TKey>, T) RangeExtensions.TrimFrom<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>) RangeExtensions.TrimTo<T, TKey>(Range<T, TKey>, T) RangeExtensions.TrimTo<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>) StringExtensions.ToInvariantString<T>(T) StringExtensions.ToInvariantString<T>(T, String)"
  },
  "api/main/CodeJam.OneOf-8.html": {
    "href": "api/main/CodeJam.OneOf-8.html",
    "title": "Class OneOf<T1, T2, T3, T4, T5, T6, T7, T8> | CodeJam",
    "keywords": "Class OneOf<T1, T2, T3, T4, T5, T6, T7, T8> Tagged union for 8 types. Inheritance System.Object OneOf<T1, T2, T3, T4, T5, T6, T7, T8> Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public abstract class OneOf<T1, T2, T3, T4, T5, T6, T7, T8> : IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>, IEquatable<OneOf<T1, T2, T3, T4, T5, T6, T7, T8>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 T5 Type of case 5 T6 Type of case 6 T7 Type of case 7 T8 Type of case 8 Properties | Improve this Doc View Source IsCase1 Declaration public abstract bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public abstract bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase2 | Improve this Doc View Source IsCase3 Declaration public abstract bool IsCase3 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase3 | Improve this Doc View Source IsCase4 Declaration public abstract bool IsCase4 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase4 | Improve this Doc View Source IsCase5 Declaration public abstract bool IsCase5 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase5 | Improve this Doc View Source IsCase6 Declaration public abstract bool IsCase6 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase6 | Improve this Doc View Source IsCase7 Declaration public abstract bool IsCase7 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase7 | Improve this Doc View Source IsCase8 Declaration public abstract bool IsCase8 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase8 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T1 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T2 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T3) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T3 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T3 value) Parameters Type Name Description T3 value Value of type T3 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T4) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T4 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T4 value) Parameters Type Name Description T4 value Value of type T4 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T5) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T5 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T5 value) Parameters Type Name Description T5 value Value of type T5 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T6) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T6 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T6 value) Parameters Type Name Description T6 value Value of type T6 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T7) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T7 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T7 value) Parameters Type Name Description T7 value Value of type T7 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T8) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T8 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T8 value) Parameters Type Name Description T8 value Value of type T8 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>, Action<T8>) Declaration public abstract void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action, Action<T5> case5Action, Action<T6> case6Action, Action<T7> case7Action, Action<T8> case8Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action System.Action <T3> case3Action System.Action <T4> case4Action System.Action <T5> case5Action System.Action <T6> case6Action System.Action <T7> case7Action System.Action <T8> case8Action Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>, Action<T8>) | Improve this Doc View Source Equals(OneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Declaration public abstract bool Equals(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> other) Parameters Type Name Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>, Func<T7, TResult>, Func<T8, TResult>) Declaration public abstract TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector, Func<T5, TResult> case5Selector, Func<T6, TResult> case6Selector, Func<T7, TResult> case7Selector, Func<T8, TResult> case8Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector System.Func <T3, TResult> case3Selector System.Func <T4, TResult> case4Selector System.Func <T5, TResult> case5Selector System.Func <T6, TResult> case6Selector System.Func <T7, TResult> case7Selector System.Func <T8, TResult> case8Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>, Func<T7, TResult>, Func<T8, TResult>) Operators | Improve this Doc View Source Equality(OneOf<T1, T2, T3, T4, T5, T6, T7, T8>, OneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Equality operator. Declaration public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> left, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> right) Parameters Type Name Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> left Left parameter. OneOf <T1, T2, T3, T4, T5, T6, T7, T8> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to OneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T1 . | Improve this Doc View Source Implicit(T2 to OneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T2 . | Improve this Doc View Source Implicit(T3 to OneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T3 value) Parameters Type Name Description T3 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T3 . | Improve this Doc View Source Implicit(T4 to OneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T4 value) Parameters Type Name Description T4 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T4 . | Improve this Doc View Source Implicit(T5 to OneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T5 value) Parameters Type Name Description T5 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T5 . | Improve this Doc View Source Implicit(T6 to OneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T6 value) Parameters Type Name Description T6 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T6 . | Improve this Doc View Source Implicit(T7 to OneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T7 value) Parameters Type Name Description T7 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T7 . | Improve this Doc View Source Implicit(T8 to OneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T8 value) Parameters Type Name Description T8 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T8 . | Improve this Doc View Source Inequality(OneOf<T1, T2, T3, T4, T5, T6, T7, T8>, OneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Unequality operator. Declaration public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7, T8> left, OneOf<T1, T2, T3, T4, T5, T6, T7, T8> right) Parameters Type Name Description OneOf <T1, T2, T3, T4, T5, T6, T7, T8> left Left parameter. OneOf <T1, T2, T3, T4, T5, T6, T7, T8> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Ranges.ICompositeRange-1.html": {
    "href": "api/main/CodeJam.Ranges.ICompositeRange-1.html",
    "title": "Interface ICompositeRange<T> | CodeJam",
    "keywords": "Interface ICompositeRange<T> Common interface for different composite range implementations Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax public interface ICompositeRange<T> Type Parameters Name Description T The type of the value. Should implement System.IComparable<T> or System.IComparable . Properties | Improve this Doc View Source ContainingRange Range that contains all subranges. Declaration Range<T> ContainingRange { get; } Property Value Type Description Range <T> The containing range. | Improve this Doc View Source IsEmpty The composite range is empty, ∅. Declaration bool IsEmpty { get; } Property Value Type Description System.Boolean true if the range is empty; otherwise, false . | Improve this Doc View Source IsNotEmpty The composite range is NOT empty, ≠ ∅ Declaration bool IsNotEmpty { get; } Property Value Type Description System.Boolean true if the range is not empty; otherwise, false . Methods | Improve this Doc View Source GetMergedRanges() Returns a sequence of merged subranges. Should be used for operations over the ranges. Declaration IEnumerable<Range<T>> GetMergedRanges() Returns Type Description System.Collections.Generic.IEnumerable < Range <T>> A sequence of merged subranges Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.OneOf-2.html": {
    "href": "api/main/CodeJam.OneOf-2.html",
    "title": "Class OneOf<T1, T2> | CodeJam",
    "keywords": "Class OneOf<T1, T2> Tagged union for 2 types. Inheritance System.Object OneOf<T1, T2> Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public abstract class OneOf<T1, T2> : IOneOf<T1, T2>, IEquatable<OneOf<T1, T2>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 Properties | Improve this Doc View Source IsCase1 Declaration public abstract bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public abstract bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2>.IsCase2 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2> for value of type T1 . Declaration public static OneOf<T1, T2> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description OneOf <T1, T2> Value of OneOf<T1, T2> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2> for value of type T2 . Declaration public static OneOf<T1, T2> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description OneOf <T1, T2> Value of OneOf<T1, T2> . | Improve this Doc View Source Do(Action<T1>, Action<T2>) Declaration public abstract void Do(Action<T1> case1Action, Action<T2> case2Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action Implements IOneOf<T1, T2>.Do(Action<T1>, Action<T2>) | Improve this Doc View Source Equals(OneOf<T1, T2>) Declaration public abstract bool Equals(OneOf<T1, T2> other) Parameters Type Name Description OneOf <T1, T2> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>) Declaration public abstract TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>) Operators | Improve this Doc View Source Equality(OneOf<T1, T2>, OneOf<T1, T2>) Equality operator. Declaration public static bool operator ==(OneOf<T1, T2> left, OneOf<T1, T2> right) Parameters Type Name Description OneOf <T1, T2> left Left parameter. OneOf <T1, T2> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to OneOf<T1, T2>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description OneOf <T1, T2> Instance of OneOf<T1, T2> for value of type T1 . | Improve this Doc View Source Implicit(T2 to OneOf<T1, T2>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description OneOf <T1, T2> Instance of OneOf<T1, T2> for value of type T2 . | Improve this Doc View Source Inequality(OneOf<T1, T2>, OneOf<T1, T2>) Unequality operator. Declaration public static bool operator !=(OneOf<T1, T2> left, OneOf<T1, T2> right) Parameters Type Name Description OneOf <T1, T2> left Left parameter. OneOf <T1, T2> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.NullableHelper.html": {
    "href": "api/main/CodeJam.NullableHelper.html",
    "title": "Class NullableHelper | CodeJam",
    "keywords": "Class NullableHelper Helper method for nullable types. Inheritance System.Object NullableHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class NullableHelper Methods | Improve this Doc View Source AsNullable<T>(T) Returns nullable of specified value. Declaration public static T? AsNullable<T>(this T value)where T : struct Parameters Type Name Description T value THe value Returns Type Description System.Nullable <T> value wrapped in nullabe. Type Parameters Name Description T Type of value | Improve this Doc View Source GetValueOrDefault<T>(Nullable<T>, Func<T>) Retrieves the value of the current System.Nullable<T> object, or value returned by factory. Declaration public static T GetValueOrDefault<T>(T? value, Func<T> defaultFactory)where T : struct Parameters Type Name Description System.Nullable <T> value Nullable value. System.Func <T> defaultFactory A function to return default value if the System.Nullable`1.HasValue property is false . Returns Type Description T The value of the System.Nullable`1.Value property if the System.Nullable`1.HasValue property is true ; otherwise, the value returned by defaultFactory parameter. Type Parameters Name Description T The underlying value type of the System.Nullable<T> generic type."
  },
  "api/main/CodeJam.IO.TempData.TempBase.html": {
    "href": "api/main/CodeJam.IO.TempData.TempBase.html",
    "title": "Class TempData.TempBase | CodeJam",
    "keywords": "Class TempData.TempBase Base class for temp file|directory objects. Contains logic to proof the removal will be performed even on resource leak. Inheritance System.Object System.Runtime.ConstrainedExecution.CriticalFinalizerObject TempData.TempBase TempData.TempDirectory TempData.TempFile Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.IO Assembly : CodeJam.dll Syntax public abstract class TempBase : CriticalFinalizerObject, IDisposable Constructors | Improve this Doc View Source TempBase(String) Initializes a new instance of the TempData.TempBase class. Declaration protected TempBase(string path) Parameters Type Name Description System.String path The path. Properties | Improve this Doc View Source Path Temp path. Declaration public string Path { get; } Property Value Type Description System.String The path. Methods | Improve this Doc View Source AssertNotDisposed() Assertion on object dispose Declaration protected void AssertNotDisposed() | Improve this Doc View Source DebugAssertValidPath(String) Checks that the path is valid. Declaration [Conditional(\"DEBUG\")] protected static void DebugAssertValidPath(string path) Parameters Type Name Description System.String path The path. | Improve this Doc View Source Dispose() Delete the temp file|directory Declaration public void Dispose() Implements System.IDisposable.Dispose() | Improve this Doc View Source Dispose(Boolean) Dispose pattern implementation - overridable part Declaration protected void Dispose(bool disposing) Parameters Type Name Description System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source DisposePath(String, Boolean) Temp path disposal Declaration protected abstract void DisposePath(string path, bool disposing) Parameters Type Name Description System.String path The path. System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. | Improve this Doc View Source Finalize() Finalize instance Declaration protected void Finalize() | Improve this Doc View Source SuppressDelete() Suppresses item deletion on dispose. Declaration public void SuppressDelete() Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.IO.PathHelpers.html": {
    "href": "api/main/CodeJam.IO.PathHelpers.html",
    "title": "Class PathHelpers | CodeJam",
    "keywords": "Class PathHelpers Helpers for System.IO.Path . Inheritance System.Object PathHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.IO Assembly : CodeJam.dll Syntax public static class PathHelpers Methods | Improve this Doc View Source EnsureContainerPath(String) Appends directory separator char if the path is not a volume or directory path. Declaration public static string EnsureContainerPath(string path) Parameters Type Name Description System.String path The path. Returns Type Description System.String Path that ends with one of path separator chars. | Improve this Doc View Source IsContainerPath(String) Checks if the path ends with directory or volume separator chars. Declaration public static bool IsContainerPath(string path) Parameters Type Name Description System.String path The path. Returns Type Description System.Boolean true if the path ends with separator char; otherwise, false . | Improve this Doc View Source IsSimpleName(String) Determines whether the path is a simple file or directory name. Declaration public static bool IsSimpleName(string path) Parameters Type Name Description System.String path The path. Returns Type Description System.Boolean true if the path isa simple file or directory name; otherwise, false . | Improve this Doc View Source IsWellFormedAbsolutePath(String) Determines whether the path is well-formed absolute path. Declaration public static bool IsWellFormedAbsolutePath(string path) Parameters Type Name Description System.String path The path. Returns Type Description System.Boolean true if the path is well-formed absolute path; otherwise, false . | Improve this Doc View Source IsWellFormedContainerPath(String) Checks if the path ends with directory or volume separator chars. Declaration public static bool IsWellFormedContainerPath(string path) Parameters Type Name Description System.String path The path. Returns Type Description System.Boolean true if the path ends with separator char; otherwise, false . | Improve this Doc View Source IsWellFormedPath(String) Determines whether the path is either absolute or relative not rooted path. Declaration public static bool IsWellFormedPath(string path) Parameters Type Name Description System.String path The path. Returns Type Description System.Boolean true if the path is either absolute or relative not rooted path, false . | Improve this Doc View Source IsWellFormedRelativePath(String) Determines whether the path is not rooted well-formed relative path. Declaration public static bool IsWellFormedRelativePath(string path) Parameters Type Name Description System.String path The path. Returns Type Description System.Boolean true if the path is not rooted well-formed relative path; otherwise, false . | Improve this Doc View Source IsWellFormedSimpleName(String) Checks if the path ends with directory or volume separator chars. Declaration public static bool IsWellFormedSimpleName(string path) Parameters Type Name Description System.String path The path. Returns Type Description System.Boolean true if the path ends with separator char; otherwise, false ."
  },
  "api/main/CodeJam.EnumHelper.html": {
    "href": "api/main/CodeJam.EnumHelper.html",
    "title": "Class EnumHelper | CodeJam",
    "keywords": "Class EnumHelper Extension methods for Enum types Inheritance System.Object EnumHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class EnumHelper Methods | Improve this Doc View Source AreFlagsDefined<TEnum>(TEnum) Determines whether all bits of the flags combination are defined. Declaration public static bool AreFlagsDefined<TEnum>(TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum flags The flags to check. Returns Type Description System.Boolean True, if enum defines all bits of the flags combination. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source ClearFlag<TEnum>(TEnum, TEnum) Clears the flag. Declaration public static TEnum ClearFlag<TEnum>(this TEnum value, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flag The flag. Returns Type Description TEnum The bits of the value excluding the ones from the flag. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source GetDescription<TEnum>(TEnum) Returns description of enum value. Declaration public static string GetDescription<TEnum>(TEnum value)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value Enum value. Returns Type Description System.String Type Parameters Name Description TEnum Enum type Remarks Returns description of enum value specified by System.ComponentModel.DataAnnotations.DisplayAttribute , or null if no attribute specified. | Improve this Doc View Source GetDisplayName<TEnum>(TEnum) Returns description of enum value. Declaration public static string GetDisplayName<TEnum>(TEnum value)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value Enum value. Returns Type Description System.String Type Parameters Name Description TEnum Enum type Remarks Returns description of enum value specified by System.ComponentModel.DataAnnotations.DisplayAttribute , or null if no attribute specified. | Improve this Doc View Source GetEnumValue<TEnum>(TEnum) Gets metadata about enum value. Declaration public static EnumValue GetEnumValue<TEnum>(TEnum value)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value Enum value. Returns Type Description EnumValue The enum values collection. Type Parameters Name Description TEnum Enum type | Improve this Doc View Source GetEnumValues(Type) Returns enum values collection that contains information about enum type and its values. Declaration public static EnumValues GetEnumValues(Type enumType) Parameters Type Name Description System.Type enumType Type of the enum. Returns Type Description EnumValues The enum values collection. | Improve this Doc View Source GetEnumValues<TEnum>() Gets enum values collection that contains information about enum type and its values. Declaration public static EnumValues GetEnumValues<TEnum>()where TEnum : struct, IComparable, IFormattable, IConvertible Returns Type Description EnumValues The enum values collection. Type Parameters Name Description TEnum Enum type | Improve this Doc View Source GetField<TEnum>(TEnum) Gets field info of enum value. Declaration public static FieldInfo GetField<TEnum>(TEnum value)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The enum value. Returns Type Description System.Reflection.FieldInfo System.Reflection.FieldInfo corresponding to value . Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source GetFlagsMask<TEnum>() Returns a combination of all flags declared in the enum. Declaration public static TEnum GetFlagsMask<TEnum>()where TEnum : struct, IComparable, IFormattable, IConvertible Returns Type Description TEnum A combination of all flags declared in the enum, or default(TEnum) if IsFlagsEnum<TEnum>() is false. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source GetName<TEnum>(TEnum) Returns name of the enum value. Declaration public static string GetName<TEnum>(TEnum value)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The enum value. Returns Type Description System.String The name of the enum value. Type Parameters Name Description TEnum Enum type | Improve this Doc View Source GetNames<TEnum>(Boolean) Retrieves an array of the names of the constants in a specified enumeration. Declaration public static string[] GetNames<TEnum>(bool ignoreCase = false)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description System.Boolean ignoreCase If set to true the case of the name will be ignored. Returns Type Description System.String [] A string array of the names of the constants in enumType. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source GetNameValues<TEnum>(Boolean) Returns a dictionary containing the enum names and their values. Declaration public static IReadOnlyDictionary<string, TEnum> GetNameValues<TEnum>(bool ignoreCase = false)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description System.Boolean ignoreCase If set to true the case of the name will be ignored. Returns Type Description System.Collections.Generic.IReadOnlyDictionary < System.String , TEnum> Returns a dictionary containing the enum names and their values. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source GetValues<TEnum>() Retrieves an array of the values of the constants in a specified enumeration. Declaration public static TEnum[] GetValues<TEnum>()where TEnum : struct, IComparable, IFormattable, IConvertible Returns Type Description TEnum[] An array that contains the values of the constants in enumType. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source IsAnyFlagSet<TEnum>(TEnum, TEnum) Determines whether any bit from specified flag is set. Declaration public static bool IsAnyFlagSet<TEnum>(this TEnum value, TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flags The bitwise combinations of the flags. Returns Type Description System.Boolean true if the value includes any bit of the flags or the flag is zero. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source IsAnyFlagUnset<TEnum>(TEnum, TEnum) Determines whether any bit from specified flag is not set. Declaration public static bool IsAnyFlagUnset<TEnum>(this TEnum value, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flag The flag. Returns Type Description System.Boolean true if the value does not include all bits of the flag. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source IsDefined<TEnum>(TEnum) Determines whether the specified value is defined. Declaration public static bool IsDefined<TEnum>(TEnum value)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value to check. Returns Type Description System.Boolean True, if enum defines the value. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source IsDefined<TEnum>(String) Determines whether the string representation of value is defined. Declaration public static bool IsDefined<TEnum>(string value)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description System.String value String representation of value to check. Returns Type Description System.Boolean True, if enum defines the value. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source IsFlagsEnum<TEnum>() Determines whether the enum has flags modifier. Declaration public static bool IsFlagsEnum<TEnum>()where TEnum : struct, IComparable, IFormattable, IConvertible Returns Type Description System.Boolean True, if the enum is flags enum Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source IsFlagSet<TEnum>(TEnum, TEnum) Determines whether the specified flag is set. Declaration public static bool IsFlagSet<TEnum>(this TEnum value, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flag The flag. Returns Type Description System.Boolean true if the value includes all bits of the flag or the flag is zero. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source IsFlagUnset<TEnum>(TEnum, TEnum) Determines whether the specified flag is not set. Declaration public static bool IsFlagUnset<TEnum>(this TEnum value, TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flags The bitwise combinations of the flags. Returns Type Description System.Boolean true if the value does not include any bit of the flags. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source Parse<TEnum>(String, Boolean) Parse the enum value. Declaration public static TEnum Parse<TEnum>(string name, bool ignoreCase = false)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description System.String name The name. System.Boolean ignoreCase If set to true the case of the name will be ignored. Returns Type Description TEnum Parsed value. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source SetFlag<TEnum>(TEnum, TEnum) Sets the flag. Declaration public static TEnum SetFlag<TEnum>(this TEnum value, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flag The flag. Returns Type Description TEnum Bitwise combination of the flag and the value Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source SetFlag<TEnum>(TEnum, TEnum, Boolean) Sets or clears the flag depending on enabled value. Declaration public static TEnum SetFlag<TEnum>(this TEnum value, TEnum flag, bool enabled)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flag The flag. System.Boolean enabled Determines whether the flag should be set or cleared. Returns Type Description TEnum Bitwise combination of the flag and the value if the enabled is true ; otherwise, the result is the bits of the value excluding the ones from the flag. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source TryParse<TEnum>(String, out TEnum) Try to parse the enum value. Declaration public static bool TryParse<TEnum>(string name, out TEnum result)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description System.String name The name. TEnum result The parsed value. Returns Type Description System.Boolean true , if parsing was successful; false otherwise. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source TryParse<TEnum>(String, Boolean) Try to parse the enum value. Declaration public static TEnum? TryParse<TEnum>(string name, bool ignoreCase = false)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description System.String name The name. System.Boolean ignoreCase If set to true the case of the name will be ignored. Returns Type Description System.Nullable <TEnum> Parsed value, if parsing was successful; null otherwise. Type Parameters Name Description TEnum The type of the enum. | Improve this Doc View Source TryParse<TEnum>(String, Boolean, out TEnum) Try to parse the enum value. Declaration public static bool TryParse<TEnum>(string name, bool ignoreCase, out TEnum result)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description System.String name The name. System.Boolean ignoreCase If set to true the case of the name will be ignored. TEnum result The parsed value. Returns Type Description System.Boolean true , if parsing was successful; false otherwise. Type Parameters Name Description TEnum The type of the enum."
  },
  "api/main/CodeJam.EnumCodeExceptions.html": {
    "href": "api/main/CodeJam.EnumCodeExceptions.html",
    "title": "Class EnumCodeExceptions | CodeJam",
    "keywords": "Class EnumCodeExceptions Enum exception factory class Inheritance System.Object EnumCodeExceptions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class EnumCodeExceptions Methods | Improve this Doc View Source ArgumentAnyFlagSet<TEnum>(String, TEnum, TEnum) Creates System.ArgumentException for any bit from flag is set case. Declaration public static ArgumentException ArgumentAnyFlagSet<TEnum>(string argumentName, TEnum value, TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description System.String argumentName Name of the argument. TEnum value The value. TEnum flags The bitwise combinations of the flags. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException . Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source ArgumentAnyFlagUnset<TEnum>(String, TEnum, TEnum) Creates System.ArgumentException for any bit from flag is not set case. Declaration public static ArgumentException ArgumentAnyFlagUnset<TEnum>(string argumentName, TEnum value, TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description System.String argumentName Name of the argument. TEnum value The value. TEnum flags The bitwise combinations of the flags. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException . Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source ArgumentFlagSet<TEnum>(String, TEnum, TEnum) Creates System.ArgumentException for flag is set case. Declaration public static ArgumentException ArgumentFlagSet<TEnum>(string argumentName, TEnum value, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description System.String argumentName Name of the argument. TEnum value The value. TEnum flag The flag. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException . Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source ArgumentFlagUnset<TEnum>(String, TEnum, TEnum) Creates System.ArgumentException for flag is not set case. Declaration public static ArgumentException ArgumentFlagUnset<TEnum>(string argumentName, TEnum value, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description System.String argumentName Name of the argument. TEnum value The value. TEnum flag The flag. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException . Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source ArgumentNotDefinedException<TEnum>(String, TEnum) Creates System.ArgumentOutOfRangeException for undefined enum value. Declaration public static ArgumentOutOfRangeException ArgumentNotDefinedException<TEnum>(string argumentName, TEnum value)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description System.String argumentName Name of the argument. TEnum value The value. Returns Type Description System.ArgumentOutOfRangeException Initialized instance of System.ArgumentOutOfRangeException . Type Parameters Name Description TEnum The type of the enum value."
  },
  "api/main/CodeJam.Collections.Sequence.html": {
    "href": "api/main/CodeJam.Collections.Sequence.html",
    "title": "Class Sequence | CodeJam",
    "keywords": "Class Sequence Contains methods for sequence creation. Inheritance System.Object Sequence Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public static class Sequence Methods | Improve this Doc View Source Create<T>(T, Func<T, T>) Creates a sequence from start value and next element factory. Declaration public static IEnumerable<T> Create<T>(T start, Func<T, T> next) Parameters Type Name Description T start Start value. System.Func <T, T> next Next element factory. Returns Type Description System.Collections.Generic.IEnumerable <T> Generated sequence. Type Parameters Name Description T The type of element. | Improve this Doc View Source Create<T>(T, Func<T, Boolean>, Func<T, T>) Creates a sequence from start value and next element factory. Declaration public static IEnumerable<T> Create<T>(T start, Func<T, bool> predicate, Func<T, T> next) Parameters Type Name Description T start Start value. System.Func <T, System.Boolean > predicate A function to test each element for a condition. System.Func <T, T> next Next element factory. Returns Type Description System.Collections.Generic.IEnumerable <T> Generated sequence. Type Parameters Name Description T The type of element. | Improve this Doc View Source Create<T, TResult>(T, Func<T, T>, Func<T, TResult>) Creates a sequence from start value and next element factory. Declaration public static IEnumerable<TResult> Create<T, TResult>(T start, Func<T, T> next, Func<T, TResult> resultSelector) Parameters Type Name Description T start Start value. System.Func <T, T> next Next element factory. System.Func <T, TResult> resultSelector A transform function to apply to each element. Returns Type Description System.Collections.Generic.IEnumerable <TResult> Generated sequence. Type Parameters Name Description T The type of source element. TResult The type of result element | Improve this Doc View Source Create<T, TResult>(T, Func<T, Boolean>, Func<T, T>, Func<T, TResult>) Creates a sequence from start value and next element factory. Declaration public static IEnumerable<TResult> Create<T, TResult>(T start, Func<T, bool> predicate, Func<T, T> next, Func<T, TResult> resultSelector) Parameters Type Name Description T start Start value. System.Func <T, System.Boolean > predicate A function to test each element for a condition. System.Func <T, T> next Next element factory. System.Func <T, TResult> resultSelector A transform function to apply to each element. Returns Type Description System.Collections.Generic.IEnumerable <TResult> Generated sequence. Type Parameters Name Description T The type of source element. TResult The type of result element | Improve this Doc View Source CreateSingle<T>(T) Creates a single element sequence. Declaration public static IEnumerable<T> CreateSingle<T>(T element) Parameters Type Name Description T element Element instance to create sequence from. Returns Type Description System.Collections.Generic.IEnumerable <T> Single element sequence Type Parameters Name Description T The type of element. | Improve this Doc View Source CreateSingle<T>(Func<T>) Creates a single element sequence. Declaration public static IEnumerable<T> CreateSingle<T>(Func<T> elementFactory) Parameters Type Name Description System.Func <T> elementFactory Element factory. Returns Type Description System.Collections.Generic.IEnumerable <T> Single element sequence Type Parameters Name Description T The type of element. | Improve this Doc View Source CreateWhileNotNull<T>(T, Func<T, T>) Creates a sequence from start value and next element factory till factory returns null. Declaration public static IEnumerable<T> CreateWhileNotNull<T>(T start, Func<T, T> next)where T : class Parameters Type Name Description T start Start value. System.Func <T, T> next Next element factory. Returns Type Description System.Collections.Generic.IEnumerable <T> Generated sequence. Type Parameters Name Description T The type of element. | Improve this Doc View Source CreateWhileNotNull<T, TResult>(T, Func<T, T>, Func<T, TResult>) Creates a sequence from start value and next element factory till factory returns null. Declaration public static IEnumerable<TResult> CreateWhileNotNull<T, TResult>(T start, Func<T, T> next, Func<T, TResult> resultSelector)where T : class Parameters Type Name Description T start Start value. System.Func <T, T> next Next element factory. System.Func <T, TResult> resultSelector A transform function to apply to each element. Returns Type Description System.Collections.Generic.IEnumerable <TResult> Generated sequence. Type Parameters Name Description T The type of source element. TResult The type of result element | Improve this Doc View Source Random(Int32) Creates infinite sequence of random int numbers; Declaration public static IEnumerable<int> Random(int maxValue = 2147483647) Parameters Type Name Description System.Int32 maxValue The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue. Returns Type Description System.Collections.Generic.IEnumerable < System.Int32 > Infinite random sequence. | Improve this Doc View Source Random(Int32, Int32) Creates infinite sequence of random int numbers; Declaration public static IEnumerable<int> Random(int minValue, int maxValue) Parameters Type Name Description System.Int32 minValue The inclusive lower bound of the random number returned. System.Int32 maxValue The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue. Returns Type Description System.Collections.Generic.IEnumerable < System.Int32 > Infinite random sequence. | Improve this Doc View Source Random(Int32, Int32, Int32) Creates infinite sequence of random int numbers; Declaration public static IEnumerable<int> Random(int minValue, int maxValue, int seed) Parameters Type Name Description System.Int32 minValue The inclusive lower bound of the random number returned. System.Int32 maxValue The exclusive upper bound of the random number returned. maxValue must be greater than or equal to minValue. System.Int32 seed A number used to calculate a starting value for the pseudo-random number sequence. If a negative number is specified, the absolute value of the number is used. Returns Type Description System.Collections.Generic.IEnumerable < System.Int32 > Infinite random sequence."
  },
  "api/main/CodeJam.Collections.QueryableExtensions.html": {
    "href": "api/main/CodeJam.Collections.QueryableExtensions.html",
    "title": "Class QueryableExtensions | CodeJam",
    "keywords": "Class QueryableExtensions Extensions for System.Linq.IQueryable<T> Inheritance System.Object QueryableExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public static class QueryableExtensions Methods | Improve this Doc View Source OrderBy<T>(IQueryable<T>, String) Sorts the elements of a sequence in ascending order according to a key. Declaration public static IOrderedQueryable<T> OrderBy<T>(this IQueryable<T> source, string property) Parameters Type Name Description System.Linq.IQueryable <T> source A sequence of values to order. System.String property The property name. Returns Type Description System.Linq.IOrderedQueryable <T> An System.Linq.IOrderedQueryable<T> whose elements are sorted according to a key. Type Parameters Name Description T | Improve this Doc View Source OrderByDescending<T>(IQueryable<T>, String) Sorts the elements of a sequence in descending order according to a key. Declaration public static IOrderedQueryable<T> OrderByDescending<T>(this IQueryable<T> source, string property) Parameters Type Name Description System.Linq.IQueryable <T> source A sequence of values to order. System.String property The property name. Returns Type Description System.Linq.IOrderedQueryable <T> An System.Linq.IOrderedQueryable<T> whose elements are sorted according to a key. Type Parameters Name Description T | Improve this Doc View Source Page<T>(IQueryable<T>, Int32, Int32) Extracts pageSize elements from a sequence at a particular one-based page number. Declaration public static IQueryable<T> Page<T>(this IQueryable<T> source, int pageIndex, int pageSize) Parameters Type Name Description System.Linq.IQueryable <T> source The sequence from which to page. System.Int32 pageIndex The one-based page number. System.Int32 pageSize The size of the page. Returns Type Description System.Linq.IQueryable <T> A new sequence containing elements are at the specified pageIndex from the source sequence. Type Parameters Name Description T The type of the elements in the source sequence. | Improve this Doc View Source Slice<T>(IQueryable<T>, Int32, Int32) Extracts count elements from a sequence at a particular zero-based starting index. Declaration public static IQueryable<T> Slice<T>(this IQueryable<T> source, int startIndex, int count) Parameters Type Name Description System.Linq.IQueryable <T> source The sequence from which to extract elements. System.Int32 startIndex The zero-based index at which to begin slicing. System.Int32 count The number of items to slice out of the index. Returns Type Description System.Linq.IQueryable <T> A new sequence containing any elements sliced out from the source sequence. Type Parameters Name Description T The type of the elements in the source sequence. Remarks If the starting position or count specified result in slice extending past the end of the sequence, it will return all elements up to that point. There is no guarantee that the resulting sequence will contain the number of elements requested - it may have anywhere from 0 to count . | Improve this Doc View Source ThenBy<T>(IOrderedQueryable<T>, String) Performs a subsequent ordering of the elements in a sequence in ascending order according to a key. Declaration public static IOrderedQueryable<T> ThenBy<T>(this IOrderedQueryable<T> source, string property) Parameters Type Name Description System.Linq.IOrderedQueryable <T> source An System.Linq.IOrderedEnumerable<TElement> that contains elements to sort. System.String property The property name. Returns Type Description System.Linq.IOrderedQueryable <T> An System.Linq.IOrderedQueryable<T> whose elements are sorted according to a key. Type Parameters Name Description T | Improve this Doc View Source ThenByDescending<T>(IOrderedQueryable<T>, String) Performs a subsequent ordering of the elements in a sequence in descending order according to a key. Declaration public static IOrderedQueryable<T> ThenByDescending<T>(this IOrderedQueryable<T> source, string property) Parameters Type Name Description System.Linq.IOrderedQueryable <T> source An System.Linq.IOrderedEnumerable<TElement> that contains elements to sort. System.String property The property name. Returns Type Description System.Linq.IOrderedQueryable <T> An System.Linq.IOrderedQueryable<T> whose elements are sorted according to a key. Type Parameters Name Description T"
  },
  "api/main/CodeJam.Collections.OwnedCollection-3.html": {
    "href": "api/main/CodeJam.Collections.OwnedCollection-3.html",
    "title": "Class OwnedCollection<TOwner, TKey, TItem> | CodeJam",
    "keywords": "Class OwnedCollection<TOwner, TKey, TItem> Keyed collection type that allows to associate collection items with the owner. Inheritance System.Object System.Collections.ObjectModel.Collection <TItem> System.Collections.ObjectModel.KeyedCollection <TKey, TItem> OwnedCollectionBase <TOwner, TKey, TItem> OwnedCollection<TOwner, TKey, TItem> Inherited Members OwnedCollectionBase<TOwner, TKey, TItem>.GetKeyForItem(TItem) OwnedCollectionBase<TOwner, TKey, TItem>.GetKey(TItem) OwnedCollectionBase<TOwner, TKey, TItem>.Owner OwnedCollectionBase<TOwner, TKey, TItem>.GetOwner(TItem) OwnedCollectionBase<TOwner, TKey, TItem>.SetOwner(TItem, TOwner) OwnedCollectionBase<TOwner, TKey, TItem>.ClearItems() OwnedCollectionBase<TOwner, TKey, TItem>.InsertItem(Int32, TItem) OwnedCollectionBase<TOwner, TKey, TItem>.RemoveItem(Int32) OwnedCollectionBase<TOwner, TKey, TItem>.SetItem(Int32, TItem) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Contains(TKey) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Remove(TKey) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.ChangeItemKey(TItem, TKey) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.ClearItems() System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.GetKeyForItem(TItem) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.InsertItem(System.Int32, TItem) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.RemoveItem(System.Int32) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.SetItem(System.Int32, TItem) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Comparer System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Item[TKey] System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Dictionary System.Collections.ObjectModel.Collection<TItem>.Add(TItem) System.Collections.ObjectModel.Collection<TItem>.Clear() System.Collections.ObjectModel.Collection<TItem>.CopyTo(TItem[], System.Int32) System.Collections.ObjectModel.Collection<TItem>.Contains(TItem) System.Collections.ObjectModel.Collection<TItem>.GetEnumerator() System.Collections.ObjectModel.Collection<TItem>.IndexOf(TItem) System.Collections.ObjectModel.Collection<TItem>.Insert(System.Int32, TItem) System.Collections.ObjectModel.Collection<TItem>.Remove(TItem) System.Collections.ObjectModel.Collection<TItem>.RemoveAt(System.Int32) System.Collections.ObjectModel.Collection<TItem>.ClearItems() System.Collections.ObjectModel.Collection<TItem>.InsertItem(System.Int32, TItem) System.Collections.ObjectModel.Collection<TItem>.RemoveItem(System.Int32) System.Collections.ObjectModel.Collection<TItem>.SetItem(System.Int32, TItem) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.Collection<TItem>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Add(System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Contains(System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.IndexOf(System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Remove(System.Object) System.Collections.ObjectModel.Collection<TItem>.Count System.Collections.ObjectModel.Collection<TItem>.Items System.Collections.ObjectModel.Collection<TItem>.Item[System.Int32] System.Collections.ObjectModel.Collection<TItem>.System.Collections.Generic.ICollection<TItem>.IsReadOnly System.Collections.ObjectModel.Collection<TItem>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.Collection<TItem>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Item[System.Int32] System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.IsReadOnly System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.IsFixedSize System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public class OwnedCollection<TOwner, TKey, TItem> : OwnedCollectionBase<TOwner, TKey, TItem>, IList<TItem>, ICollection<TItem>, IList, ICollection, IReadOnlyList<TItem>, IReadOnlyCollection<TItem>, IEnumerable<TItem>, IEnumerable where TOwner : class where TItem : class Type Parameters Name Description TOwner The type of the owner. TKey The type of the key. TItem The type of the item. Constructors | Improve this Doc View Source OwnedCollection(TOwner, Func<TItem, TOwner>, Action<TItem, TOwner>, Func<TItem, TKey>) Initializes a new instance of the OwnedCollection<TOwner, TKey, TItem> class. Declaration public OwnedCollection(TOwner owner, Func<TItem, TOwner> ownerGetter, Action<TItem, TOwner> ownerSetter, Func<TItem, TKey> keyGetter) Parameters Type Name Description TOwner owner The owner for the collection. System.Func <TItem, TOwner> ownerGetter Owner getter for the item. System.Action <TItem, TOwner> ownerSetter Owner setter for the item. System.Func <TItem, TKey> keyGetter Key getter for the item. Methods | Improve this Doc View Source GetKey(TItem) Gets a key for the item. Declaration protected override TKey GetKey(TItem item) Parameters Type Name Description TItem item The item. Returns Type Description TKey Key for the item. Overrides CodeJam.Collections.OwnedCollectionBase<TOwner, TKey, TItem>.GetKey(TItem) | Improve this Doc View Source GetOwner(TItem) Gets the owner of the item. Declaration protected override TOwner GetOwner(TItem item) Parameters Type Name Description TItem item The item. Returns Type Description TOwner Owner of the item. Overrides CodeJam.Collections.OwnedCollectionBase<TOwner, TKey, TItem>.GetOwner(TItem) | Improve this Doc View Source SetOwner(TItem, TOwner) Sets the owner of the item. Declaration protected override void SetOwner(TItem item, TOwner owner) Parameters Type Name Description TItem item The item. TOwner owner The owner of the item. Overrides CodeJam.Collections.OwnedCollectionBase<TOwner, TKey, TItem>.SetOwner(TItem, TOwner) Extension Methods Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Algorithms.PartitionPoint<T>(IList<T>, Predicate<T>) Algorithms.PartitionPoint<T>(IList<T>, Int32, Predicate<T>) Algorithms.PartitionPoint<T>(IList<T>, Int32, Int32, Predicate<T>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, TSource) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, TAccumulate) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, TResult) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, Func<TSource>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, Func<TResult>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.WithIndex<T>(IEnumerable<T>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, Func<T, T, TResult>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.CombineWithNext<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhile<T>(IEnumerable<T>, Func<T, T, Boolean>) EnumerableExtensions.Page<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Slice<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TakeLast<T>(IEnumerable<T>, Int32) EnumerableExtensions.Split<T>(IEnumerable<T>, Int32) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.Union<T>(IEnumerable<T>, T[]) EnumerableExtensions.Concat<T>(IEnumerable<T>, T) EnumerableExtensions.Concat<T>(IEnumerable<T>, T[]) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T[]) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>, IEqualityComparer<T>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.OrderBy<TSource>(IEnumerable<TSource>) EnumerableExtensions.OrderByDescending<TSource>(IEnumerable<TSource>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T, Func<T, Boolean>) EnumerableExtensions.AsList<T>(IEnumerable<T>) EnumerableExtensions.AsArray<T>(IEnumerable<T>) EnumerableExtensions.ToStrings<T>(IEnumerable<T>) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>) CollectionExtensions.NotNullNorEmpty<T>(ICollection<T>) CollectionExtensions.AddRange<T>(ICollection<T>, T[]) CollectionExtensions.AddRange<T>(ICollection<T>, IList<T>) CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CompositeRangeExtensions.ToCompositeRange<T, TKey>(IEnumerable<TKey>, Func<TKey, T>, Func<TKey, T>) CompositeRangeExtensions.ToCompositeRange<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.Join<T>(IEnumerable<T>, String) StringExtensions.Join<T>(IEnumerable<T>) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Int32, Action<T>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Action<T>, String) See Also System.Collections.ObjectModel.Collection <T>"
  },
  "api/main/CodeJam.Collections.IndexedItem-1.html": {
    "href": "api/main/CodeJam.Collections.IndexedItem-1.html",
    "title": "Struct IndexedItem<T> | CodeJam",
    "keywords": "Struct IndexedItem<T> Represents an element associated with its index in a sequence. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public struct IndexedItem<T> : IEquatable<IndexedItem<T>> Type Parameters Name Description T Constructors | Improve this Doc View Source IndexedItem(T, Int32, Boolean, Boolean) Initializes a new instance of the IndexedItem<T> . Declaration public IndexedItem(T item, int index, bool isFirst, bool isLast) Parameters Type Name Description T item The value of the element. System.Int32 index The index of the element in a sequence. System.Boolean isFirst A value indicating whether this instance is first. System.Boolean isLast A value indicating whether this instance is last. Properties | Improve this Doc View Source Index Gets the index of the element in a sequence. Declaration public int Index { get; } Property Value Type Description System.Int32 The index of the element in a sequence. | Improve this Doc View Source IsFirst Determines if the value is first in a sequence. Declaration public bool IsFirst { get; } Property Value Type Description System.Boolean true if this instance is first; otherwise, false . | Improve this Doc View Source IsLast Determines if the value is last in a sequence. Declaration public bool IsLast { get; } Property Value Type Description System.Boolean true if this instance is last; otherwise, false . | Improve this Doc View Source Item Gets the value of the element. Declaration public T Item { get; } Property Value Type Description T The value of the element. Methods | Improve this Doc View Source Equals(IndexedItem<T>) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(IndexedItem<T> other) Parameters Type Name Description IndexedItem <T> other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Overrides System.ValueType.GetHashCode() Operators | Improve this Doc View Source Equality(IndexedItem<T>, IndexedItem<T>) Operator == Declaration public static bool operator ==(IndexedItem<T> left, IndexedItem<T> right) Parameters Type Name Description IndexedItem <T> left Left operand IndexedItem <T> right Right operand Returns Type Description System.Boolean True? if operands equals | Improve this Doc View Source Inequality(IndexedItem<T>, IndexedItem<T>) Operator != Declaration public static bool operator !=(IndexedItem<T> left, IndexedItem<T> right) Parameters Type Name Description IndexedItem <T> left Left operand IndexedItem <T> right Right operand Returns Type Description System.Boolean True? if operands equals Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Collections.ArrayExtensions.html": {
    "href": "api/main/CodeJam.Collections.ArrayExtensions.html",
    "title": "Class ArrayExtensions | CodeJam",
    "keywords": "Class ArrayExtensions System.Array class extensions. Inheritance System.Object ArrayExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public static class ArrayExtensions Methods | Improve this Doc View Source Any<T>(T[]) Checks if any element in array exists. Declaration public static bool Any<T>(this T[] array) Parameters Type Name Description T[] array Array to check. Returns Type Description System.Boolean True , if array is not empty. Type Parameters Name Description T Type of array item. Remarks This method performs fast check instead of creating enumerator | Improve this Doc View Source AsReadOnly<T>(T[]) Returns a read-only wrapper for the specified array. Declaration public static ReadOnlyCollection<T> AsReadOnly<T>(this T[] array) Parameters Type Name Description T[] array The one-dimensional, zero-based array to wrap in a read-only System.Collections.ObjectModel.ReadOnlyCollection<T> wrapper. Returns Type Description System.Collections.ObjectModel.ReadOnlyCollection <T> A read-only System.Collections.ObjectModel.ReadOnlyCollection<T> wrapper for the specified array. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. | Improve this Doc View Source BinarySearch<T>(T[], T) Searches an entire one-dimensional sorted System.Array for a specific element, using the System.IComparable<T> generic interface implemented by each element of the System.Array and by the specified object. Declaration public static int BinarySearch<T>(this T[] array, T value) Parameters Type Name Description T[] array The sorted one-dimensional, zero-based System.Array to search. T value The object to search for. Returns Type Description System.Int32 The index of the specified value in the specified array , if value is found. If value is not found and value is less than one or more elements in array , a negative number which is the bitwise complement of the index of the first element that is larger than value . If value is not found and value is greater than any of the elements in array , a negative number which is the bitwise complement of (the index of the last element plus 1). Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. System.InvalidOperationException value does not implement the System.IComparable<T> generic interface, and the search encounters an element that does not implement the System.IComparable<T> generic interface. | Improve this Doc View Source BinarySearch<T>(T[], T, IComparer<T>) Searches an entire one-dimensional sorted System.Array for a value using the specified System.Collections.Generic.IComparer<T> generic interface. Declaration public static int BinarySearch<T>(this T[] array, T value, IComparer<T> comparer) Parameters Type Name Description T[] array The sorted one-dimensional, zero-based System.Array to search. T value The object to search for. System.Collections.Generic.IComparer <T> comparer The System.Collections.Generic.IComparer<T> implementation to use when comparing elements.-or- null to use the System.IComparable<T> implementation of each element. Returns Type Description System.Int32 The index of the specified value in the specified array , if value is found. If value is not found and value is less than one or more elements in array , a negative number which is the bitwise complement of the index of the first element that is larger than value . If value is not found and value is greater than any of the elements in array , a negative number which is the bitwise complement of (the index of the last element plus 1). Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. System.ArgumentException comparer is null, and value is of a type that is not compatible with the elements of array . System.InvalidOperationException comparer is null, value does not implement the System.IComparable<T> generic interface, and the search encounters an element that does not implement the System.IComparable<T> generic interface. | Improve this Doc View Source BinarySearch<T>(T[], Int32, Int32, T) Searches a range of elements in a one-dimensional sorted System.Array for a value, using the System.IComparable<T> generic interface implemented by each element of the System.Array and by the specified value. Declaration public static int BinarySearch<T>(this T[] array, int index, int length, T value) Parameters Type Name Description T[] array The sorted one-dimensional, zero-based System.Array to search. System.Int32 index The starting index of the range to search. System.Int32 length The length of the range to search. T value The object to search for. Returns Type Description System.Int32 The index of the specified value in the specified array , if value is found. If value is not found and value is less than one or more elements in array , a negative number which is the bitwise complement of the index of the first element that is larger than value . If value is not found and value is greater than any of the elements in array , a negative number which is the bitwise complement of (the index of the last element plus 1). Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. System.ArgumentOutOfRangeException index is less than the lower bound of array .-or- length is less than zero. System.ArgumentException index and length do not specify a valid range in array .-or- value is of a type that is not compatible with the elements of array . System.InvalidOperationException value does not implement the System.IComparable<T> generic interface, and the search encounters an element that does not implement the System.IComparable<T> generic interface. | Improve this Doc View Source BinarySearch<T>(T[], Int32, Int32, T, IComparer<T>) Searches a range of elements in a one-dimensional sorted System.Array for a value, using the specified System.Collections.Generic.IComparer<T> generic interface. Declaration public static int BinarySearch<T>(this T[] array, int index, int length, T value, IComparer<T> comparer) Parameters Type Name Description T[] array The sorted one-dimensional, zero-based System.Array to search. System.Int32 index The starting index of the range to search. System.Int32 length The length of the range to search. T value The object to search for. System.Collections.Generic.IComparer <T> comparer The System.Collections.Generic.IComparer<T> implementation to use when comparing elements.-or- null to use the System.IComparable<T> implementation of each element. Returns Type Description System.Int32 The index of the specified value in the specified array , if value is found. If value is not found and value is less than one or more elements in array , a negative number which is the bitwise complement of the index of the first element that is larger than value . If value is not found and value is greater than any of the elements in array , a negative number which is the bitwise complement of (the index of the last element plus 1). Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. System.ArgumentOutOfRangeException index is less than the lower bound of array .-or- length is less than zero. System.ArgumentException index and length do not specify a valid range in array .-or- comparer is null, and value is of a type that is not compatible with the elements of array . System.InvalidOperationException comparer is null, value does not implement the System.IComparable<T> generic interface, and the search encounters an element that does not implement the System.IComparable<T> generic interface. | Improve this Doc View Source Clear(Array) Sets all elements in an System.Array to the default value of each element type. Declaration public static void Clear(this Array array) Parameters Type Name Description System.Array array The System.Array whose elements need to be cleared. Exceptions Type Condition System.ArgumentNullException array is null. | Improve this Doc View Source Clear(Array, Int32, Int32) Sets a range of elements in the System.Array to zero, to false, or to null, depending on the element type. Declaration public static void Clear(this Array array, int index, int length) Parameters Type Name Description System.Array array The System.Array whose elements need to be cleared. System.Int32 index The starting index of the range of elements to clear. System.Int32 length The number of elements to clear. Exceptions Type Condition System.ArgumentNullException array is null. System.IndexOutOfRangeException index is less than the lower bound of array .-or- length is less than zero.-or-The sum of index and length is greater than the size of the System.Array . | Improve this Doc View Source ConstrainedCopy(Array, Int32, Array, Int32, Int32) Copies a range of elements from an System.Array starting at the specified source index and pastes them to another System.Array starting at the specified destination index. Guarantees that all changes are undone if the copy does not succeed completely. Declaration public static void ConstrainedCopy(this Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length) Parameters Type Name Description System.Array sourceArray The System.Array that contains the data to copy. System.Int32 sourceIndex A 32-bit integer that represents the index in the sourceArray at which copying begins. System.Array destinationArray The System.Array that receives the data. System.Int32 destinationIndex A 32-bit integer that represents the index in the destinationArray at which storing begins. System.Int32 length A 32-bit integer that represents the number of elements to copy. Exceptions Type Condition System.ArgumentNullException sourceArray is null.-or- destinationArray is null. System.RankException sourceArray and destinationArray have different ranks. System.ArrayTypeMismatchException The sourceArray type is neither the same as nor derived from the destinationArray type. System.InvalidCastException At least one element in sourceArray cannot be cast to the type of destinationArray . System.ArgumentOutOfRangeException sourceIndex is less than the lower bound of the first dimension of sourceArray .-or- destinationIndex is less than the lower bound of the first dimension of destinationArray .-or- length is less than zero. System.ArgumentException length is greater than the number of elements from sourceIndex to the end of sourceArray .-or- length is greater than the number of elements from destinationIndex to the end of destinationArray . | Improve this Doc View Source ConvertAll<TInput, TOutput>(TInput[], Converter<TInput, TOutput>) Converts an array of one type to an array of another type. Declaration public static TOutput[] ConvertAll<TInput, TOutput>(this TInput[] array, Converter<TInput, TOutput> converter) Parameters Type Name Description TInput[] array The one-dimensional, zero-based System.Array to convert to a target type. System.Converter <TInput, TOutput> converter A System.Converter<TInput, TOutput> that converts each element from one type to another type. Returns Type Description TOutput[] An array of the target type containing the converted elements from the source array. Type Parameters Name Description TInput The type of the elements of the source array. TOutput The type of the elements of the target array. Exceptions Type Condition System.ArgumentNullException array is null.-or- converter is null. | Improve this Doc View Source Copy(Array, Array, Int32) Copies a range of elements from an System.Array starting at the first element and pastes them into another System.Array starting at the first element. The length is specified as a 32-bit integer. Declaration public static void Copy(this Array sourceArray, Array destinationArray, int length) Parameters Type Name Description System.Array sourceArray The System.Array that contains the data to copy. System.Array destinationArray The System.Array that receives the data. System.Int32 length A 32-bit integer that represents the number of elements to copy. Exceptions Type Condition System.ArgumentNullException sourceArray is null.-or- destinationArray is null. System.RankException sourceArray and destinationArray have different ranks. System.ArrayTypeMismatchException sourceArray and destinationArray are of incompatible types. System.InvalidCastException At least one element in sourceArray cannot be cast to the type of destinationArray . System.ArgumentOutOfRangeException length is less than zero. System.ArgumentException length is greater than the number of elements in sourceArray .-or- length is greater than the number of elements in destinationArray . | Improve this Doc View Source Copy(Array, Array, Int64) Copies a range of elements from an System.Array starting at the first element and pastes them into another System.Array starting at the first element. The length is specified as a 64-bit integer. Declaration public static void Copy(this Array sourceArray, Array destinationArray, long length) Parameters Type Name Description System.Array sourceArray The System.Array that contains the data to copy. System.Array destinationArray The System.Array that receives the data. System.Int64 length A 64-bit integer that represents the number of elements to copy. The integer must be between zero and System.Int32.MaxValue , inclusive. Exceptions Type Condition System.ArgumentNullException sourceArray is null.-or- destinationArray is null. System.RankException sourceArray and destinationArray have different ranks. System.ArrayTypeMismatchException sourceArray and destinationArray are of incompatible types. System.InvalidCastException At least one element in sourceArray cannot be cast to the type of destinationArray . System.ArgumentOutOfRangeException length is less than 0 or greater than System.Int32.MaxValue . System.ArgumentException length is greater than the number of elements in sourceArray .-or- length is greater than the number of elements in destinationArray . | Improve this Doc View Source Copy(Array, Int32, Array, Int32, Int32) Copies a range of elements from an System.Array starting at the specified source index and pastes them to another System.Array starting at the specified destination index. The length and the indexes are specified as 64-bit integers. Declaration public static void Copy(this Array sourceArray, int sourceIndex, Array destinationArray, int destinationIndex, int length) Parameters Type Name Description System.Array sourceArray The System.Array that contains the data to copy. System.Int32 sourceIndex A 64-bit integer that represents the index in the sourceArray at which copying begins. System.Array destinationArray The System.Array that receives the data. System.Int32 destinationIndex A 64-bit integer that represents the index in the destinationArray at which storing begins. System.Int32 length A 64-bit integer that represents the number of elements to copy. The integer must be between zero and System.Int32.MaxValue , inclusive. Exceptions Type Condition System.ArgumentNullException sourceArray is null.-or- destinationArray is null. System.RankException sourceArray and destinationArray have different ranks. System.ArrayTypeMismatchException sourceArray and destinationArray are of incompatible types. System.InvalidCastException At least one element in sourceArray cannot be cast to the type of destinationArray . System.ArgumentOutOfRangeException sourceIndex is outside the range of valid indexes for the sourceArray .-or- destinationIndex is outside the range of valid indexes for the destinationArray .-or- length is less than 0 or greater than System.Int32.MaxValue . System.ArgumentException length is greater than the number of elements from sourceIndex to the end of sourceArray .-or- length is greater than the number of elements from destinationIndex to the end of destinationArray . | Improve this Doc View Source Copy(Array, Int64, Array, Int64, Int64) Copies a range of elements from an System.Array starting at the specified source index and pastes them to another System.Array starting at the specified destination index. The length and the indexes are specified as 32-bit integers. Declaration public static void Copy(this Array sourceArray, long sourceIndex, Array destinationArray, long destinationIndex, long length) Parameters Type Name Description System.Array sourceArray The System.Array that contains the data to copy. System.Int64 sourceIndex A 32-bit integer that represents the index in the sourceArray at which copying begins. System.Array destinationArray The System.Array that receives the data. System.Int64 destinationIndex A 32-bit integer that represents the index in the destinationArray at which storing begins. System.Int64 length A 32-bit integer that represents the number of elements to copy. Exceptions Type Condition System.ArgumentNullException sourceArray is null.-or- destinationArray is null. System.RankException sourceArray and destinationArray have different ranks. System.ArrayTypeMismatchException sourceArray and destinationArray are of incompatible types. System.InvalidCastException At least one element in sourceArray cannot be cast to the type of destinationArray . System.ArgumentOutOfRangeException sourceIndex is less than the lower bound of the first dimension of sourceArray .-or- destinationIndex is less than the lower bound of the first dimension of destinationArray .-or- length is less than zero. System.ArgumentException length is greater than the number of elements from sourceIndex to the end of sourceArray .-or- length is greater than the number of elements from destinationIndex to the end of destinationArray . | Improve this Doc View Source EqualsTo(Byte[], Byte[]) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo(this byte[] a, byte[] b) Parameters Type Name Description System.Byte [] a The first array to compare. System.Byte [] b The second array to compare. Returns Type Description System.Boolean True, if length and content of a equals b . | Improve this Doc View Source EqualsTo(Guid[], Guid[]) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo(this Guid[] a, Guid[] b) Parameters Type Name Description System.Guid [] a The first array to compare. System.Guid [] b The second array to compare. Returns Type Description System.Boolean True, if length and content of a equals b . | Improve this Doc View Source EqualsTo(Int16[], Int16[]) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo(this short[] a, short[] b) Parameters Type Name Description System.Int16 [] a The first array to compare. System.Int16 [] b The second array to compare. Returns Type Description System.Boolean True, if length and content of a equals b . | Improve this Doc View Source EqualsTo(Int32[], Int32[]) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo(this int[] a, int[] b) Parameters Type Name Description System.Int32 [] a The first array to compare. System.Int32 [] b The second array to compare. Returns Type Description System.Boolean True, if length and content of a equals b . | Improve this Doc View Source EqualsTo(Int64[], Int64[]) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo(this long[] a, long[] b) Parameters Type Name Description System.Int64 [] a The first array to compare. System.Int64 [] b The second array to compare. Returns Type Description System.Boolean True, if length and content of a equals b . | Improve this Doc View Source EqualsTo(SByte[], SByte[]) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo(this sbyte[] a, sbyte[] b) Parameters Type Name Description System.SByte [] a The first array to compare. System.SByte [] b The second array to compare. Returns Type Description System.Boolean True, if length and content of a equals b . | Improve this Doc View Source EqualsTo(String[], String[]) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo(this string[] a, string[] b) Parameters Type Name Description System.String [] a The first array to compare. System.String [] b The second array to compare. Returns Type Description System.Boolean true, if length and content of a equals b . | Improve this Doc View Source EqualsTo(String[], String[], StringComparison) Returns true, if length and content of a equals b . A parameter specifies the culture, case, and sort rules used in the comparison. Declaration public static bool EqualsTo(this string[] a, string[] b, StringComparison comparison) Parameters Type Name Description System.String [] a The first array to compare. System.String [] b The second array to compare. System.StringComparison comparison One of the enumeration values that specifies the rules for the comparison. Returns Type Description System.Boolean true, if length and content of a equals b . | Improve this Doc View Source EqualsTo(TimeSpan[], TimeSpan[]) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo(this TimeSpan[] a, TimeSpan[] b) Parameters Type Name Description System.TimeSpan [] a The first array to compare. System.TimeSpan [] b The second array to compare. Returns Type Description System.Boolean True, if length and content of a equals b . | Improve this Doc View Source EqualsTo(UInt16[], UInt16[]) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo(this ushort[] a, ushort[] b) Parameters Type Name Description System.UInt16 [] a The first array to compare. System.UInt16 [] b The second array to compare. Returns Type Description System.Boolean True, if length and content of a equals b . | Improve this Doc View Source EqualsTo(UInt32[], UInt32[]) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo(this uint[] a, uint[] b) Parameters Type Name Description System.UInt32 [] a The first array to compare. System.UInt32 [] b The second array to compare. Returns Type Description System.Boolean True, if length and content of a equals b . | Improve this Doc View Source EqualsTo(UInt64[], UInt64[]) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo(this ulong[] a, ulong[] b) Parameters Type Name Description System.UInt64 [] a The first array to compare. System.UInt64 [] b The second array to compare. Returns Type Description System.Boolean True, if length and content of a equals b . | Improve this Doc View Source EqualsTo<T>(T[], T[]) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo<T>(this T[] a, T[] b)where T : IEquatable<T> Parameters Type Name Description T[] a The first array to compare. T[] b The second array to compare. Returns Type Description System.Boolean true if content of a equals to b , false otherwise. Type Parameters Name Description T Type of array item. | Improve this Doc View Source EqualsTo<T>(T[], T[], IEqualityComparer<T>) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo<T>(this T[] a, T[] b, IEqualityComparer<T> comparer) Parameters Type Name Description T[] a The first array to compare. T[] b The second array to compare. System.Collections.Generic.IEqualityComparer <T> comparer Instance of System.Collections.Generic.IComparer<T> to compare values. Returns Type Description System.Boolean true if content of a equals to b , false otherwise. Type Parameters Name Description T Type of array item. Exceptions Type Condition System.ArgumentNullException comparer is null. | Improve this Doc View Source EqualsTo<T>(Nullable<T>[], Nullable<T>[]) Returns true, if length and content of a equals b . Declaration public static bool EqualsTo<T>(this T? [] a, T? [] b)where T : struct, IEquatable<T> Parameters Type Name Description System.Nullable <T>[] a The first array to compare. System.Nullable <T>[] b The second array to compare. Returns Type Description System.Boolean true if content of a equals to b , false otherwise. Type Parameters Name Description T Type of array item. | Improve this Doc View Source Exists<T>(T[], Predicate<T>) Determines whether the specified array contains elements that match the conditions defined by the specified predicate. Declaration public static bool Exists<T>(this T[] array, Predicate<T> match) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. System.Predicate <T> match The System.Predicate<T> that defines the conditions of the elements to search for. Returns Type Description System.Boolean true if array contains one or more elements that match the conditions defined by the specified predicate; otherwise, false. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null.-or- match is null. | Improve this Doc View Source Find<T>(T[], Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the first occurrence within the entire System.Array . Declaration public static T Find<T>(this T[] array, Predicate<T> match) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. System.Predicate <T> match The System.Predicate<T> that defines the conditions of the element to search for. Returns Type Description T The first element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T . Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null.-or- match is null. | Improve this Doc View Source FindAll<T>(T[], Predicate<T>) Retrieves all the elements that match the conditions defined by the specified predicate. Declaration public static T[] FindAll<T>(this T[] array, Predicate<T> match) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. System.Predicate <T> match The System.Predicate<T> that defines the conditions of the elements to search for. Returns Type Description T[] An System.Array containing all the elements that match the conditions defined by the specified predicate, if found; otherwise, an empty System.Array . Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null.-or- match is null. | Improve this Doc View Source FindIndex<T>(T[], Int32, Int32, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the System.Array that starts at the specified index and contains the specified number of elements. Declaration public static int FindIndex<T>(this T[] array, int startIndex, int count, Predicate<T> match) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. System.Int32 startIndex The zero-based starting index of the search. System.Int32 count The number of elements in the section to search. System.Predicate <T> match The System.Predicate<T> that defines the conditions of the element to search for. Returns Type Description System.Int32 The zero-based index of the first occurrence of an element that matches the conditions defined by match , if found; otherwise, –1. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null.-or- match is null. System.ArgumentOutOfRangeException startIndex is outside the range of valid indexes for array .-or- count is less than zero.-or- startIndex and count do not specify a valid section in array . | Improve this Doc View Source FindIndex<T>(T[], Int32, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the range of elements in the System.Array that extends from the specified index to the last element. Declaration public static int FindIndex<T>(this T[] array, int startIndex, Predicate<T> match) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. System.Int32 startIndex The zero-based starting index of the search. System.Predicate <T> match The System.Predicate<T> that defines the conditions of the element to search for. Returns Type Description System.Int32 The zero-based index of the first occurrence of an element that matches the conditions defined by match , if found; otherwise, –1. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null.-or- match is null. System.ArgumentOutOfRangeException startIndex is outside the range of valid indexes for array . | Improve this Doc View Source FindIndex<T>(T[], Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the first occurrence within the entire System.Array . Declaration public static int FindIndex<T>(this T[] array, Predicate<T> match) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. System.Predicate <T> match The System.Predicate<T> that defines the conditions of the element to search for. Returns Type Description System.Int32 The zero-based index of the first occurrence of an element that matches the conditions defined by match , if found; otherwise, –1. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null.-or- match is null. | Improve this Doc View Source FindLast<T>(T[], Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the last occurrence within the entire System.Array . Declaration public static T FindLast<T>(this T[] array, Predicate<T> match) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. System.Predicate <T> match The System.Predicate<T> that defines the conditions of the element to search for. Returns Type Description T The last element that matches the conditions defined by the specified predicate, if found; otherwise, the default value for type T . Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null.-or- match is null. | Improve this Doc View Source FindLastIndex<T>(T[], Int32, Int32, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the System.Array that contains the specified number of elements and ends at the specified index. Declaration public static int FindLastIndex<T>(this T[] array, int startIndex, int count, Predicate<T> match) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. System.Int32 startIndex The zero-based starting index of the backward search. System.Int32 count The number of elements in the section to search. System.Predicate <T> match The System.Predicate<T> that defines the conditions of the element to search for. Returns Type Description System.Int32 The zero-based index of the last occurrence of an element that matches the conditions defined by match , if found; otherwise, –1. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null.-or- match is null. System.ArgumentOutOfRangeException startIndex is outside the range of valid indexes for array .-or- count is less than zero.-or- startIndex and count do not specify a valid section in array . | Improve this Doc View Source FindLastIndex<T>(T[], Int32, Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the range of elements in the System.Array that extends from the first element to the specified index. Declaration public static int FindLastIndex<T>(this T[] array, int startIndex, Predicate<T> match) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. System.Int32 startIndex The zero-based starting index of the backward search. System.Predicate <T> match The System.Predicate<T> that defines the conditions of the element to search for. Returns Type Description System.Int32 The zero-based index of the last occurrence of an element that matches the conditions defined by match , if found; otherwise, –1. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null.-or- match is null. System.ArgumentOutOfRangeException startIndex is outside the range of valid indexes for array . | Improve this Doc View Source FindLastIndex<T>(T[], Predicate<T>) Searches for an element that matches the conditions defined by the specified predicate, and returns the zero-based index of the last occurrence within the entire System.Array . Declaration public static int FindLastIndex<T>(this T[] array, Predicate<T> match) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. System.Predicate <T> match The System.Predicate<T> that defines the conditions of the element to search for. Returns Type Description System.Int32 The zero-based index of the last occurrence of an element that matches the conditions defined by match , if found; otherwise, –1. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null.-or- match is null. | Improve this Doc View Source ForEach<T>(T[], Action<T>) Performs the specified action on each element of the specified array. Declaration public static void ForEach<T>(this T[] array, Action<T> action) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array on whose elements the action is to be performed. System.Action <T> action The System.Action<T> to perform on each element of array . Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null.-or- action is null. | Improve this Doc View Source IndexOf<T>(T[], T) Searches for the specified object and returns the index of the first occurrence within the entire System.Array . Declaration public static int IndexOf<T>(this T[] array, T value) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. T value The object to locate in array . Returns Type Description System.Int32 The zero-based index of the first occurrence of value within the entire array , if found; otherwise, –1. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. | Improve this Doc View Source IndexOf<T>(T[], T, Int32) Searches for the specified object and returns the index of the first occurrence within the range of elements in the System.Array that extends from the specified index to the last element. Declaration public static int IndexOf<T>(this T[] array, T value, int startIndex) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. T value The object to locate in array . System.Int32 startIndex The zero-based starting index of the search. 0 (zero) is valid in an empty array. Returns Type Description System.Int32 The zero-based index of the first occurrence of value within the range of elements in array that extends from startIndex to the last element, if found; otherwise, –1. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. System.ArgumentOutOfRangeException startIndex is outside the range of valid indexes for array . | Improve this Doc View Source IndexOf<T>(T[], T, Int32, Int32) Searches for the specified object and returns the index of the first occurrence within the range of elements in the System.Array that starts at the specified index and contains the specified number of elements. Declaration public static int IndexOf<T>(this T[] array, T value, int startIndex, int count) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. T value The object to locate in array . System.Int32 startIndex The zero-based starting index of the search. 0 (zero) is valid in an empty array. System.Int32 count The number of elements in the section to search. Returns Type Description System.Int32 The zero-based index of the first occurrence of value within the range of elements in array that starts at startIndex and contains the number of elements specified in count , if found; otherwise, –1. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. System.ArgumentOutOfRangeException startIndex is outside the range of valid indexes for array .-or- count is less than zero.-or- startIndex and count do not specify a valid section in array . | Improve this Doc View Source LastIndexOf<T>(T[], T) Searches for the specified object and returns the index of the last occurrence within the entire System.Array . Declaration public static int LastIndexOf<T>(this T[] array, T value) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. T value The object to locate in array . Returns Type Description System.Int32 The zero-based index of the last occurrence of value within the entire array , if found; otherwise, –1. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. | Improve this Doc View Source LastIndexOf<T>(T[], T, Int32) Searches for the specified object and returns the index of the last occurrence within the range of elements in the System.Array that extends from the first element to the specified index. Declaration public static int LastIndexOf<T>(this T[] array, T value, int startIndex) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. T value The object to locate in array . System.Int32 startIndex The zero-based starting index of the backward search. Returns Type Description System.Int32 The zero-based index of the last occurrence of value within the range of elements in array that extends from the first element to startIndex , if found; otherwise, –1. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. System.ArgumentOutOfRangeException startIndex is outside the range of valid indexes for array . | Improve this Doc View Source LastIndexOf<T>(T[], T, Int32, Int32) Searches for the specified object and returns the index of the last occurrence within the range of elements in the System.Array that contains the specified number of elements and ends at the specified index. Declaration public static int LastIndexOf<T>(this T[] array, T value, int startIndex, int count) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to search. T value The object to locate in array . System.Int32 startIndex The zero-based starting index of the backward search. System.Int32 count The number of elements in the section to search. Returns Type Description System.Int32 The zero-based index of the last occurrence of value within the range of elements in array that contains the number of elements specified in count and ends at startIndex , if found; otherwise, –1. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. System.ArgumentOutOfRangeException startIndex is outside the range of valid indexes for array .-or- count is less than zero.-or- startIndex and count do not specify a valid section in array . | Improve this Doc View Source Reverse(Array) Reverses the sequence of the elements in the entire one-dimensional System.Array . Declaration public static void Reverse(this Array array) Parameters Type Name Description System.Array array The one-dimensional System.Array to reverse. Exceptions Type Condition System.ArgumentNullException array is null. System.RankException array is multidimensional. | Improve this Doc View Source Reverse(Array, Int32, Int32) Reverses the sequence of the elements in a range of elements in the one-dimensional System.Array . Declaration public static void Reverse(this Array array, int index, int length) Parameters Type Name Description System.Array array The one-dimensional System.Array to reverse. System.Int32 index The starting index of the section to reverse. System.Int32 length The number of elements in the section to reverse. Exceptions Type Condition System.ArgumentNullException array is null. System.RankException array is multidimensional. System.ArgumentOutOfRangeException index is less than the lower bound of array .-or- length is less than zero. System.ArgumentException index and length do not specify a valid range in array . | Improve this Doc View Source Sort<T>(T[]) Sorts the elements in an entire System.Array using the System.IComparable<T> generic interface implementation of each element of the System.Array . Declaration public static void Sort<T>(this T[] array) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to sort. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. System.InvalidOperationException One or more elements in array do not implement the System.IComparable<T> generic interface. | Improve this Doc View Source Sort<T>(T[], IComparer<T>) Sorts the elements in an System.Array using the specified System.Collections.Generic.IComparer<T> generic interface. Declaration public static void Sort<T>(this T[] array, IComparer<T> comparer) Parameters Type Name Description T[] array The one-dimensional, zero-base System.Array to sort System.Collections.Generic.IComparer <T> comparer The System.Collections.Generic.IComparer<T> generic interface implementation to use when comparing elements, or null to use the System.IComparable<T> generic interface implementation of each element. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. System.InvalidOperationException comparer is null, and one or more elements in array do not implement the System.IComparable<T> generic interface. System.ArgumentException The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself. | Improve this Doc View Source Sort<T>(T[], Comparison<T>) Sorts the elements in an System.Array using the specified System.Comparison<T> . Declaration public static void Sort<T>(this T[] array, Comparison<T> comparison) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to sort System.Comparison <T> comparison The System.Comparison<T> to use when comparing elements. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null.-or- comparison is null. System.ArgumentException The implementation of comparison caused an error during the sort. For example, comparison might not return 0 when comparing an item with itself. | Improve this Doc View Source Sort<T>(T[], Int32, Int32) Sorts the elements in a range of elements in an System.Array using the System.IComparable<T> generic interface implementation of each element of the System.Array . Declaration public static void Sort<T>(this T[] array, int index, int length) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to sort System.Int32 index The starting index of the range to sort. System.Int32 length The number of elements in the range to sort. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. System.ArgumentOutOfRangeException index is less than the lower bound of array .-or- length is less than zero. System.ArgumentException index and length do not specify a valid range in array . System.InvalidOperationException One or more elements in array do not implement the System.IComparable<T> generic interface. | Improve this Doc View Source Sort<T>(T[], Int32, Int32, IComparer<T>) Sorts the elements in a range of elements in an System.Array using the specified System.Collections.Generic.IComparer<T> generic interface. Declaration public static void Sort<T>(this T[] array, int index, int length, IComparer<T> comparer) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to sort. System.Int32 index The starting index of the range to sort. System.Int32 length The number of elements in the range to sort. System.Collections.Generic.IComparer <T> comparer The System.Collections.Generic.IComparer<T> generic interface implementation to use when comparing elements, or null to use the System.IComparable<T> generic interface implementation of each element. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null. System.ArgumentOutOfRangeException index is less than the lower bound of array .-or- length is less than zero. System.ArgumentException index and length do not specify a valid range in array . -or-The implementation of comparer caused an error during the sort. For example, comparer might not return 0 when comparing an item with itself. System.InvalidOperationException comparer is null, and one or more elements in array do not implement the System.IComparable<T> generic interface. | Improve this Doc View Source TrueForAll<T>(T[], Predicate<T>) Determines whether every element in the array matches the conditions defined by the specified predicate. Declaration public static bool TrueForAll<T>(this T[] array, Predicate<T> match) Parameters Type Name Description T[] array The one-dimensional, zero-based System.Array to check against the conditions System.Predicate <T> match The System.Predicate<T> that defines the conditions to check against the elements. Returns Type Description System.Boolean true if every element in array matches the conditions defined by the specified predicate; otherwise, false. If there are no elements in the array, the return value is true. Type Parameters Name Description T The type of the elements of the array. Exceptions Type Condition System.ArgumentNullException array is null.-or- match is null."
  },
  "api/blocks/CodeJam.Services.html": {
    "href": "api/blocks/CodeJam.Services.html",
    "title": "Namespace CodeJam.Services | CodeJam",
    "keywords": "Namespace CodeJam.Services Classes ServiceContainer Service container. ServiceProviderHelper System.IServiceProvider and IServicePublisher helper methods. Interfaces IServicePublisher Service publisher interface."
  },
  "api/blocks/CodeJam.Mapping.html": {
    "href": "api/blocks/CodeJam.Mapping.html",
    "title": "Namespace CodeJam.Mapping | CodeJam",
    "keywords": "Namespace CodeJam.Mapping Classes CodeJamConvertException Defines the base class for the namespace exceptions. CodeJamMappingException Defines the base class for the namespace exceptions. Convert<TFrom, TTo> Provides data convertion functionality. Converter Provides data convertion functionality. ConvertTo<TTo> A helper class to convert a value of TTo type. DefaultValue Provides default value service. DefaultValue<T> Provides default value service. Map Mapper helper class. Mapper<TFrom, TTo> Maps an object of TFrom type to an object of TTo type. MapperBuilder<TFrom, TTo> Builds a mapper that maps an object of TFrom type to an object of TTo type. MappingSchema Providers object / value mapping support. MapValue Mapping value. MapValueAttribute Uses to define MapValue for enumtype. ScalarTypeAttribute Defines target type as scalar type. Interfaces IMapperBuilder Builds a mapper that maps an object of TFrom type to an object of TTo type."
  },
  "api/blocks/CodeJam.Mapping.CodeJamConvertException.html": {
    "href": "api/blocks/CodeJam.Mapping.CodeJamConvertException.html",
    "title": "Class CodeJamConvertException | CodeJam",
    "keywords": "Class CodeJamConvertException Defines the base class for the namespace exceptions. Inheritance System.Object System.Exception CodeJamConvertException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax [Serializable] public class CodeJamConvertException : Exception, ISerializable, _Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source CodeJamConvertException() Initializes a new instance of the CodeJamConvertException class. Declaration public CodeJamConvertException() Remarks This constructor initializes the System.Exception.Message property of the new instance such as \"A Build Type exception has occurred.\" | Improve this Doc View Source CodeJamConvertException(Exception) Initializes a new instance of the CodeJamConvertException class with the specified InnerException property. Declaration public CodeJamConvertException(Exception innerException) Parameters Type Name Description System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.InnerException | Improve this Doc View Source CodeJamConvertException(SerializationInfo, StreamingContext) Initializes a new instance of the CodeJamConvertException class with serialized data. Declaration protected CodeJamConvertException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The object that holds the serialized object data. System.Runtime.Serialization.StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source CodeJamConvertException(String) Initializes a new instance of the CodeJamConvertException class with the specified error message. Declaration public CodeJamConvertException(string message) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. See Also System.Exception.Message | Improve this Doc View Source CodeJamConvertException(String, Exception) Initializes a new instance of the CodeJamConvertException class with the specified error message and InnerException property. Declaration public CodeJamConvertException(string message, Exception innerException) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.Message System.Exception.InnerException Extension Methods Map.DeepCopy<T>(T)"
  },
  "api/main/CodeJam.Threading.ReaderWriterLockSlimExtensions.html": {
    "href": "api/main/CodeJam.Threading.ReaderWriterLockSlimExtensions.html",
    "title": "Class ReaderWriterLockSlimExtensions | CodeJam",
    "keywords": "Class ReaderWriterLockSlimExtensions Represents the extension methods for System.Threading.ReaderWriterLockSlim . Inheritance System.Object ReaderWriterLockSlimExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Threading Assembly : CodeJam.dll Syntax public static class ReaderWriterLockSlimExtensions Methods | Improve this Doc View Source GetReadLock(ReaderWriterLockSlim) Tries to enter the lock in read mode. Declaration public static ReaderWriterLockSlimExtensions.ReadLockScope GetReadLock(this ReaderWriterLockSlim readerWriterLock) Parameters Type Name Description System.Threading.ReaderWriterLockSlim readerWriterLock The System.Threading.ReaderWriterLockSlim instance. Returns Type Description CodeJam.Threading.ReaderWriterLockSlimExtensions.ReadLockScope The System.IDisposable object that reduce the recursion count for read mode, and exits read mode if the resulting count is 0 (zero). | Improve this Doc View Source GetUpgradeableReadLock(ReaderWriterLockSlim) Tries to enter the lock in upgradeable mode. Declaration public static ReaderWriterLockSlimExtensions.UpgradeableReadLockScope GetUpgradeableReadLock(this ReaderWriterLockSlim readerWriterLock) Parameters Type Name Description System.Threading.ReaderWriterLockSlim readerWriterLock The System.Threading.ReaderWriterLockSlim instance. Returns Type Description CodeJam.Threading.ReaderWriterLockSlimExtensions.UpgradeableReadLockScope The System.IDisposable object that reduce the recursion count for upgradeable mode, and exits upgradeable mode if the resulting count is 0 (zero). | Improve this Doc View Source GetWriteLock(ReaderWriterLockSlim) Tries to enter the lock in write mode. Declaration public static ReaderWriterLockSlimExtensions.WriteLockScope GetWriteLock(this ReaderWriterLockSlim readerWriterLock) Parameters Type Name Description System.Threading.ReaderWriterLockSlim readerWriterLock The System.Threading.ReaderWriterLockSlim instance. Returns Type Description CodeJam.Threading.ReaderWriterLockSlimExtensions.WriteLockScope The System.IDisposable object that reduce the recursion count for write mode, and exits write mode if the resulting count is 0 (zero)."
  },
  "api/main/CodeJam.Threading.ParallelExtensions.html": {
    "href": "api/main/CodeJam.Threading.ParallelExtensions.html",
    "title": "Class ParallelExtensions | CodeJam",
    "keywords": "Class ParallelExtensions Parallel extensions. Inheritance System.Object ParallelExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Threading Assembly : CodeJam.dll Syntax public static class ParallelExtensions Methods | Improve this Doc View Source RunInParallel(IEnumerable<Action>, Int32, String) Runs in parallel provided source of actions. Declaration public static void RunInParallel(this IEnumerable<Action> source, int parallelCount, string processName = \"ParallelProcess\") Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Action > source Actions to run. System.Int32 parallelCount number of threads to use. System.String processName Process name pattern. | Improve this Doc View Source RunInParallel(IEnumerable<Action>, String) Runs in parallel provided source of actions. Declaration public static void RunInParallel(this IEnumerable<Action> source, string processName = \"ParallelProcess\") Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Action > source Actions to run. System.String processName Process name pattern. | Improve this Doc View Source RunInParallel<T>(IEnumerable<T>, Action<T>, String) Runs in parallel actions for provided data source. Declaration public static void RunInParallel<T>(this IEnumerable<T> source, Action<T> action, string processName = \"ParallelProcess\") Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source Source to run. System.Action <T> action Action to run. System.String processName Process name. Type Parameters Name Description T | Improve this Doc View Source RunInParallel<T>(IEnumerable<T>, Int32, Action<T>, String) Runs in parallel actions for provided data source. Declaration public static void RunInParallel<T>(this IEnumerable<T> source, int parallelCount, Action<T> action, string processName = \"ParallelProcess\") Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source Source to run. System.Int32 parallelCount number of threads to use. System.Action <T> action Action to run. System.String processName Process name. Type Parameters Name Description T | Improve this Doc View Source RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Action<TTarget>, String) Implements Provider-Consumer pattern. Declaration public static void RunInParallel<TSource, TTarget>(this IEnumerable<TSource> source, Func<TSource, TTarget> providerFunc, Action<TTarget> consumerAction, string processName = \"ParallelProcess\") Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source Incoming data. System.Func <TSource, TTarget> providerFunc Provider function System.Action <TTarget> consumerAction Consumer action. System.String processName Process name pattern. Type Parameters Name Description TSource TTarget | Improve this Doc View Source RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Int32, Action<TTarget>, String) Implements Provider-Consumer pattern. Declaration public static void RunInParallel<TSource, TTarget>(this IEnumerable<TSource> source, Func<TSource, TTarget> providerFunc, int consumerCount, Action<TTarget> consumerAction, string processName = \"ParallelProcess\") Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source Incoming data. System.Func <TSource, TTarget> providerFunc Provider function System.Int32 consumerCount Number of consumer threads. System.Action <TTarget> consumerAction Consumer action. System.String processName Process name pattern. Type Parameters Name Description TSource TTarget | Improve this Doc View Source RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Action<TTarget>, String) Implements Provider-Consumer pattern. Declaration public static void RunInParallel<TSource, TTarget>(this IEnumerable<TSource> source, int providerCount, Func<TSource, TTarget> providerFunc, Action<TTarget> consumerAction, string processName = \"ParallelProcess\") Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source Incoming data. System.Int32 providerCount Number of provider threads. System.Func <TSource, TTarget> providerFunc Provider function System.Action <TTarget> consumerAction Consumer action. System.String processName Process name pattern. Type Parameters Name Description TSource TTarget | Improve this Doc View Source RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Int32, Action<TTarget>, String) Implements Provider-Consumer pattern. Declaration public static void RunInParallel<TSource, TTarget>(this IEnumerable<TSource> source, int providerCount, Func<TSource, TTarget> providerFunc, int consumerCount, Action<TTarget> consumerAction, string processName = \"ParallelProcess\") Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source Incoming data. System.Int32 providerCount Number of provider threads. System.Func <TSource, TTarget> providerFunc Provider function System.Int32 consumerCount Number of consumer threads. System.Action <TTarget> consumerAction Consumer action. System.String processName Process name pattern. Type Parameters Name Description TSource TTarget"
  },
  "api/main/CodeJam.Reflection.ReflectionEnumHelper.html": {
    "href": "api/main/CodeJam.Reflection.ReflectionEnumHelper.html",
    "title": "Class ReflectionEnumHelper | CodeJam",
    "keywords": "Class ReflectionEnumHelper Reflection helper methods for enumeration. Inheritance System.Object ReflectionEnumHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Reflection Assembly : CodeJam.dll Syntax public static class ReflectionEnumHelper Methods | Improve this Doc View Source GetField<TEnum>(TEnum) Searches for the public field with the specified enumeration value. Declaration public static FieldInfo GetField<TEnum>(TEnum value)where TEnum : struct Parameters Type Name Description TEnum value An enumeration value. Returns Type Description System.Reflection.FieldInfo An object representing the public field with the specified enumeration value, if found; otherwise, null. Type Parameters Name Description TEnum An enumeration type. | Improve this Doc View Source GetFields(Type) Returns enum fields for enum type. Declaration public static FieldInfo[] GetFields(Type enumType) Parameters Type Name Description System.Type enumType Type of the enum. Returns Type Description System.Reflection.FieldInfo [] List of enum fields. | Improve this Doc View Source GetFields<TEnum>() Returns enum fields for enum type. Declaration public static FieldInfo[] GetFields<TEnum>()where TEnum : struct Returns Type Description System.Reflection.FieldInfo [] List of enum fields. Type Parameters Name Description TEnum The type of the enum."
  },
  "api/main/CodeJam.Reflection.ParamInfo.html": {
    "href": "api/main/CodeJam.Reflection.ParamInfo.html",
    "title": "Class ParamInfo | CodeJam",
    "keywords": "Class ParamInfo Parameter data for CreateInstance method. Inheritance System.Object ParamInfo Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Reflection Assembly : CodeJam.dll Syntax public class ParamInfo Constructors | Improve this Doc View Source ParamInfo(String, Object, Boolean) Initializes a new instance of the ParamInfo class. Declaration public ParamInfo(string name, object value, bool required = true) Parameters Type Name Description System.String name Name of the parameter. System.Object value Value of the parameter. System.Boolean required True if parameter required. Properties | Improve this Doc View Source Name Parameter name. Declaration public string Name { get; set; } Property Value Type Description System.String | Improve this Doc View Source Required True, if parameter required. Declaration public bool Required { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Value Parameter value. Declaration public object Value { get; set; } Property Value Type Description System.Object Methods | Improve this Doc View Source Param(String, Object, Boolean) Initializes a new instance of the ParamInfo class. Declaration public static ParamInfo Param(string name, object value, bool required = true) Parameters Type Name Description System.String name Name of the parameter. System.Object value Value of the parameter. System.Boolean required True if parameter required. Returns Type Description ParamInfo Instance of ParamInfo . Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Ranges.Range-1.html": {
    "href": "api/main/CodeJam.Ranges.Range-1.html",
    "title": "Struct Range<T> | CodeJam",
    "keywords": "Struct Range<T> Describes a range of the values. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax [Serializable] public struct Range<T> : IRangeFactory<T, Range<T>>, IRange<T>, IEquatable<Range<T>>, IFormattable Type Parameters Name Description T The type of the value. Should implement System.IComparable<T> or System.IComparable . Constructors | Improve this Doc View Source Range(T, T) Creates instance of Range<T> Declaration public Range(T from, T to) Parameters Type Name Description T from Boundary From. T to Boundary To. | Improve this Doc View Source Range(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Creates instance of Range<T> Declaration public Range(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to) Parameters Type Name Description RangeBoundaryFrom <T> from Boundary From. RangeBoundaryTo <T> to Boundary To. Fields | Improve this Doc View Source Empty Empty range, ∅ Declaration public static readonly Range<T> Empty Field Value Type Description Range <T> | Improve this Doc View Source Infinite Infinite range, (-∞..+∞) Declaration public static readonly Range<T> Infinite Field Value Type Description Range <T> Properties | Improve this Doc View Source From Boundary From. Limits the values from the left. Declaration public RangeBoundaryFrom<T> From { get; } Property Value Type Description RangeBoundaryFrom <T> Boundary From. Implements IRange<T>.From | Improve this Doc View Source FromValue The value of Boundary From. Declaration public T FromValue { get; } Property Value Type Description T The value of Boundary From or InvalidOperationException, if From.HasValue is false . Exceptions Type Condition System.InvalidOperationException Thrown if From.HasValue is false . | Improve this Doc View Source IsEmpty The range is empty, ∅. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if the range is empty; otherwise, false . Implements IRange<T>.IsEmpty | Improve this Doc View Source IsInfinite The range is Infinite range (-∞..+∞). Declaration public bool IsInfinite { get; } Property Value Type Description System.Boolean true if the range is infinite; otherwise, false . | Improve this Doc View Source IsNotEmpty The range is NOT empty, ≠ ∅. Declaration public bool IsNotEmpty { get; } Property Value Type Description System.Boolean true if the range is not empty; otherwise, false . Implements IRange<T>.IsNotEmpty | Improve this Doc View Source IsSinglePoint The range is Zero length range (the values of the boundary From and the boundary To are the same). Declaration public bool IsSinglePoint { get; } Property Value Type Description System.Boolean true if the range is single point range; otherwise, false . | Improve this Doc View Source To Boundary To. Limits the values from the right. Declaration public RangeBoundaryTo<T> To { get; } Property Value Type Description RangeBoundaryTo <T> Boundary To. Implements IRange<T>.To | Improve this Doc View Source ToValue The value of Boundary To. Declaration public T ToValue { get; } Property Value Type Description T The value of Boundary To or InvalidOperationException, if To.HasValue is false . Exceptions Type Condition System.InvalidOperationException Thrown if To.HasValue is false . Methods | Improve this Doc View Source Equals(Range<T>) Indicates whether the current range is equal to another. Declaration public bool Equals(Range<T> other) Parameters Type Name Description Range <T> other A range to compare with this. Returns Type Description System.Boolean True if the current range is equal to the other parameter; otherwise, false. Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Indicates whether the current range and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with this. Returns Type Description System.Boolean True if obj and the current range are the same type and represent the same value; otherwise, false. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for the current range. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns string representation of the range. Declaration public override string ToString() Returns Type Description System.String The string representation of the range. Overrides System.ValueType.ToString() | Improve this Doc View Source ToString(IFormatProvider) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format string. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String, IFormatProvider) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format string. System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. Implements System.IFormattable.ToString(System.String, System.IFormatProvider) Operators | Improve this Doc View Source Equality(Range<T>, Range<T>) Implements the operator ==. Declaration public static bool operator ==(Range<T> range1, Range<T> range2) Parameters Type Name Description Range <T> range1 The range1. Range <T> range2 The range2. Returns Type Description System.Boolean True , if ranges are equal. | Improve this Doc View Source Inequality(Range<T>, Range<T>) Implements the operator !=. Declaration public static bool operator !=(Range<T> range1, Range<T> range2) Parameters Type Name Description Range <T> range1 The range1. Range <T> range2 The range2. Returns Type Description System.Boolean True , if ranges are not equal. Explicit Interface Implementations | Improve this Doc View Source IRangeFactory<T, Range<T>>.CreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Creates a new instance of the range. Declaration Range<T> IRangeFactory<T, Range<T>>.CreateRange(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to) Parameters Type Name Description RangeBoundaryFrom <T> from Boundary From. RangeBoundaryTo <T> to Boundary To. Returns Type Description Range <T> A new instance of the range with specified From-To boundaries. Implements IRangeFactory<T, TRange>.CreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) | Improve this Doc View Source IRangeFactory<T, Range<T>>.TryCreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Creates a new instance of the range, if possible. Declaration Range<T> IRangeFactory<T, Range<T>>.TryCreateRange(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to) Parameters Type Name Description RangeBoundaryFrom <T> from Boundary From. RangeBoundaryTo <T> to Boundary To. Returns Type Description Range <T> A new instance of the range with specified From-To boundaries, or empty range, if from-to boundaries forms invalid range pair. Implements IRangeFactory<T, TRange>.TryCreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Extension Methods NullableHelper.AsNullable<T>(T) CompositeRangeExtensions.GetComplementation<T>(Range<T>) CompositeRangeExtensions.ToCompositeRange<T>(Range<T>) RangeExtensions.WithValues<T, T2>(Range<T>, Func<T, T2>) RangeExtensions.WithValues<T, T2>(Range<T>, Func<T, T2>, Func<T, T2>) RangeExtensions.MakeInclusive<T>(Range<T>, Func<T, T>, Func<T, T>) RangeExtensions.MakeExclusive<T>(Range<T>, Func<T, T>, Func<T, T>) RangeExtensions.WithKey<T, TKey2>(Range<T>, TKey2) RangeExtensions.Contains<T>(Range<T>, T) RangeExtensions.Contains<T>(Range<T>, RangeBoundaryFrom<T>) RangeExtensions.Contains<T>(Range<T>, RangeBoundaryTo<T>) RangeExtensions.Contains<T>(Range<T>, T, T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.HasIntersection<T>(Range<T>, T, T) RangeExtensions.HasIntersection<T, TRange>(Range<T>, TRange) RangeExtensions.Clamp<T>(Range<T>, T) RangeExtensions.StartsAfter<T>(Range<T>, T) RangeExtensions.StartsAfter<T>(Range<T>, RangeBoundaryFrom<T>) RangeExtensions.StartsAfter<T>(Range<T>, RangeBoundaryTo<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T>(Range<T>, T) RangeExtensions.EndsBefore<T>(Range<T>, RangeBoundaryFrom<T>) RangeExtensions.EndsBefore<T>(Range<T>, RangeBoundaryTo<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Union<T>(Range<T>, T, T) RangeExtensions.Union<T, TRange>(Range<T>, TRange) RangeExtensions.ExtendFrom<T>(Range<T>, T) RangeExtensions.ExtendFrom<T>(Range<T>, RangeBoundaryFrom<T>) RangeExtensions.ExtendTo<T>(Range<T>, T) RangeExtensions.ExtendTo<T>(Range<T>, RangeBoundaryTo<T>) RangeExtensions.Intersect<T>(Range<T>, T, T) RangeExtensions.Intersect<T, TRange>(Range<T>, TRange) RangeExtensions.TrimFrom<T>(Range<T>, T) RangeExtensions.TrimFrom<T>(Range<T>, RangeBoundaryFrom<T>) RangeExtensions.TrimTo<T>(Range<T>, T) RangeExtensions.TrimTo<T>(Range<T>, RangeBoundaryTo<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.ToInvariantString<T>(T) StringExtensions.ToInvariantString<T>(T, String)"
  },
  "api/main/CodeJam.Ranges.IRangeFactory-2.html": {
    "href": "api/main/CodeJam.Ranges.IRangeFactory-2.html",
    "title": "Interface IRangeFactory<T, TRange> | CodeJam",
    "keywords": "Interface IRangeFactory<T, TRange> Common factory interface to enable 'derived' range creation. Use case example: preserve the key of the range on range intersection. Inherited Members IRange<T>.From IRange<T>.To IRange<T>.IsEmpty IRange<T>.IsNotEmpty Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax public interface IRangeFactory<T, out TRange> : IRange<T> where TRange : IRange<T> Type Parameters Name Description T The type of the value. Should implement System.IComparable<T> or System.IComparable . TRange The type of the resulting range Methods | Improve this Doc View Source CreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Creates a new instance of the range. Declaration TRange CreateRange(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to) Parameters Type Name Description RangeBoundaryFrom <T> from Boundary From. RangeBoundaryTo <T> to Boundary To. Returns Type Description TRange A new instance of the range with specified From-To boundaries. | Improve this Doc View Source TryCreateRange(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Creates a new instance of the range, if possible. Declaration TRange TryCreateRange(RangeBoundaryFrom<T> from, RangeBoundaryTo<T> to) Parameters Type Name Description RangeBoundaryFrom <T> from Boundary From. RangeBoundaryTo <T> to Boundary To. Returns Type Description TRange A new instance of the range with specified From-To boundaries, or empty range, if from-to boundaries forms invalid range pair. Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) See Also IRange <T>"
  },
  "api/main/CodeJam.OneOf-6.html": {
    "href": "api/main/CodeJam.OneOf-6.html",
    "title": "Class OneOf<T1, T2, T3, T4, T5, T6> | CodeJam",
    "keywords": "Class OneOf<T1, T2, T3, T4, T5, T6> Tagged union for 6 types. Inheritance System.Object OneOf<T1, T2, T3, T4, T5, T6> Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public abstract class OneOf<T1, T2, T3, T4, T5, T6> : IOneOf<T1, T2, T3, T4, T5, T6>, IEquatable<OneOf<T1, T2, T3, T4, T5, T6>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 T5 Type of case 5 T6 Type of case 6 Properties | Improve this Doc View Source IsCase1 Declaration public abstract bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public abstract bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6>.IsCase2 | Improve this Doc View Source IsCase3 Declaration public abstract bool IsCase3 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6>.IsCase3 | Improve this Doc View Source IsCase4 Declaration public abstract bool IsCase4 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6>.IsCase4 | Improve this Doc View Source IsCase5 Declaration public abstract bool IsCase5 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6>.IsCase5 | Improve this Doc View Source IsCase6 Declaration public abstract bool IsCase6 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6>.IsCase6 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T1 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6> Value of OneOf<T1, T2, T3, T4, T5, T6> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T2 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6> Value of OneOf<T1, T2, T3, T4, T5, T6> . | Improve this Doc View Source Create(T3) Creates instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T3 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6> Create(T3 value) Parameters Type Name Description T3 value Value of type T3 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6> Value of OneOf<T1, T2, T3, T4, T5, T6> . | Improve this Doc View Source Create(T4) Creates instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T4 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6> Create(T4 value) Parameters Type Name Description T4 value Value of type T4 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6> Value of OneOf<T1, T2, T3, T4, T5, T6> . | Improve this Doc View Source Create(T5) Creates instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T5 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6> Create(T5 value) Parameters Type Name Description T5 value Value of type T5 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6> Value of OneOf<T1, T2, T3, T4, T5, T6> . | Improve this Doc View Source Create(T6) Creates instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T6 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6> Create(T6 value) Parameters Type Name Description T6 value Value of type T6 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6> Value of OneOf<T1, T2, T3, T4, T5, T6> . | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>) Declaration public abstract void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action, Action<T5> case5Action, Action<T6> case6Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action System.Action <T3> case3Action System.Action <T4> case4Action System.Action <T5> case5Action System.Action <T6> case6Action Implements IOneOf<T1, T2, T3, T4, T5, T6>.Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>) | Improve this Doc View Source Equals(OneOf<T1, T2, T3, T4, T5, T6>) Declaration public abstract bool Equals(OneOf<T1, T2, T3, T4, T5, T6> other) Parameters Type Name Description OneOf <T1, T2, T3, T4, T5, T6> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>) Declaration public abstract TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector, Func<T5, TResult> case5Selector, Func<T6, TResult> case6Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector System.Func <T3, TResult> case3Selector System.Func <T4, TResult> case4Selector System.Func <T5, TResult> case5Selector System.Func <T6, TResult> case6Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2, T3, T4, T5, T6>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>) Operators | Improve this Doc View Source Equality(OneOf<T1, T2, T3, T4, T5, T6>, OneOf<T1, T2, T3, T4, T5, T6>) Equality operator. Declaration public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6> left, OneOf<T1, T2, T3, T4, T5, T6> right) Parameters Type Name Description OneOf <T1, T2, T3, T4, T5, T6> left Left parameter. OneOf <T1, T2, T3, T4, T5, T6> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to OneOf<T1, T2, T3, T4, T5, T6>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6> Instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T1 . | Improve this Doc View Source Implicit(T2 to OneOf<T1, T2, T3, T4, T5, T6>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6> Instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T2 . | Improve this Doc View Source Implicit(T3 to OneOf<T1, T2, T3, T4, T5, T6>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T3 value) Parameters Type Name Description T3 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6> Instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T3 . | Improve this Doc View Source Implicit(T4 to OneOf<T1, T2, T3, T4, T5, T6>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T4 value) Parameters Type Name Description T4 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6> Instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T4 . | Improve this Doc View Source Implicit(T5 to OneOf<T1, T2, T3, T4, T5, T6>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T5 value) Parameters Type Name Description T5 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6> Instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T5 . | Improve this Doc View Source Implicit(T6 to OneOf<T1, T2, T3, T4, T5, T6>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6>(T6 value) Parameters Type Name Description T6 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6> Instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T6 . | Improve this Doc View Source Inequality(OneOf<T1, T2, T3, T4, T5, T6>, OneOf<T1, T2, T3, T4, T5, T6>) Unequality operator. Declaration public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6> left, OneOf<T1, T2, T3, T4, T5, T6> right) Parameters Type Name Description OneOf <T1, T2, T3, T4, T5, T6> left Left parameter. OneOf <T1, T2, T3, T4, T5, T6> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Option-1.html": {
    "href": "api/main/CodeJam.Option-1.html",
    "title": "Class Option<T> | CodeJam",
    "keywords": "Class Option<T> Represents an optional value. Inheritance System.Object Option<T> Option<T>.None Option.Some <> Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public abstract class Option<T> : IOption<T>, IEquatable<Option<T>> Type Parameters Name Description T Properties | Improve this Doc View Source HasValue Gets a value indicating whether the current object has a value. Declaration public bool HasValue { get; } Property Value Type Description System.Boolean Implements IOption<T>.HasValue | Improve this Doc View Source IsNone Gets a value indicating whether the current object does not have a value. Declaration public bool IsNone { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsSome Gets a value indicating whether the current object has a value. Declaration public bool IsSome { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Value Gets the value of the current object. Declaration public T Value { get; } Property Value Type Description T Implements IOption<T>.Value Methods | Improve this Doc View Source Equals(Option<T>) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(Option<T> other) Parameters Type Name Description Option <T> other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Overrides System.Object.GetHashCode() | Improve this Doc View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description System.String A System.String containing a fully qualified type name. Overrides System.Object.ToString() Operators | Improve this Doc View Source Equality(Option<T>, Option<T>) Equality operator. Declaration public static bool operator ==(Option<T> left, Option<T> right) Parameters Type Name Description Option <T> left Left operand. Option <T> right Right operand. Returns Type Description System.Boolean True , if left equals right . | Improve this Doc View Source Explicit(Option<T> to T) Extracts value from option Declaration public static explicit operator T(Option<T> option) Parameters Type Name Description Option <T> option Returns Type Description T Value of option | Improve this Doc View Source Implicit(T to Option<T>) Creates a new object initialized to a specified value. Declaration public static implicit operator Option<T>(T value) Parameters Type Name Description T value Value to convert. Returns Type Description Option <T> Instance of Option<T>.Some . | Improve this Doc View Source Inequality(Option<T>, Option<T>) Unequality operator. Declaration public static bool operator !=(Option<T> left, Option<T> right) Parameters Type Name Description Option <T> left Left operand. Option <T> right Right operand. Returns Type Description System.Boolean True , if left not equals right . Extension Methods Option.Do<T>(IOption<T>, Action<IOption<T>>, Action) Option.GetValueOrDefault<T, TResult>(IOption<T>, Func<IOption<T>, TResult>, Func<TResult>) Option.GetValueOrDefault<T>(IOption<T>, T) Option.With<T, TResult>(Option<T>, Func<T, TResult>) Option.With<T, TResult>(Option<T>, Func<T, TResult>, TResult) Option.With<T, TResult>(Option<T>, Func<T, TResult>, Func<TResult>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.IOneOf-7.html": {
    "href": "api/main/CodeJam.IOneOf-7.html",
    "title": "Interface IOneOf<T1, T2, T3, T4, T5, T6, T7> | CodeJam",
    "keywords": "Interface IOneOf<T1, T2, T3, T4, T5, T6, T7> Common interface for OneOf<T1, T2, T3, T4, T5, T6, T7> and ValueOneOf<T1, T2, T3, T4, T5, T6, T7> . Namespace : CodeJam Assembly : CodeJam.dll Syntax public interface IOneOf<T1, T2, T3, T4, T5, T6, T7> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 T5 Type of case 5 T6 Type of case 6 T7 Type of case 7 Properties | Improve this Doc View Source IsCase1 Returns true if class contains value of type T1 . Declaration bool IsCase1 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase2 Returns true if class contains value of type T2 . Declaration bool IsCase2 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase3 Returns true if class contains value of type T3 . Declaration bool IsCase3 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase4 Returns true if class contains value of type T4 . Declaration bool IsCase4 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase5 Returns true if class contains value of type T5 . Declaration bool IsCase5 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase6 Returns true if class contains value of type T6 . Declaration bool IsCase6 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase7 Returns true if class contains value of type T7 . Declaration bool IsCase7 { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>) Calls action for actual type argument. Declaration void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action, Action<T5> case5Action, Action<T6> case6Action, Action<T7> case7Action) Parameters Type Name Description System.Action <T1> case1Action Action for T1 System.Action <T2> case2Action Action for T2 System.Action <T3> case3Action Action for T3 System.Action <T4> case4Action Action for T4 System.Action <T5> case5Action Action for T5 System.Action <T6> case6Action Action for T6 System.Action <T7> case7Action Action for T7 | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>, Func<T7, TResult>) Calls func for actual type argument and returns calculated value. Declaration TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector, Func<T5, TResult> case5Selector, Func<T6, TResult> case6Selector, Func<T7, TResult> case7Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector Calculation function for T1 System.Func <T2, TResult> case2Selector Calculation function for T2 System.Func <T3, TResult> case3Selector Calculation function for T3 System.Func <T4, TResult> case4Selector Calculation function for T4 System.Func <T5, TResult> case5Selector Calculation function for T5 System.Func <T6, TResult> case6Selector Calculation function for T6 System.Func <T7, TResult> case7Selector Calculation function for T7 Returns Type Description TResult Calculated value. Type Parameters Name Description TResult Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.IOneOf-6.html": {
    "href": "api/main/CodeJam.IOneOf-6.html",
    "title": "Interface IOneOf<T1, T2, T3, T4, T5, T6> | CodeJam",
    "keywords": "Interface IOneOf<T1, T2, T3, T4, T5, T6> Common interface for OneOf<T1, T2, T3, T4, T5, T6> and ValueOneOf<T1, T2, T3, T4, T5, T6> . Namespace : CodeJam Assembly : CodeJam.dll Syntax public interface IOneOf<T1, T2, T3, T4, T5, T6> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 T5 Type of case 5 T6 Type of case 6 Properties | Improve this Doc View Source IsCase1 Returns true if class contains value of type T1 . Declaration bool IsCase1 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase2 Returns true if class contains value of type T2 . Declaration bool IsCase2 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase3 Returns true if class contains value of type T3 . Declaration bool IsCase3 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase4 Returns true if class contains value of type T4 . Declaration bool IsCase4 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase5 Returns true if class contains value of type T5 . Declaration bool IsCase5 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase6 Returns true if class contains value of type T6 . Declaration bool IsCase6 { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>) Calls action for actual type argument. Declaration void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action, Action<T5> case5Action, Action<T6> case6Action) Parameters Type Name Description System.Action <T1> case1Action Action for T1 System.Action <T2> case2Action Action for T2 System.Action <T3> case3Action Action for T3 System.Action <T4> case4Action Action for T4 System.Action <T5> case5Action Action for T5 System.Action <T6> case6Action Action for T6 | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>) Calls func for actual type argument and returns calculated value. Declaration TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector, Func<T5, TResult> case5Selector, Func<T6, TResult> case6Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector Calculation function for T1 System.Func <T2, TResult> case2Selector Calculation function for T2 System.Func <T3, TResult> case3Selector Calculation function for T3 System.Func <T4, TResult> case4Selector Calculation function for T4 System.Func <T5, TResult> case5Selector Calculation function for T5 System.Func <T6, TResult> case6Selector Calculation function for T6 Returns Type Description TResult Calculated value. Type Parameters Name Description TResult Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.HGlobalScope-1.html": {
    "href": "api/main/CodeJam.HGlobalScope-1.html",
    "title": "Class HGlobalScope<T> | CodeJam",
    "keywords": "Class HGlobalScope<T> Wraps Mashal.AllocHGlobal and Marshal.FreeHGlobal using generic. Inheritance System.Object System.Runtime.ConstrainedExecution.CriticalFinalizerObject HGlobalScope HGlobalScope<T> Inherited Members HGlobalScope.Dispose() HGlobalScope.Length HGlobalScope.Data System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax [SecurityCritical] public class HGlobalScope<T> : HGlobalScope, IDisposable where T : struct Type Parameters Name Description T Constructors | Improve this Doc View Source HGlobalScope() Default constructor, allocates memory with the size of T Declaration public HGlobalScope() | Improve this Doc View Source HGlobalScope(Int32) Allocates memory from the unmanaged memory of the process by using the specified number of bytes. Declaration public HGlobalScope(int cb) Parameters Type Name Description System.Int32 cb The required number of bytes in memory. Properties | Improve this Doc View Source Value Value Declaration public T Value { get; } Property Value Type Description T Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.HGlobal.html": {
    "href": "api/main/CodeJam.HGlobal.html",
    "title": "Class HGlobal | CodeJam",
    "keywords": "Class HGlobal HGlobal wrapper. Inheritance System.Object HGlobal Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class HGlobal Methods | Improve this Doc View Source Create(Int32) Create a new HGlobal with given size. Declaration public static HGlobalScope Create(int cb) Parameters Type Name Description System.Int32 cb The required number of bytes in memory. Returns Type Description HGlobalScope HGlobalScope instance | Improve this Doc View Source Create<T>() Create a new HGlobal with sizeof( ). Declaration public static HGlobalScope<T> Create<T>()where T : struct Returns Type Description HGlobalScope <T> HGlobalScope<T> instance Type Parameters Name Description T | Improve this Doc View Source Create<T>(Int32) Create a new HGlobal with given size. Declaration public static HGlobalScope<T> Create<T>(int cb)where T : struct Parameters Type Name Description System.Int32 cb The required number of bytes in memory. Returns Type Description HGlobalScope <T> HGlobalScope<T> instance Type Parameters Name Description T"
  },
  "api/main/CodeJam.DebugUriCode.html": {
    "href": "api/main/CodeJam.DebugUriCode.html",
    "title": "Class DebugUriCode | CodeJam",
    "keywords": "Class DebugUriCode URI assertions class. Inheritance System.Object DebugUriCode Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class DebugUriCode Methods | Improve this Doc View Source IsWellFormedAbsoluteUri(String, String) Asserts that specified URI is well-formed absolute URI. Declaration [Conditional(\"DEBUG\")] public static void IsWellFormedAbsoluteUri(string uri, string argName) Parameters Type Name Description System.String uri The URI. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedRelativeUri(String, String) Asserts that specified URI is well-formed relative URI. Declaration [Conditional(\"DEBUG\")] public static void IsWellFormedRelativeUri(string uri, string argName) Parameters Type Name Description System.String uri The URI. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedUri(String, String) Asserts that specified URI is well-formed absolute or relative URI. Declaration [Conditional(\"DEBUG\")] public static void IsWellFormedUri(string uri, string argName) Parameters Type Name Description System.String uri The URI. System.String argName Name of the argument."
  },
  "api/main/CodeJam.DebugEnumCode.html": {
    "href": "api/main/CodeJam.DebugEnumCode.html",
    "title": "Class DebugEnumCode | CodeJam",
    "keywords": "Class DebugEnumCode Enum assertions class. Inheritance System.Object DebugEnumCode Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class DebugEnumCode Methods | Improve this Doc View Source AnyFlagSet<TEnum>(TEnum, String, TEnum) Asserts that any bit from specified argument flag is set. Declaration [Conditional(\"DEBUG\")] public static void AnyFlagSet<TEnum>(TEnum value, string argName, TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The argument. System.String argName Name of the argument. TEnum flags The bitwise combinations of the flags. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source AnyFlagUnset<TEnum>(TEnum, String, TEnum) Asserts that any bit from specified argument flag is not set. Declaration [Conditional(\"DEBUG\")] public static void AnyFlagUnset<TEnum>(TEnum value, string argName, TEnum flags)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The argument. System.String argName Name of the argument. TEnum flags The bitwise combinations of the flags. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source AnyStateFlagSet<TEnum>(TEnum, TEnum, String) Asserts that any bit from specified state flag is set. Declaration [Conditional(\"DEBUG\")] public static void AnyStateFlagSet<TEnum>(TEnum value, TEnum flags, string message)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flags The bitwise combinations of the flags. System.String message The message. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source AnyStateFlagSet<TEnum>(TEnum, TEnum, String, Object[]) Asserts that any bit from specified state flag is set. Declaration [Conditional(\"DEBUG\")] public static void AnyStateFlagSet<TEnum>(TEnum value, TEnum flags, string messageFormat, params object[] args)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flags The bitwise combinations of the flags. System.String messageFormat The message format. System.Object [] args The arguments. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source AnyStateFlagUnset<TEnum>(TEnum, TEnum, String) Asserts that any bit from specified state flag is not set. Declaration [Conditional(\"DEBUG\")] public static void AnyStateFlagUnset<TEnum>(TEnum value, TEnum flags, string message)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flags The bitwise combinations of the flags. System.String message The message. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source AnyStateFlagUnset<TEnum>(TEnum, TEnum, String, Object[]) Asserts that any bit from specified state flag is not set. Declaration [Conditional(\"DEBUG\")] public static void AnyStateFlagUnset<TEnum>(TEnum value, TEnum flags, string messageFormat, params object[] args)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flags The bitwise combinations of the flags. System.String messageFormat The message format. System.Object [] args The arguments. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source Defined<TEnum>(TEnum, String) Asserts that specified argument enum value is defined. Declaration [Conditional(\"DEBUG\")] public static void Defined<TEnum>(TEnum value, string argName)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The argument. System.String argName Name of the argument. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source FlagsDefined<TEnum>(TEnum, String) Asserts that all bits of the flags combination are defined. Declaration [Conditional(\"DEBUG\")] public static void FlagsDefined<TEnum>(TEnum argFlags, string argName)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum argFlags The bitwise combinations of the flags to check. System.String argName Name of the argument. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source FlagSet<TEnum>(TEnum, String, TEnum) Asserts that the specified argument flag is set. Declaration [Conditional(\"DEBUG\")] public static void FlagSet<TEnum>(TEnum value, string argName, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The argument. System.String argName Name of the argument. TEnum flag The flag. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source FlagUnset<TEnum>(TEnum, String, TEnum) Asserts that the specified argument flag is not set. Declaration [Conditional(\"DEBUG\")] public static void FlagUnset<TEnum>(TEnum value, string argName, TEnum flag)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The argument. System.String argName Name of the argument. TEnum flag The flag. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source StateFlagSet<TEnum>(TEnum, TEnum, String) Asserts that the specified state flag is set. Declaration [Conditional(\"DEBUG\")] public static void StateFlagSet<TEnum>(TEnum value, TEnum flag, string message)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flag The flag. System.String message The message. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source StateFlagSet<TEnum>(TEnum, TEnum, String, Object[]) Asserts that the specified state flag is set. Declaration [Conditional(\"DEBUG\")] public static void StateFlagSet<TEnum>(TEnum value, TEnum flag, string messageFormat, params object[] args)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flag The flag. System.String messageFormat The message format. System.Object [] args The arguments. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source StateFlagUnset<TEnum>(TEnum, TEnum, String) Asserts that the specified state flag is not set. Declaration [Conditional(\"DEBUG\")] public static void StateFlagUnset<TEnum>(TEnum value, TEnum flag, string message)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flag The flag. System.String message The message. Type Parameters Name Description TEnum The type of the enum value. | Improve this Doc View Source StateFlagUnset<TEnum>(TEnum, TEnum, String, Object[]) Asserts that the specified state flag is not set. Declaration [Conditional(\"DEBUG\")] public static void StateFlagUnset<TEnum>(TEnum value, TEnum flag, string messageFormat, params object[] args)where TEnum : struct, IComparable, IFormattable, IConvertible Parameters Type Name Description TEnum value The value. TEnum flag The flag. System.String messageFormat The message format. System.Object [] args The arguments. Type Parameters Name Description TEnum The type of the enum value."
  },
  "api/main/CodeJam.Collections.SuffixTree.html": {
    "href": "api/main/CodeJam.Collections.SuffixTree.html",
    "title": "Class SuffixTree | CodeJam",
    "keywords": "Class SuffixTree Implementation of the suffix tree with Ukkonen's algorithm See http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english/9513423 and http://www.cise.ufl.edu/~sahni/dsaaj/enrich/c16/suffix.htm Inheritance System.Object SuffixTreeBase SuffixTree Inherited Members SuffixTreeBase.RootNodeIndex SuffixTreeBase.Root SuffixTreeBase.EdgeComparer SuffixTreeBase.AddNode(SuffixTreeBase.Node) SuffixTreeBase.UpdateNode(Int32, SuffixTreeBase.Node) SuffixTreeBase.GetNode(Int32) SuffixTreeBase.NodesCount SuffixTreeBase.InternalData SuffixTreeBase.StringLocations SuffixTreeBase.Add(String) SuffixTreeBase.All() SuffixTreeBase.Contains(String) SuffixTreeBase.ContainsSuffix(String) SuffixTreeBase.StartingWith(String) SuffixTreeBase.Print() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public class SuffixTree : SuffixTreeBase Constructors | Improve this Doc View Source SuffixTree() Creates instance of SuffixTree . Declaration public SuffixTree() Fields | Improve this Doc View Source InvalidNodeIndex Unassigned node index Declaration protected const int InvalidNodeIndex = -1 Field Value Type Description System.Int32 Methods | Improve this Doc View Source AppendNodeText(StringBuilder, Int32) Appends specified node text. Declaration protected override void AppendNodeText(StringBuilder sb, int nodeIndex) Parameters Type Name Description System.Text.StringBuilder sb System.Text.StringBuilder to append node text to System.Int32 nodeIndex Node index. Overrides SuffixTreeBase.AppendNodeText(StringBuilder, Int32) | Improve this Doc View Source BuildFor(Int32, Int32) Appends suffixes for the last added string Declaration protected override void BuildFor(int begin, int end) Parameters Type Name Description System.Int32 begin System.Int32 end Overrides SuffixTreeBase.BuildFor(Int32, Int32) | Improve this Doc View Source Compact() Releases internal structures used only for tree building to free some memory Declaration public void Compact() Remarks Calling this method may result in a worse building algorithm complexity for subsequent Add(String) calls. So, it is not recommended to call it unless no more string are going to be added to the tree. Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Collections.OwnedCollection.html": {
    "href": "api/main/CodeJam.Collections.OwnedCollection.html",
    "title": "Class OwnedCollection | CodeJam",
    "keywords": "Class OwnedCollection Factory methods for the owned collections. Inheritance System.Object OwnedCollection Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public static class OwnedCollection Methods | Improve this Doc View Source Create<TOwner, TItem>(TOwner, Func<TItem, TOwner>, Action<TItem, TOwner>) Creates a new instance of the OwnedCollection<TOwner, TItem> class. Declaration public static OwnedCollection<TOwner, TItem> Create<TOwner, TItem>(TOwner owner, Func<TItem, TOwner> ownerGetter, Action<TItem, TOwner> ownerSetter)where TOwner : class where TItem : class Parameters Type Name Description TOwner owner The owner for the collection. System.Func <TItem, TOwner> ownerGetter Owner getter for the item. System.Action <TItem, TOwner> ownerSetter Owner setter for the item. Returns Type Description OwnedCollection <TOwner, TItem> A new instance of the OwnedCollection<TOwner, TItem> class. Type Parameters Name Description TOwner The type of the owner. TItem The type of the item. | Improve this Doc View Source Create<TOwner, TKey, TItem>(TOwner, Func<TItem, TOwner>, Action<TItem, TOwner>, Func<TItem, TKey>) Creates a new instance of the OwnedCollection<TOwner, TKey, TItem> class. Declaration public static OwnedCollection<TOwner, TKey, TItem> Create<TOwner, TKey, TItem>(TOwner owner, Func<TItem, TOwner> ownerGetter, Action<TItem, TOwner> ownerSetter, Func<TItem, TKey> keyGetter)where TOwner : class where TItem : class Parameters Type Name Description TOwner owner The owner for the collection. System.Func <TItem, TOwner> ownerGetter Owner getter for the item. System.Action <TItem, TOwner> ownerSetter Owner setter for the item. System.Func <TItem, TKey> keyGetter Key getter for the item. Returns Type Description OwnedCollection <TOwner, TKey, TItem> A new instance of the OwnedCollection<TOwner, TKey, TItem> class. Type Parameters Name Description TOwner The type of the owner. TKey The type of the key. TItem The type of the item."
  },
  "api/main/CodeJam.Collections.DictionaryDuplicate.html": {
    "href": "api/main/CodeJam.Collections.DictionaryDuplicate.html",
    "title": "Enum DictionaryDuplicate | CodeJam",
    "keywords": "Enum DictionaryDuplicate Defines behavior for duplicates in lookup source Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public enum DictionaryDuplicate Fields Name Description FirstWins The first item in lookup wins. LastWins The last item in lookup wins. Throw An exception will be thrown. Extension Methods EnumHelper.IsFlagSet<DictionaryDuplicate>(DictionaryDuplicate) EnumHelper.IsAnyFlagUnset<DictionaryDuplicate>(DictionaryDuplicate) EnumHelper.IsAnyFlagSet<DictionaryDuplicate>(DictionaryDuplicate) EnumHelper.IsFlagUnset<DictionaryDuplicate>(DictionaryDuplicate) EnumHelper.SetFlag<DictionaryDuplicate>(DictionaryDuplicate) EnumHelper.ClearFlag<DictionaryDuplicate>(DictionaryDuplicate) EnumHelper.SetFlag<DictionaryDuplicate>(DictionaryDuplicate, Boolean) NullableHelper.AsNullable<DictionaryDuplicate>() RangeExtensions.Contains<T, DictionaryDuplicate>(Range<T>) RangeExtensions.StartsAfter<T, DictionaryDuplicate>(Range<T>) RangeExtensions.EndsBefore<T, DictionaryDuplicate>(Range<T>) RangeExtensions.Contains<T, TKey, DictionaryDuplicate>(Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, DictionaryDuplicate>(Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, DictionaryDuplicate>(Range<T, TKey>) StringExtensions.ToInvariantString<DictionaryDuplicate>() StringExtensions.ToInvariantString<DictionaryDuplicate>(String)"
  },
  "api/main/CodeJam.Arithmetic.OperatorsFactory.html": {
    "href": "api/main/CodeJam.Arithmetic.OperatorsFactory.html",
    "title": "Class OperatorsFactory | CodeJam",
    "keywords": "Class OperatorsFactory Helper class to emit operators logic Inheritance System.Object OperatorsFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Arithmetic Assembly : CodeJam.dll Syntax public static class OperatorsFactory Methods | Improve this Doc View Source BinaryOperator<T>(ExpressionType) Binary operator factory method. Declaration public static Func<T, T, T> BinaryOperator<T>(ExpressionType operatorType) Parameters Type Name Description System.Linq.Expressions.ExpressionType operatorType Type of the operator. Returns Type Description System.Func <T, T, T> Callback for the operator Type Parameters Name Description T The type of the operands | Improve this Doc View Source ClearFlagOperator<T>() Emits code for (value & ~flag) operator. Declaration public static Func<T, T, T> ClearFlagOperator<T>() Returns Type Description System.Func <T, T, T> Callback for (value & ~flag) operator. Type Parameters Name Description T The type of the operands | Improve this Doc View Source Comparison<T>() Comparison factory method.. Declaration public static Func<T, T, int> Comparison<T>() Returns Type Description System.Func <T, T, System.Int32 > Callback for the comparison Type Parameters Name Description T The type of the operands Exceptions Type Condition System.NotSupportedException Type does not implement IComparable nor IComparable{T} interface | Improve this Doc View Source ComparisonOperator<T>(ExpressionType) Compare operator factory method.. Declaration public static Func<T, T, bool> ComparisonOperator<T>(ExpressionType comparisonType) Parameters Type Name Description System.Linq.Expressions.ExpressionType comparisonType Type of the comparison operator. Returns Type Description System.Func <T, T, System.Boolean > Callback for the compare operator Type Parameters Name Description T The type of the operands | Improve this Doc View Source GetNaN<T>() Returns the NaN value. Declaration public static T GetNaN<T>() Returns Type Description T The NaN value or System.NotSupportedException if the type has no corresponding value. Type Parameters Name Description T The type to get value for. Exceptions Type Condition System.NotSupportedException Thrown if the type has no corresponding value. | Improve this Doc View Source GetNegativeInfinity<T>() Returns the negative infinity value. Declaration public static T GetNegativeInfinity<T>() Returns Type Description T The negative infinity value or System.NotSupportedException if the type has no corresponding value. Type Parameters Name Description T The type to get value for. Exceptions Type Condition System.NotSupportedException Thrown if the type has no corresponding value. | Improve this Doc View Source GetPositiveInfinity<T>() Returns the positive infinity value. Declaration public static T GetPositiveInfinity<T>() Returns Type Description T The positive infinity value or System.NotSupportedException if the type has no corresponding value. Type Parameters Name Description T The type to get value for. Exceptions Type Condition System.NotSupportedException Thrown if the type has no corresponding value. | Improve this Doc View Source HasNaN<T>() Determines whether the type has NaN value. Declaration public static bool HasNaN<T>() Returns Type Description System.Boolean true if the type has NaN. Type Parameters Name Description T The type to check. | Improve this Doc View Source HasNegativeInfinity<T>() Determines whether the type has negative infinity value. Declaration public static bool HasNegativeInfinity<T>() Returns Type Description System.Boolean true if the type has negative infinity value. Type Parameters Name Description T The type to check. | Improve this Doc View Source HasPositiveInfinity<T>() Determines whether the type has positive infinity value. Declaration public static bool HasPositiveInfinity<T>() Returns Type Description System.Boolean true if the type has positive infinity value. Type Parameters Name Description T The type to check. | Improve this Doc View Source IsAnyFlagSetOperator<T>() Emits code for (flag == 0) || ((value & flag) != 0) check. Declaration public static Func<T, T, bool> IsAnyFlagSetOperator<T>() Returns Type Description System.Func <T, T, System.Boolean > Callback for (flag == 0) || ((value & flag) != 0) check Type Parameters Name Description T The type of the operands | Improve this Doc View Source IsFlagSetOperator<T>() Emits code for (value & flag) == flag check. Declaration public static Func<T, T, bool> IsFlagSetOperator<T>() Returns Type Description System.Func <T, T, System.Boolean > Callback for (value & flag) == flag check Type Parameters Name Description T The type of the operands | Improve this Doc View Source SetFlagOperator<T>() Emits code for (value | flag) operator. Declaration public static Func<T, T, T> SetFlagOperator<T>() Returns Type Description System.Func <T, T, T> Callback for (value | flag) operator. Type Parameters Name Description T The type of the operands | Improve this Doc View Source UnaryOperator<T>(ExpressionType) Unary operator factory method. Declaration public static Func<T, T> UnaryOperator<T>(ExpressionType operatorType) Parameters Type Name Description System.Linq.Expressions.ExpressionType operatorType Type of the operator. Returns Type Description System.Func <T, T> Callback for the operator Type Parameters Name Description T The type of the operand"
  },
  "api/blocks/CodeJam.TableData.FixedWidthFormat.html": {
    "href": "api/blocks/CodeJam.TableData.FixedWidthFormat.html",
    "title": "Class FixedWidthFormat | CodeJam",
    "keywords": "Class FixedWidthFormat Fixed width format support. Inheritance System.Object FixedWidthFormat Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.TableData Assembly : CodeJam.Blocks.dll Syntax public static class FixedWidthFormat Methods | Improve this Doc View Source CreateParser(Int32[]) Creates fixed width format parser. Declaration public static Parser CreateParser(int[] widths) Parameters Type Name Description System.Int32 [] widths Array of column widths Returns Type Description Parser Parser to use with Parse(Parser, String) | Improve this Doc View Source Parse(TextReader, Int32[]) Parses table data. Declaration public static IEnumerable<DataLine> Parse(TextReader reader, int[] widths) Parameters Type Name Description System.IO.TextReader reader Text to parse System.Int32 [] widths Array of column widths Returns Type Description System.Collections.Generic.IEnumerable < DataLine > Enumeration of DataLine contained parsed data. | Improve this Doc View Source Print(TextWriter, IEnumerable<String[]>, Int32[], String) Prints full data table Declaration public static void Print(TextWriter writer, IEnumerable<string[]> data, int[] widths, string indent = null) Parameters Type Name Description System.IO.TextWriter writer Instance of System.IO.TextWriter to write to. System.Collections.Generic.IEnumerable < System.String []> data Data to write. System.Int32 [] widths Array of column widths System.String indent The indent."
  },
  "api/blocks/CodeJam.Metadata.XmlAttributeReader.html": {
    "href": "api/blocks/CodeJam.Metadata.XmlAttributeReader.html",
    "title": "Class XmlAttributeReader | CodeJam",
    "keywords": "Class XmlAttributeReader Reads type metadata such as type and members attributes from XML. Inheritance System.Object XmlAttributeReader Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Metadata Assembly : CodeJam.Blocks.dll Syntax public class XmlAttributeReader : IMetadataReader Constructors | Improve this Doc View Source XmlAttributeReader(Stream) Reads metadata from provided XML file or from provided stream. Declaration public XmlAttributeReader(Stream xmlDocStream) Parameters Type Name Description System.IO.Stream xmlDocStream Stream to read metadata. Exceptions Type Condition System.ArgumentNullException | Improve this Doc View Source XmlAttributeReader(String) Reads metadata from provided XML file or from calling assembly resource. Declaration public XmlAttributeReader(string xmlFile) Parameters Type Name Description System.String xmlFile Metadata file name. | Improve this Doc View Source XmlAttributeReader(String, Assembly) Reads metadata from provided XML file or from provided assembly resource. Declaration public XmlAttributeReader(string xmlFile, Assembly assembly) Parameters Type Name Description System.String xmlFile Metadata file name. System.Reflection.Assembly assembly Assembly to get resource stream. Methods | Improve this Doc View Source GetAttributes<T>(MemberInfo, Boolean) Returns custom attributes applied to provided type member. Declaration public T[] GetAttributes<T>(MemberInfo memberInfo, bool inherit = true)where T : Attribute Parameters Type Name Description System.Reflection.MemberInfo memberInfo Type member. System.Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . Returns Type Description T[] Array of custom attributes. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this member are returned. Implements IMetadataReader.GetAttributes<T>(MemberInfo, Boolean) | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Returns custom attributes applied to provided type. Declaration public T[] GetAttributes<T>(Type type, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type Object type System.Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . Returns Type Description T[] Array of custom attributes. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this type are returned. Implements IMetadataReader.GetAttributes<T>(Type, Boolean) Extension Methods Map.DeepCopy<T>(T)"
  },
  "api/blocks/CodeJam.Mapping.MappingSchema.html": {
    "href": "api/blocks/CodeJam.Mapping.MappingSchema.html",
    "title": "Class MappingSchema | CodeJam",
    "keywords": "Class MappingSchema Providers object / value mapping support. Inheritance System.Object MappingSchema Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax public class MappingSchema Constructors | Improve this Doc View Source MappingSchema() Create an instance of MappingSchema . Declaration public MappingSchema() | Improve this Doc View Source MappingSchema(MappingSchema[]) Create an instance of MappingSchema . Declaration public MappingSchema(params MappingSchema[] schemas) Parameters Type Name Description MappingSchema [] schemas Base schemas. | Improve this Doc View Source MappingSchema(String) Create an instance of MappingSchema . Declaration public MappingSchema(string configuration) Parameters Type Name Description System.String configuration Configuration name. | Improve this Doc View Source MappingSchema(String, MappingSchema[]) Create an instance of MappingSchema . Declaration public MappingSchema(string configuration, params MappingSchema[] schemas) Parameters Type Name Description System.String configuration Configuration name. MappingSchema [] schemas Base schemas. Fields | Improve this Doc View Source Default Default mapping schema. Declaration public static MappingSchema Default Field Value Type Description MappingSchema Properties | Improve this Doc View Source ConfigurationID Gets configuration ID. Declaration public string ConfigurationID { get; } Property Value Type Description System.String | Improve this Doc View Source ConfigurationList Configuration list. Declaration public string[] ConfigurationList { get; } Property Value Type Description System.String [] | Improve this Doc View Source IsStructIsScalarType true if value type is considered as scalar type. Declaration public bool IsStructIsScalarType { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source MetadataReader Gets or sets metadata reader. Declaration public IMetadataReader MetadataReader { get; set; } Property Value Type Description IMetadataReader Methods | Improve this Doc View Source AddMetadataReader(IMetadataReader) Adds metadata reader. Declaration public void AddMetadataReader(IMetadataReader reader) Parameters Type Name Description IMetadataReader reader Instance of IMetadataReader | Improve this Doc View Source AddScalarType(Type, Object) Adds scalar type and its default value. Declaration public void AddScalarType(Type type, object defaultValue) Parameters Type Name Description System.Type type Type to add System.Object defaultValue Default value. | Improve this Doc View Source ChangeType(Object, Type) Returns an object of a specified type whose value is equivalent to a specified object. Declaration public object ChangeType(object value, Type conversionType) Parameters Type Name Description System.Object value An object to convert. System.Type conversionType The type of object to return. Returns Type Description System.Object An object whose type is conversionType and whose value is equivalent to value . | Improve this Doc View Source ChangeTypeTo<T>(Object) Returns an object of a specified type whose value is equivalent to a specified object. Declaration public T ChangeTypeTo<T>(object value) Parameters Type Name Description System.Object value An object to convert. Returns Type Description T An object whose type is conversionType and whose value is equivalent to value . Type Parameters Name Description T The type of object to return. | Improve this Doc View Source EnumToValue(Enum) Converts enum to its map value. Declaration public object EnumToValue(Enum value) Parameters Type Name Description System.Enum value Value to convert. Returns Type Description System.Object Mapped value. | Improve this Doc View Source GetAttribute<T>(MemberInfo, Boolean) Returns custom attribute applied to provided type member. Declaration public T GetAttribute<T>(MemberInfo memberInfo, bool inherit = true)where T : Attribute Parameters Type Name Description System.Reflection.MemberInfo memberInfo Type member. System.Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . Returns Type Description T A custom attribute or null . Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this member are returned. | Improve this Doc View Source GetAttribute<T>(MemberInfo, Func<T, String>, Boolean) Returns custom attribute applied to provided type member. Declaration public T GetAttribute<T>(MemberInfo memberInfo, Func<T, string> configGetter, bool inherit = true)where T : Attribute Parameters Type Name Description System.Reflection.MemberInfo memberInfo Type member. System.Func <T, System.String > configGetter A function that returns configuration value is supported by the attribute. System.Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . Returns Type Description T A custom attribute or null . Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this member are returned. | Improve this Doc View Source GetAttribute<T>(Type, Boolean) Returns custom attribute applied to provided type. Declaration public T GetAttribute<T>(Type type, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type Object type System.Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . Returns Type Description T A custom attribute or null . Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this type are returned. | Improve this Doc View Source GetAttribute<T>(Type, Func<T, String>, Boolean) Returns custom attribute applied to provided type. Declaration public T GetAttribute<T>(Type type, Func<T, string> configGetter, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type Object type System.Func <T, System.String > configGetter A function that returns configuration value is supported by the attribute. System.Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . Returns Type Description T A custom attribute or null . Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this type are returned. | Improve this Doc View Source GetAttributes<T>(MemberInfo, Boolean) Returns custom attributes applied to provided type member. Declaration public T[] GetAttributes<T>(MemberInfo memberInfo, bool inherit = true)where T : Attribute Parameters Type Name Description System.Reflection.MemberInfo memberInfo Type member. System.Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . Returns Type Description T[] Array of custom attributes. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this member are returned. | Improve this Doc View Source GetAttributes<T>(MemberInfo, Func<T, String>, Boolean) Returns custom attributes applied to provided type member. Declaration public T[] GetAttributes<T>(MemberInfo memberInfo, Func<T, string> configGetter, bool inherit = true)where T : Attribute Parameters Type Name Description System.Reflection.MemberInfo memberInfo Type member. System.Func <T, System.String > configGetter A function that returns configuration value is supported by the attribute. System.Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . Returns Type Description T[] Array of custom attributes. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this member are returned. | Improve this Doc View Source GetAttributes<T>(Type, Boolean) Returns custom attributes applied to provided type. Declaration public T[] GetAttributes<T>(Type type, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type Object type System.Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . Returns Type Description T[] Array of custom attributes. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this type are returned. | Improve this Doc View Source GetAttributes<T>(Type, Func<T, String>, Boolean) Returns custom attributes applied to provided type. Declaration public T[] GetAttributes<T>(Type type, Func<T, string> configGetter, bool inherit = true)where T : Attribute Parameters Type Name Description System.Type type Object type System.Func <T, System.String > configGetter A function that returns configuration value is supported by the attribute. System.Boolean inherit true to search this member's inheritance chain to find the attributes; otherwise, false . Returns Type Description T[] Array of custom attributes. Type Parameters Name Description T The type of attribute to search for. Only attributes that are assignable to this type are returned. | Improve this Doc View Source GetConverter<TFrom, TTo>() Returns converter from a value of type TFrom to TTo . Declaration public Func<TFrom, TTo> GetConverter<TFrom, TTo>() Returns Type Description System.Func <TFrom, TTo> Convert function. Type Parameters Name Description TFrom Type to convert from. TTo Type to convert to. | Improve this Doc View Source GetConvertExpression(Type, Type, Boolean, Boolean) Returns an expression that converts a value of type from to to . Declaration public LambdaExpression GetConvertExpression(Type from, Type to, bool checkNull = true, bool createDefault = true) Parameters Type Name Description System.Type from Type to convert from. System.Type to Type to convert to. System.Boolean checkNull If true , created expression checks input value for null . System.Boolean createDefault If true , new expression is created. Returns Type Description System.Linq.Expressions.LambdaExpression Convert expression. | Improve this Doc View Source GetConvertExpression<TFrom, TTo>() Returns an expression that converts a value of type TFrom to TTo . Declaration public Expression<Func<TFrom, TTo>> GetConvertExpression<TFrom, TTo>() Returns Type Description System.Linq.Expressions.Expression < System.Func <TFrom, TTo>> Convert expression. Type Parameters Name Description TFrom Type to convert from. TTo Type to convert to. | Improve this Doc View Source GetDefaultValue(Type) Gets default value for provided System.Type . Declaration public object GetDefaultValue(Type type) Parameters Type Name Description System.Type type System.Type to get default value. Returns Type Description System.Object Default value of the provided System.Type | Improve this Doc View Source GetMapValues(Type) Returns mapping values for provided enum type. Declaration public virtual MapValue[] GetMapValues(Type type) Parameters Type Name Description System.Type type Type to get mapping values. Returns Type Description MapValue [] Array of mapping values. Exceptions Type Condition System.ArgumentNullException type is null. | Improve this Doc View Source IsScalarType(Type) Returns true if provided type is considered as a scalar type. Declaration public bool IsScalarType(Type type) Parameters Type Name Description System.Type type Type to check. Returns Type Description System.Boolean True if provided type is a scalar type. | Improve this Doc View Source SetConverter<TFrom, TTo>(Func<TFrom, TTo>) Adds a function expression that converts a value of type fromType to toType . Declaration public void SetConverter<TFrom, TTo>(Func<TFrom, TTo> func) Parameters Type Name Description System.Func <TFrom, TTo> func Convert function. Type Parameters Name Description TFrom Type to convert from. TTo Type to convert to. | Improve this Doc View Source SetConvertExpression(Type, Type, LambdaExpression, Boolean) Adds an expression that converts a value of type fromType to toType . Declaration public void SetConvertExpression(Type fromType, Type toType, LambdaExpression expr, bool addNullCheck = true) Parameters Type Name Description System.Type fromType Type to convert from. System.Type toType Type to convert to. System.Linq.Expressions.LambdaExpression expr Expression to set. System.Boolean addNullCheck If true , adds an expression to check null value. | Improve this Doc View Source SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Boolean) Adds an expression that converts a value of type fromType to toType . Declaration public void SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>> expr, bool addNullCheck = true) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TFrom, TTo>> expr Expression to set. System.Boolean addNullCheck If true , adds an expression to check null value. Type Parameters Name Description TFrom Type to convert from. TTo Type to convert to. | Improve this Doc View Source SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>>, Expression<Func<TFrom, TTo>>) Adds an expression that converts a value of type fromType to toType . Declaration public void SetConvertExpression<TFrom, TTo>(Expression<Func<TFrom, TTo>> checkNullExpr, Expression<Func<TFrom, TTo>> expr) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TFrom, TTo>> checkNullExpr Null check expression. System.Linq.Expressions.Expression < System.Func <TFrom, TTo>> expr Convert expression. Type Parameters Name Description TFrom Type to convert from. TTo Type to convert to. | Improve this Doc View Source SetCultureInfo(CultureInfo) Initializes culture specific converters. Declaration public void SetCultureInfo(CultureInfo info) Parameters Type Name Description System.Globalization.CultureInfo info Instance of System.Globalization.CultureInfo | Improve this Doc View Source SetDefaultValue(Type, Object) Sets default value for provided System.Type . Declaration public void SetDefaultValue(Type type, object value) Parameters Type Name Description System.Type type Type to set default value for. System.Object value Value to set. | Improve this Doc View Source SetScalarType(Type, Boolean) Sets an scalar type indicator scalar for provided type. Declaration public void SetScalarType(Type type, bool isScalarType = true) Parameters Type Name Description System.Type type Type to set. System.Boolean isScalarType Acalar type indicator. | Improve this Doc View Source TryGetConvertExpression(Type, Type) Returns an expression that converts a value of type TFrom to TTo or null. Declaration protected virtual LambdaExpression TryGetConvertExpression(Type from, Type to) Parameters Type Name Description System.Type from Type to convert from. System.Type to Type to convert to. Returns Type Description System.Linq.Expressions.LambdaExpression Convert expression. Extension Methods Map.DeepCopy<T>(T)"
  },
  "api/blocks/CodeJam.Mapping.DefaultValue.html": {
    "href": "api/blocks/CodeJam.Mapping.DefaultValue.html",
    "title": "Class DefaultValue | CodeJam",
    "keywords": "Class DefaultValue Provides default value service. Inheritance System.Object DefaultValue Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax public static class DefaultValue Methods | Improve this Doc View Source GetValue(Type, MappingSchema) Gets default value for provided System.Type . Declaration public static object GetValue(Type type, MappingSchema mappingSchema = null) Parameters Type Name Description System.Type type System.Type to get default value. MappingSchema mappingSchema An instance of MappingSchema . Returns Type Description System.Object Default value of the provided System.Type | Improve this Doc View Source GetValue<T>() Gets default value for provided System.Type . Declaration public static T GetValue<T>() Returns Type Description T Default value of the provided System.Type Type Parameters Name Description T Type to get default value. | Improve this Doc View Source SetValue<T>(T) Sets default value for provided System.Type . Declaration public static void SetValue<T>(T value) Parameters Type Name Description T value Value to set. Type Parameters Name Description T Type to set default value for."
  },
  "api/main/CodeJam.Xml.html": {
    "href": "api/main/CodeJam.Xml.html",
    "title": "Namespace CodeJam.Xml | CodeJam",
    "keywords": "Namespace CodeJam.Xml Classes XNodeExtensions Extensions for XLinq."
  },
  "api/main/CodeJam.Collections.LazyDictionary-2.html": {
    "href": "api/main/CodeJam.Collections.LazyDictionary-2.html",
    "title": "Class LazyDictionary<TKey, TValue> | CodeJam",
    "keywords": "Class LazyDictionary<TKey, TValue> Dictionary with lazy values initialization. Inheritance System.Object LazyDictionary<TKey, TValue> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public class LazyDictionary<TKey, TValue> : ILazyDictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters Name Description TKey TValue Constructors | Improve this Doc View Source LazyDictionary(Func<TKey, TValue>) Initialize instance. Declaration public LazyDictionary(Func<TKey, TValue> valueFactory) Parameters Type Name Description System.Func <TKey, TValue> valueFactory Function to create value on demand. | Improve this Doc View Source LazyDictionary(Func<TKey, TValue>, IEqualityComparer<TKey>) Initialize instance. Declaration public LazyDictionary(Func<TKey, TValue> valueFactory, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Func <TKey, TValue> valueFactory Function to create value on demand. System.Collections.Generic.IEqualityComparer <TKey> comparer Key comparer. Properties | Improve this Doc View Source Item[TKey] Gets the element that has the specified key in the read-only dictionary. Declaration public TValue this[TKey key] { get; } Parameters Type Name Description TKey key The key to locate. Property Value Type Description TValue The element that has the specified key in the read-only dictionary. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Item[TKey] Exceptions Type Condition System.ArgumentNullException key is null. System.Collections.Generic.KeyNotFoundException The property is retrieved and key is not found. | Improve this Doc View Source Keys Gets an enumerable collection that contains the keys in the read-only dictionary. Declaration public IEnumerable<TKey> Keys { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TKey> An enumerable collection that contains the keys in the read-only dictionary. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys | Improve this Doc View Source Values Gets an enumerable collection that contains the values in the read-only dictionary. Declaration public IEnumerable<TValue> Values { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TValue> An enumerable collection that contains the values in the read-only dictionary. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values Methods | Improve this Doc View Source Clear() Clears all created values Declaration public void Clear() Implements ILazyDictionary<TKey, TValue>.Clear() | Improve this Doc View Source ContainsKey(TKey) Determines whether the read-only dictionary contains an element that has the specified key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key to locate. Returns Type Description System.Boolean true if the read-only dictionary contains an element that has the specified key; otherwise, false. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey) Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc View Source TryGetValue(TKey, out TValue) Gets the value that is associated with the specified key. Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key The key to locate. TValue value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the object that implements the System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> interface contains an element that has the specified key; otherwise, false. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, TValue) Exceptions Type Condition System.ArgumentNullException key is null. Explicit Interface Implementations | Improve this Doc View Source IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() Declaration IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair <TKey, TValue>> Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() | Improve this Doc View Source IReadOnlyCollection<KeyValuePair<TKey, TValue>>.Count Declaration int IReadOnlyCollection<KeyValuePair<TKey, TValue>>.Count { get; } Returns Type Description System.Int32 Implements System.Collections.Generic.IReadOnlyCollection<T>.Count | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator() Extension Methods DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey, TValue) DictionaryExtensions.GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>) DictionaryExtensions.GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, TResult) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue>) DictionaryExtensions.GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, Func<TKey, TResult>) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, TSource) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, TAccumulate) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, TResult) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, Func<TSource>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, Func<TResult>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.WithIndex<T>(IEnumerable<T>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, Func<T, T, TResult>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.CombineWithNext<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhile<T>(IEnumerable<T>, Func<T, T, Boolean>) EnumerableExtensions.Page<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Slice<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TakeLast<T>(IEnumerable<T>, Int32) EnumerableExtensions.Split<T>(IEnumerable<T>, Int32) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.Union<T>(IEnumerable<T>, T[]) EnumerableExtensions.Concat<T>(IEnumerable<T>, T) EnumerableExtensions.Concat<T>(IEnumerable<T>, T[]) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T[]) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>, IEqualityComparer<T>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.OrderBy<TSource>(IEnumerable<TSource>) EnumerableExtensions.OrderByDescending<TSource>(IEnumerable<TSource>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T, Func<T, Boolean>) EnumerableExtensions.AsList<T>(IEnumerable<T>) EnumerableExtensions.AsArray<T>(IEnumerable<T>) EnumerableExtensions.ToStrings<T>(IEnumerable<T>) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) CompositeRangeExtensions.ToCompositeRange<T, TKey>(IEnumerable<TKey>, Func<TKey, T>, Func<TKey, T>) CompositeRangeExtensions.ToCompositeRange<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.Join<T>(IEnumerable<T>, String) StringExtensions.Join<T>(IEnumerable<T>) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Int32, Action<T>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Action<T>, String)"
  },
  "api/main/CodeJam.Collections.DictionaryExtensions.html": {
    "href": "api/main/CodeJam.Collections.DictionaryExtensions.html",
    "title": "Class DictionaryExtensions | CodeJam",
    "keywords": "Class DictionaryExtensions Extensions for System.Collections.Generic.IDictionary<TKey, TValue> Inheritance System.Object DictionaryExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public static class DictionaryExtensions Methods | Improve this Doc View Source AddOrUpdate<TKey, TValue>(ConcurrentDictionary<TKey, TValue>, TKey, Func<TKey, TValue>) Adds a key/value pair to the System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> if the key does not already exist, or updates a key/value pair System.Collections.Concurrent.ConcurrentDictionary<TKey, TValue> by using the specified function if the key already exists. Declaration public static TValue AddOrUpdate<TKey, TValue>(this ConcurrentDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue> valueFactory) Parameters Type Name Description System.Collections.Concurrent.ConcurrentDictionary <TKey, TValue> dictionary The dictionary. TKey key The key to be added or whose value should be updated System.Func <TKey, TValue> valueFactory The function used to generate a value. Returns Type Description TValue The new value for the key. Type Parameters Name Description TKey TValue | Improve this Doc View Source AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) Adds a key/value pair to the System.Collections.Generic.IDictionary<TKey, TValue> if the key does not already exist, or updates a key/value pair System.Collections.Generic.IDictionary<TKey, TValue> by using the specified function if the key already exists. Declaration public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary. TKey key The key to be added or whose value should be updated TValue addValue The value to be added for an absent key System.Func <TKey, TValue, TValue> updateValueFactory The function used to generate a new value for an existing key based on the key's existing value Returns Type Description TValue The new value for the key. This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present). Type Parameters Name Description TKey TValue | Improve this Doc View Source AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>) Adds a key/value pair to the System.Collections.Generic.IDictionary<TKey, TValue> if the key does not already exist, or updates a key/value pair System.Collections.Generic.IDictionary<TKey, TValue> by using the specified function if the key already exists. Declaration public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue> valueFactory) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary. TKey key The key to be added or whose value should be updated System.Func <TKey, TValue> valueFactory The function used to generate a value. Returns Type Description TValue The new value for the key. Type Parameters Name Description TKey TValue | Improve this Doc View Source AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) Adds a key/value pair to the System.Collections.Generic.IDictionary<TKey, TValue> if the key does not already exist, or updates a key/value pair System.Collections.Generic.IDictionary<TKey, TValue> by using the specified function if the key already exists. Declaration public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary. TKey key The key to be added or whose value should be updated System.Func <TKey, TValue> addValueFactory The function used to generate a value for an absent key System.Func <TKey, TValue, TValue> updateValueFactory The function used to generate a new value for an existing key based on the key's existing value Returns Type Description TValue The new value for the key. This will be either be addValue (if the key was absent) or the result of updateValueFactory (if the key was present). Type Parameters Name Description TKey TValue | Improve this Doc View Source GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey) Adds a key/value pair to the System.Collections.Generic.IDictionary<TKey, TValue> if the key does not already exist. Declaration public static TValue GetOrAdd<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key)where TValue : new () Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary. TKey key The key of the element to add. Returns Type Description TValue The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary. Type Parameters Name Description TKey TValue | Improve this Doc View Source GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Adds a key/value pair to the System.Collections.Generic.IDictionary<TKey, TValue> if the key does not already exist. Declaration public static TValue GetOrAdd<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue value) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary. TKey key The key of the element to add. TValue value the value to be added, if the key does not already exist Returns Type Description TValue The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary. Type Parameters Name Description TKey TValue | Improve this Doc View Source GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>) Adds a key/value pair to the System.Collections.Generic.IDictionary<TKey, TValue> if the key does not already exist. Declaration public static TValue GetOrAdd<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue> valueFactory) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary. TKey key The key of the element to add. System.Func <TKey, TValue> valueFactory The function used to generate a value for the key Returns Type Description TValue The value for the key. This will be either the existing value for the key if the key is already in the dictionary, or the new value if the key was not in the dictionary. Type Parameters Name Description TKey TValue | Improve this Doc View Source GetValueOrDefault<TKey, TValue>(ConcurrentDictionary<TKey, TValue>, TKey) Returns value associated with key , or default(TValue) if key does not exists in dictionary Declaration public static TValue GetValueOrDefault<TKey, TValue>(this ConcurrentDictionary<TKey, TValue> dictionary, TKey key) Parameters Type Name Description System.Collections.Concurrent.ConcurrentDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. Returns Type Description TValue Value, associated with the key , or default value if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source GetValueOrDefault<TKey, TValue>(ConcurrentDictionary<TKey, TValue>, TKey, TValue) Returns value associated with key , or defaultValue if key does not exists in dictionary Declaration public static TValue GetValueOrDefault<TKey, TValue>(this ConcurrentDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue) Parameters Type Name Description System.Collections.Concurrent.ConcurrentDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. TValue defaultValue Default value. Returns Type Description TValue Value, associated with the key , or defaultValue if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source GetValueOrDefault<TKey, TValue>(ConcurrentDictionary<TKey, TValue>, TKey, Func<TKey, TValue>) Returns value associated with key , or value returned by defaultValueFactory if key does not exists in dictionary Declaration public static TValue GetValueOrDefault<TKey, TValue>(this ConcurrentDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue> defaultValueFactory) Parameters Type Name Description System.Collections.Concurrent.ConcurrentDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue> defaultValueFactory Function to return default value. Returns Type Description TValue Value, associated with the key , or value returned by defaultValueFactory if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source GetValueOrDefault<TKey, TValue>(Dictionary<TKey, TValue>, TKey) Returns value associated with key , or default(TValue) if key does not exists in dictionary Declaration public static TValue GetValueOrDefault<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key) Parameters Type Name Description System.Collections.Generic.Dictionary <TKey, TValue> dictionary The dictionary. TKey key The key. Returns Type Description TValue Value, associated with the key , or default value if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source GetValueOrDefault<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) Returns value associated with key , or defaultValue if key does not exists in dictionary Declaration public static TValue GetValueOrDefault<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue) Parameters Type Name Description System.Collections.Generic.Dictionary <TKey, TValue> dictionary The dictionary. TKey key The key. TValue defaultValue Default value. Returns Type Description TValue Value, associated with the key , or defaultValue if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source GetValueOrDefault<TKey, TValue>(Dictionary<TKey, TValue>, TKey, Func<TKey, TValue>) Returns value associated with key , or value returned by defaultValueFactory if key does not exists in dictionary Declaration public static TValue GetValueOrDefault<TKey, TValue>(this Dictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue> defaultValueFactory) Parameters Type Name Description System.Collections.Generic.Dictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue> defaultValueFactory Function to return default value. Returns Type Description TValue Value, associated with the key , or value returned by defaultValueFactory if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey) Returns value associated with key , or default(TValue) if key does not exists in dictionary Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. Returns Type Description TValue Value, associated with the key , or default value if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue) Returns value associated with key , or defaultValue if key does not exists in dictionary Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. TValue defaultValue Default value. Returns Type Description TValue Value, associated with the key , or defaultValue if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source GetValueOrDefault<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>) Returns value associated with key , or value returned by defaultValueFactory if key does not exists in dictionary Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue> defaultValueFactory) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue> defaultValueFactory Function to return default value. Returns Type Description TValue Value, associated with the key , or value returned by defaultValueFactory if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey) Returns value associated with key , or default(TValue) if key does not exists in dictionary Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. Returns Type Description TValue Value, associated with the key , or default value if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey, TValue) Returns value associated with key , or defaultValue if key does not exists in dictionary Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, TValue defaultValue) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. TValue defaultValue Default value. Returns Type Description TValue Value, associated with the key , or defaultValue if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue>) Returns value associated with key , or value returned by defaultValueFactory if key does not exists in dictionary Declaration public static TValue GetValueOrDefault<TKey, TValue>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue> defaultValueFactory) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue> defaultValueFactory Function to return default value. Returns Type Description TValue Value, associated with the key , or value returned by defaultValueFactory if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. | Improve this Doc View Source GetValueOrDefault<TKey, TValue, TResult>(ConcurrentDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>) Returns value associated with key , or default value if key does not exists in dictionary Declaration public static TResult GetValueOrDefault<TKey, TValue, TResult>(this ConcurrentDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue, TResult> resultSelector) Parameters Type Name Description System.Collections.Concurrent.ConcurrentDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue, TResult> resultSelector Function to select result. Returns Type Description TResult Value, associated with the key , or default value if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. TResult Result type. | Improve this Doc View Source GetValueOrDefault<TKey, TValue, TResult>(ConcurrentDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, TResult) Returns value associated with key , or defaultValue if key does not exists in dictionary Declaration public static TResult GetValueOrDefault<TKey, TValue, TResult>(this ConcurrentDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue, TResult> resultSelector, TResult defaultValue) Parameters Type Name Description System.Collections.Concurrent.ConcurrentDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue, TResult> resultSelector Function to select result. TResult defaultValue Default value. Returns Type Description TResult Value, associated with the key , or defaultValue if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. TResult Result type. | Improve this Doc View Source GetValueOrDefault<TKey, TValue, TResult>(ConcurrentDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, Func<TKey, TResult>) Returns value associated with key , or value returned by defaultValueFactory if key does not exists in dictionary Declaration public static TResult GetValueOrDefault<TKey, TValue, TResult>(this ConcurrentDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue, TResult> resultSelector, Func<TKey, TResult> defaultValueFactory) Parameters Type Name Description System.Collections.Concurrent.ConcurrentDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue, TResult> resultSelector Function to select result. System.Func <TKey, TResult> defaultValueFactory Function to return default value. Returns Type Description TResult Value, associated with the key , or value returned by defaultValueFactory if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. TResult Result type. | Improve this Doc View Source GetValueOrDefault<TKey, TValue, TResult>(Dictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>) Returns value associated with key , or default value if key does not exists in dictionary Declaration public static TResult GetValueOrDefault<TKey, TValue, TResult>(this Dictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue, TResult> resultSelector) Parameters Type Name Description System.Collections.Generic.Dictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue, TResult> resultSelector Function to select result. Returns Type Description TResult Value, associated with the key , or default value if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. TResult Result type. | Improve this Doc View Source GetValueOrDefault<TKey, TValue, TResult>(Dictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, TResult) Returns value associated with key , or defaultValue if key does not exists in dictionary Declaration public static TResult GetValueOrDefault<TKey, TValue, TResult>(this Dictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue, TResult> resultSelector, TResult defaultValue) Parameters Type Name Description System.Collections.Generic.Dictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue, TResult> resultSelector Function to select result. TResult defaultValue Default value. Returns Type Description TResult Value, associated with the key , or defaultValue if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. TResult Result type. | Improve this Doc View Source GetValueOrDefault<TKey, TValue, TResult>(Dictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, Func<TKey, TResult>) Returns value associated with key , or value returned by defaultValueFactory if key does not exists in dictionary Declaration public static TResult GetValueOrDefault<TKey, TValue, TResult>(this Dictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue, TResult> resultSelector, Func<TKey, TResult> defaultValueFactory) Parameters Type Name Description System.Collections.Generic.Dictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue, TResult> resultSelector Function to select result. System.Func <TKey, TResult> defaultValueFactory Function to return default value. Returns Type Description TResult Value, associated with the key , or value returned by defaultValueFactory if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. TResult Result type. | Improve this Doc View Source GetValueOrDefault<TKey, TValue, TResult>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>) Returns value associated with key , or default value if key does not exists in dictionary Declaration public static TResult GetValueOrDefault<TKey, TValue, TResult>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue, TResult> resultSelector) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue, TResult> resultSelector Function to select result. Returns Type Description TResult Value, associated with the key , or default value if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. TResult Result type. | Improve this Doc View Source GetValueOrDefault<TKey, TValue, TResult>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, TResult) Returns value associated with key , or defaultValue if key does not exists in dictionary Declaration public static TResult GetValueOrDefault<TKey, TValue, TResult>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue, TResult> resultSelector, TResult defaultValue) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue, TResult> resultSelector Function to select result. TResult defaultValue Default value. Returns Type Description TResult Value, associated with the key , or defaultValue if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. TResult Result type. | Improve this Doc View Source GetValueOrDefault<TKey, TValue, TResult>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, Func<TKey, TResult>) Returns value associated with key , or value returned by defaultValueFactory if key does not exists in dictionary Declaration public static TResult GetValueOrDefault<TKey, TValue, TResult>(this IDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue, TResult> resultSelector, Func<TKey, TResult> defaultValueFactory) Parameters Type Name Description System.Collections.Generic.IDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue, TResult> resultSelector Function to select result. System.Func <TKey, TResult> defaultValueFactory Function to return default value. Returns Type Description TResult Value, associated with the key , or value returned by defaultValueFactory if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. TResult Result type. | Improve this Doc View Source GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>) Returns value associated with key , or default value if key does not exists in dictionary Declaration public static TResult GetValueOrDefault<TKey, TValue, TResult>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue, TResult> resultSelector) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue, TResult> resultSelector Function to select result. Returns Type Description TResult Value, associated with the key , or default value if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. TResult Result type. | Improve this Doc View Source GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, TResult) Returns value associated with key , or defaultValue if key does not exists in dictionary Declaration public static TResult GetValueOrDefault<TKey, TValue, TResult>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue, TResult> resultSelector, TResult defaultValue) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue, TResult> resultSelector Function to select result. TResult defaultValue Default value. Returns Type Description TResult Value, associated with the key , or defaultValue if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. TResult Result type. | Improve this Doc View Source GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, Func<TKey, TResult>) Returns value associated with key , or value returned by defaultValueFactory if key does not exists in dictionary Declaration public static TResult GetValueOrDefault<TKey, TValue, TResult>(this IReadOnlyDictionary<TKey, TValue> dictionary, TKey key, Func<TKey, TValue, TResult> resultSelector, Func<TKey, TResult> defaultValueFactory) Parameters Type Name Description System.Collections.Generic.IReadOnlyDictionary <TKey, TValue> dictionary The dictionary. TKey key The key. System.Func <TKey, TValue, TResult> resultSelector Function to select result. System.Func <TKey, TResult> defaultValueFactory Function to return default value. Returns Type Description TResult Value, associated with the key , or value returned by defaultValueFactory if key does not exists in dictionary Type Parameters Name Description TKey The type of the key. TValue The type of the value. TResult Result type."
  },
  "api/main/CodeJam.Arithmetic.html": {
    "href": "api/main/CodeJam.Arithmetic.html",
    "title": "Namespace CodeJam.Arithmetic | CodeJam",
    "keywords": "Namespace CodeJam.Arithmetic Classes Operators<T> Callbacks for common arithmetic actions. Look at OperatorsPerformanceTest to see why. OperatorsFactory Helper class to emit operators logic"
  },
  "api/blocks/CodeJam.TableData.TableDataParser.html": {
    "href": "api/blocks/CodeJam.TableData.TableDataParser.html",
    "title": "Class TableDataParser | CodeJam",
    "keywords": "Class TableDataParser Contains methods for table data parsing. Inheritance System.Object TableDataParser Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.TableData Assembly : CodeJam.Blocks.dll Syntax public static class TableDataParser Methods | Improve this Doc View Source Parse(Parser, TextReader) Parses table data. Declaration public static IEnumerable<DataLine> Parse(this Parser parser, TextReader reader) Parameters Type Name Description Parser parser Instance of specific parser. System.IO.TextReader reader Text to parse Returns Type Description System.Collections.Generic.IEnumerable < DataLine > Enumeration of DataLine contained parsed data. | Improve this Doc View Source Parse(Parser, String) Parses table data. Declaration public static IEnumerable<DataLine> Parse(this Parser parser, string text) Parameters Type Name Description Parser parser Instance of specific parser. System.String text Text to parse Returns Type Description System.Collections.Generic.IEnumerable < DataLine > Enumeration of DataLine contained parsed data."
  },
  "api/blocks/CodeJam.Services.ServiceContainer.html": {
    "href": "api/blocks/CodeJam.Services.ServiceContainer.html",
    "title": "Class ServiceContainer | CodeJam",
    "keywords": "Class ServiceContainer Service container. Inheritance System.Object ServiceContainer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Services Assembly : CodeJam.Blocks.dll Syntax public class ServiceContainer : IServicePublisher, IServiceProvider, IDisposable Constructors | Improve this Doc View Source ServiceContainer(Boolean) Initializes a new instance of the System.Object class. Declaration public ServiceContainer(bool publishSelf = true) Parameters Type Name Description System.Boolean publishSelf if set to true container publish itself as IServicePublisher service. | Improve this Doc View Source ServiceContainer(IServiceProvider, Boolean) Initializes a new instance of the System.Object class. Declaration public ServiceContainer(IServiceProvider parentProvider, bool publishSelf = true) Parameters Type Name Description System.IServiceProvider parentProvider The parent provider. System.Boolean publishSelf if set to true container publish itself as IServicePublisher service. Methods | Improve this Doc View Source Dispose() Calls System.IDisposable.Dispose() methods in all created service instances, that implements System.IDisposable . Declaration public void Dispose() Implements System.IDisposable.Dispose() | Improve this Doc View Source GetService(Type) Gets the service object of the specified type. Declaration public object GetService(Type serviceType) Parameters Type Name Description System.Type serviceType An object that specifies the type of service object to get. Returns Type Description System.Object A service object of type serviceType .-or- null if there is no service object of type serviceType . Implements System.IServiceProvider.GetService(System.Type) | Improve this Doc View Source Publish(Type, Func<IServicePublisher, Object>) Publish service. Declaration public IDisposable Publish(Type serviceType, Func<IServicePublisher, object> instanceFactory) Parameters Type Name Description System.Type serviceType Type of service object to publish. System.Func < IServicePublisher , System.Object > instanceFactory Factory to create service instance Returns Type Description System.IDisposable Disposable cookie to conceal published service Implements IServicePublisher.Publish(Type, Func<IServicePublisher, Object>) | Improve this Doc View Source Publish(Type, Object) Publish service. Declaration public IDisposable Publish(Type serviceType, object serviceInstance) Parameters Type Name Description System.Type serviceType Type of service object to publish. System.Object serviceInstance Instance of service of type serviceType . Returns Type Description System.IDisposable Disposable cookie to conceal published service Implements IServicePublisher.Publish(Type, Object) Extension Methods Map.DeepCopy<T>(T) ServiceProviderHelper.GetRequiredService(IServiceProvider, Type) ServiceProviderHelper.GetService<T>(IServiceProvider) ServiceProviderHelper.GetRequiredService<T>(IServiceProvider) ServiceProviderHelper.Publish<T>(IServicePublisher, T) ServiceProviderHelper.Publish<T>(IServicePublisher, Func<IServicePublisher, T>)"
  },
  "api/blocks/CodeJam.Mapping.MapValue.html": {
    "href": "api/blocks/CodeJam.Mapping.MapValue.html",
    "title": "Class MapValue | CodeJam",
    "keywords": "Class MapValue Mapping value. Inheritance System.Object MapValue Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax public class MapValue Constructors | Improve this Doc View Source MapValue(Object, MapValueAttribute[]) Creates MapValue instance. Declaration public MapValue(object origValue, params MapValueAttribute[] mapValues) Parameters Type Name Description System.Object origValue Original value. MapValueAttribute [] mapValues Mapping value. Properties | Improve this Doc View Source MapValues Mapping value. Declaration public MapValueAttribute[] MapValues { get; } Property Value Type Description MapValueAttribute [] | Improve this Doc View Source OrigValue Original value. Declaration public object OrigValue { get; } Property Value Type Description System.Object Extension Methods Map.DeepCopy<T>(T)"
  },
  "api/blocks/CodeJam.Mapping.Converter.html": {
    "href": "api/blocks/CodeJam.Mapping.Converter.html",
    "title": "Class Converter | CodeJam",
    "keywords": "Class Converter Provides data convertion functionality. Inheritance System.Object Converter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax public static class Converter Methods | Improve this Doc View Source ChangeType(Object, Type, MappingSchema) Returns an object of a specified type whose value is equivalent to a specified object. Declaration public static object ChangeType(object value, Type conversionType, MappingSchema mappingSchema = null) Parameters Type Name Description System.Object value An object to convert. System.Type conversionType The type of object to return. MappingSchema mappingSchema A mapping schema that defines custom converters. Returns Type Description System.Object An object whose type is conversionType and whose value is equivalent to value . | Improve this Doc View Source ChangeTypeTo<T>(Object, MappingSchema) Returns an object of a specified type whose value is equivalent to a specified object. Declaration public static T ChangeTypeTo<T>(object value, MappingSchema mappingSchema = null) Parameters Type Name Description System.Object value An object to convert. MappingSchema mappingSchema A mapping schema that defines custom converters. Returns Type Description T An object whose type is conversionType and whose value is equivalent to value . Type Parameters Name Description T The type of object to return. | Improve this Doc View Source SetConverter<TFrom, TTo>(Expression<Func<TFrom, TTo>>) Adds a custom converter from TFrom to TTo types. Declaration public static void SetConverter<TFrom, TTo>(Expression<Func<TFrom, TTo>> expr) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TFrom, TTo>> expr Convert expression. Type Parameters Name Description TFrom Type to convert from. TTo Type to convert to."
  },
  "api/main/CodeJam.Strings.NaturalOrderStringComparer.html": {
    "href": "api/main/CodeJam.Strings.NaturalOrderStringComparer.html",
    "title": "Class NaturalOrderStringComparer | CodeJam",
    "keywords": "Class NaturalOrderStringComparer String comparisons using a \"natural order\" algorithm. Inheritance System.Object NaturalOrderStringComparer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Strings Assembly : CodeJam.dll Syntax public class NaturalOrderStringComparer : IComparer<string> Fields | Improve this Doc View Source Comparer Gets a NaturalOrderStringComparer object that performs a string comparison using a \"natural order\" algorithm. Declaration public static readonly NaturalOrderStringComparer Comparer Field Value Type Description NaturalOrderStringComparer A NaturalOrderStringComparer object that performs a string comparison using a \"natural order\" algorithm. | Improve this Doc View Source Comparison Gets a System.Comparison<T> delegate that performs a string comparison using a \"natural order\" algorithm. Declaration public static readonly Comparison<string> Comparison Field Value Type Description System.Comparison < System.String > A System.Comparison<T> delegate that performs a string comparison using a \"natural order\" algorithm. | Improve this Doc View Source IgnoreCaseComparer Gets a NaturalOrderStringComparer object that performs a case-insensitive string comparison using a \"natural order\" algorithm. Declaration public static readonly NaturalOrderStringComparer IgnoreCaseComparer Field Value Type Description NaturalOrderStringComparer A NaturalOrderStringComparer object that performs a case-insensitive string comparison using a \"natural order\" algorithm. | Improve this Doc View Source IgnoreCaseComparison Gets a System.Comparison<T> delegate that performs a case-insensitive string comparison using a \"natural order\" algorithm. Declaration public static readonly Comparison<string> IgnoreCaseComparison Field Value Type Description System.Comparison < System.String > A System.Comparison<T> delegate that performs a case-insensitive string comparison using a \"natural order\" algorithm. Methods | Improve this Doc View Source Compare(String, String) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration public static int Compare(string a, string b) Parameters Type Name Description System.String a The first object to compare. System.String b The second object to compare. Returns Type Description System.Int32 A signed integer that indicates the relative values of a and b , as shown in the following table. Value Meaning Less than zero a is less than b . Zero a equals b . Greater than zero a is greater than b . | Improve this Doc View Source Compare(String, String, Boolean) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration public static int Compare(string a, string b, bool ignoreCase) Parameters Type Name Description System.String a The first object to compare. System.String b The second object to compare. System.Boolean ignoreCase true to ignore case during the comparison; otherwise, false. Returns Type Description System.Int32 A signed integer that indicates the relative values of a and b , as shown in the following table. Value Meaning Less than zero a is less than b . Zero a equals b . Greater than zero a is greater than b . Explicit Interface Implementations | Improve this Doc View Source IComparer<String>.Compare(String, String) Compares two objects and returns a value indicating whether one is less than, equal to, or greater than the other. Declaration int IComparer<string>.Compare(string x, string y) Parameters Type Name Description System.String x The first object to compare. System.String y The second object to compare. Returns Type Description System.Int32 A signed integer that indicates the relative values of x and y , as shown in the following table. Value Meaning Less than zero x is less than y . Zero x equals y . Greater than zero x is greater than y . Implements System.Collections.Generic.IComparer<T>.Compare(T, T) Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Strings.CharExtensions.html": {
    "href": "api/main/CodeJam.Strings.CharExtensions.html",
    "title": "Class CharExtensions | CodeJam",
    "keywords": "Class CharExtensions System.Char structure extensions. Inheritance System.Object CharExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Strings Assembly : CodeJam.dll Syntax public static class CharExtensions Methods | Improve this Doc View Source IsControl(Char) Indicates whether a Unicode character is categorized as a control. Declaration public static bool IsControl(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a control; otherwise, false . | Improve this Doc View Source IsDigit(Char) Indicates whether a Unicode character is categorized as a digit. Declaration public static bool IsDigit(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a digit; otherwise, false . | Improve this Doc View Source IsHighSurrogate(Char) Indicates whether a Unicode character is categorized as a highsurrogate. Declaration public static bool IsHighSurrogate(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a highsurrogate; otherwise, false . | Improve this Doc View Source IsLetter(Char) Indicates whether a Unicode character is categorized as a letter. Declaration public static bool IsLetter(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a letter; otherwise, false . | Improve this Doc View Source IsLetterOrDigit(Char) Indicates whether a Unicode character is categorized as a letterordigit. Declaration public static bool IsLetterOrDigit(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a letterordigit; otherwise, false . | Improve this Doc View Source IsLower(Char) Indicates whether a Unicode character is categorized as a lower. Declaration public static bool IsLower(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a lower; otherwise, false . | Improve this Doc View Source IsLowSurrogate(Char) Indicates whether a Unicode character is categorized as a lowsurrogate. Declaration public static bool IsLowSurrogate(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a lowsurrogate; otherwise, false . | Improve this Doc View Source IsNumber(Char) Indicates whether a Unicode character is categorized as a number. Declaration public static bool IsNumber(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a number; otherwise, false . | Improve this Doc View Source IsPunctuation(Char) Indicates whether a Unicode character is categorized as a punctuation. Declaration public static bool IsPunctuation(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a punctuation; otherwise, false . | Improve this Doc View Source IsSeparator(Char) Indicates whether a Unicode character is categorized as a separator. Declaration public static bool IsSeparator(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a separator; otherwise, false . | Improve this Doc View Source IsSurrogate(Char) Indicates whether a Unicode character is categorized as a surrogate. Declaration public static bool IsSurrogate(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a surrogate; otherwise, false . | Improve this Doc View Source IsSymbol(Char) Indicates whether a Unicode character is categorized as a symbol. Declaration public static bool IsSymbol(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a symbol; otherwise, false . | Improve this Doc View Source IsUpper(Char) Indicates whether a Unicode character is categorized as a upper. Declaration public static bool IsUpper(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a upper; otherwise, false . | Improve this Doc View Source IsWhiteSpace(Char) Indicates whether a Unicode character is categorized as a whitespace. Declaration public static bool IsWhiteSpace(this char chr) Parameters Type Name Description System.Char chr The Unicode character to evaluate. Returns Type Description System.Boolean true if chr is a whitespace; otherwise, false . | Improve this Doc View Source ToLower(Char) Converts the value of a Unicode character to its lowercase equivalent. Declaration public static char ToLower(this char chr) Parameters Type Name Description System.Char chr The Unicode character to convert. Returns Type Description System.Char The lowercase equivalent of chr , or the unchanged value of chr , if chr is already lowercase or not alphabetic. | Improve this Doc View Source ToLower(Char, CultureInfo) Converts the value of a Unicode character to its lowercase equivalent. Declaration public static char ToLower(this char chr, CultureInfo culture) Parameters Type Name Description System.Char chr The Unicode character to convert. System.Globalization.CultureInfo culture An object that supplies culture-specific casing rules. Returns Type Description System.Char The lowercase equivalent of chr , modified according to culture , or the unchanged value of chr , if chr is already lowercase or not alphabetic. | Improve this Doc View Source ToLowerInvariant(Char) Converts the value of a Unicode character to its lowercase equivalent using the casing rules of the invariant culture. Declaration public static char ToLowerInvariant(this char chr) Parameters Type Name Description System.Char chr The Unicode character to convert. Returns Type Description System.Char The lowercase equivalent of chr , or the unchanged value of chr , if chr is already lowercase or not alphabetic. | Improve this Doc View Source ToUpper(Char) Converts the value of a Unicode character to its uppercase equivalent. Declaration public static char ToUpper(this char chr) Parameters Type Name Description System.Char chr The Unicode character to convert. Returns Type Description System.Char The uppercase equivalent of chr , or the unchanged value of chr , if chr is already uppercase or not alphabetic. | Improve this Doc View Source ToUpper(Char, CultureInfo) Converts the value of a Unicode character to its uppercase equivalent. Declaration public static char ToUpper(this char chr, CultureInfo culture) Parameters Type Name Description System.Char chr The Unicode character to convert. System.Globalization.CultureInfo culture An object that supplies culture-specific casing rules. Returns Type Description System.Char The uppercase equivalent of chr , modified according to culture , or the unchanged value of chr , if chr is already uppercase or not alphabetic. | Improve this Doc View Source ToUpperInvariant(Char) Converts the value of a Unicode character to its uppercase equivalent using the casing rules of the invariant culture. Declaration public static char ToUpperInvariant(this char chr) Parameters Type Name Description System.Char chr The Unicode character to convert. Returns Type Description System.Char The uppercase equivalent of chr , or the unchanged value of chr , if chr is already uppercase or not alphabetic."
  },
  "api/main/CodeJam.Ranges.RangeBoundaryToKind.html": {
    "href": "api/main/CodeJam.Ranges.RangeBoundaryToKind.html",
    "title": "Enum RangeBoundaryToKind | CodeJam",
    "keywords": "Enum RangeBoundaryToKind The kind of To range boundary. Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax public enum RangeBoundaryToKind : byte Fields Name Description Empty Empty, '∅'. Exclusive Less than value, '??,b)', x < b. Inclusive Less than or equal to, '??,b]', x <= b. Infinite PositiveInfinity, '??,+∞)', no To limit. Extension Methods EnumHelper.IsFlagSet<RangeBoundaryToKind>(RangeBoundaryToKind) EnumHelper.IsAnyFlagUnset<RangeBoundaryToKind>(RangeBoundaryToKind) EnumHelper.IsAnyFlagSet<RangeBoundaryToKind>(RangeBoundaryToKind) EnumHelper.IsFlagUnset<RangeBoundaryToKind>(RangeBoundaryToKind) EnumHelper.SetFlag<RangeBoundaryToKind>(RangeBoundaryToKind) EnumHelper.ClearFlag<RangeBoundaryToKind>(RangeBoundaryToKind) EnumHelper.SetFlag<RangeBoundaryToKind>(RangeBoundaryToKind, Boolean) NullableHelper.AsNullable<RangeBoundaryToKind>() RangeExtensions.Contains<T, RangeBoundaryToKind>(Range<T>) RangeExtensions.StartsAfter<T, RangeBoundaryToKind>(Range<T>) RangeExtensions.EndsBefore<T, RangeBoundaryToKind>(Range<T>) RangeExtensions.Contains<T, TKey, RangeBoundaryToKind>(Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, RangeBoundaryToKind>(Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, RangeBoundaryToKind>(Range<T, TKey>) StringExtensions.ToInvariantString<RangeBoundaryToKind>() StringExtensions.ToInvariantString<RangeBoundaryToKind>(String)"
  },
  "api/main/CodeJam.Ranges.RangeBoundaryTo-1.html": {
    "href": "api/main/CodeJam.Ranges.RangeBoundaryTo-1.html",
    "title": "Struct RangeBoundaryTo<T> | CodeJam",
    "keywords": "Struct RangeBoundaryTo<T> The To boundary of the range. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax [Serializable] public struct RangeBoundaryTo<T> : IEquatable<RangeBoundaryTo<T>>, IComparable<RangeBoundaryTo<T>>, IComparable<RangeBoundaryFrom<T>>, IComparable<T>, IComparable, IFormattable Type Parameters Name Description T The type of the value. Should implement System.IComparable<T> or System.IComparable . Remarks Heavy tuned to be as fast as it is possible. The order of borders is the following: '∅' < '+∞' < 'a)' < '[a' == 'a]' < '(a' < '-∞'. Constructors | Improve this Doc View Source RangeBoundaryTo(T, RangeBoundaryToKind) Creates a new range boundary. Declaration public RangeBoundaryTo(T value, RangeBoundaryToKind boundaryKind) Parameters Type Name Description T value The value of the boundary. Infinite (or empty) boundaries should use default(T) or PositiveInfinity(T) (if the type has one) as the value. RangeBoundaryToKind boundaryKind The kind of the boundary. Fields | Improve this Doc View Source Empty Empty range boundary, ∅. Declaration public static readonly RangeBoundaryTo<T> Empty Field Value Type Description RangeBoundaryTo <T> | Improve this Doc View Source PositiveInfinity Positive infinity, +∞. Declaration public static readonly RangeBoundaryTo<T> PositiveInfinity Field Value Type Description RangeBoundaryTo <T> Properties | Improve this Doc View Source HasValue The boundary has a value. Declaration public bool HasValue { get; } Property Value Type Description System.Boolean true if the boundary has a value; otherwise, false . | Improve this Doc View Source IsEmpty The boundary == ∅. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if the boundary is empty; otherwise, false . | Improve this Doc View Source IsExclusiveBoundary The boundary does not include the value. Declaration public bool IsExclusiveBoundary { get; } Property Value Type Description System.Boolean true if the boundary is exclusive boundary; otherwise, false . | Improve this Doc View Source IsInclusiveBoundary The boundary includes the value. Declaration public bool IsInclusiveBoundary { get; } Property Value Type Description System.Boolean true if the boundary is inclusive boundary; otherwise, false . | Improve this Doc View Source IsNotEmpty The boundary != ∅. Declaration public bool IsNotEmpty { get; } Property Value Type Description System.Boolean true if the boundary is not empty; otherwise, false . | Improve this Doc View Source IsPositiveInfinity The boundary == +∞. Declaration public bool IsPositiveInfinity { get; } Property Value Type Description System.Boolean true if the boundary is positive infinity; otherwise, false . | Improve this Doc View Source Kind The kind of the boundary. Declaration public RangeBoundaryToKind Kind { get; } Property Value Type Description RangeBoundaryToKind The kind of the boundary. | Improve this Doc View Source Value The value of the boundary. Declaration public T Value { get; } Property Value Type Description T The value of the boundary of System.InvalidOperationException if HasValue equals to false . Exceptions Type Condition System.InvalidOperationException Thrown if HasValue equals to false . Methods | Improve this Doc View Source CompareTo(T) Compares the current boundary with the value of another To boundary. Following order is used: '∅' < '+∞' < 'a)' < '[a' == 'a]' < '(a' < '-∞'. Declaration public int CompareTo(T other) Parameters Type Name Description T other Boundary value to compare with this. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has the following meanings: Less than zero This object is less than the other parameter. Zero This object is equal to other . Greater than zero This object is greater than other . Implements System.IComparable<T>.CompareTo(T) | Improve this Doc View Source CompareTo(RangeBoundaryFrom<T>) Compares the current boundary with another one. Following order is used: '∅' < '+∞' < 'a)' < '[a' == 'a]' < '(a' < '-∞'. Declaration public int CompareTo(RangeBoundaryFrom<T> other) Parameters Type Name Description RangeBoundaryFrom <T> other Boundary to compare with this. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has the following meanings: Less than zero This object is less than the other parameter. Zero This object is equal to other . Greater than zero This object is greater than other . Implements System.IComparable<T>.CompareTo(T) | Improve this Doc View Source CompareTo(RangeBoundaryTo<T>) Compares the current boundary with another one. Following order is used: '∅' < '+∞' < 'a)' < '[a' == 'a]' < '(a' < '-∞'. Declaration public int CompareTo(RangeBoundaryTo<T> other) Parameters Type Name Description RangeBoundaryTo <T> other Boundary to compare with this. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has the following meanings: Less than zero This object is less than the other parameter. Zero This object is equal to other . Greater than zero This object is greater than other . Implements System.IComparable<T>.CompareTo(T) | Improve this Doc View Source Equals(RangeBoundaryTo<T>) Indicates whether the current boundary is equal to another. Declaration public bool Equals(RangeBoundaryTo<T> other) Parameters Type Name Description RangeBoundaryTo <T> other The boundary to compare with this. Returns Type Description System.Boolean True if the current boundary is equal to the other parameter; otherwise, false. Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Indicates whether the current boundary and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with this. Returns Type Description System.Boolean True if obj and the current boundary are the same type and represent the same value; otherwise, false. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetComplementation() Returns complementation for the boundary. The conversions are: 'a]' -> '(a' '[a' -> 'a)' 'a)' -> '[a' '(a' -> 'a]' Empty or infinite boundaries will throw. Check the HasValue before calling the method. Declaration public RangeBoundaryFrom<T> GetComplementation() Returns Type Description RangeBoundaryFrom <T> Complementation for the boundary. | Improve this Doc View Source GetHashCode() Returns the hash code for the current boundary. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source GetValueOrDefault() The value of the boundary or the default(T) if HasValue property equals to false . Declaration public T GetValueOrDefault() Returns Type Description T he value of the boundary or default(T). | Improve this Doc View Source GetValueOrDefault(T) The value of the boundary or the defaultValue if HasValue property equals to false . Declaration public T GetValueOrDefault(T defaultValue) Parameters Type Name Description T defaultValue The default value. Returns Type Description T Value of the boundary or defaultValue . | Improve this Doc View Source IsComplementationFor(RangeBoundaryFrom<T>) Checks that the boundary is complementation for specified boundary. Declaration public bool IsComplementationFor(RangeBoundaryFrom<T> other) Parameters Type Name Description RangeBoundaryFrom <T> other Another boundary. Returns Type Description System.Boolean True , if the boundary is complementation for specified boundary. | Improve this Doc View Source ToExclusive() Creates a new boundary with exclusive boundary kind if the current boundary has a value. The original boundary is returned otherwise. Declaration public RangeBoundaryTo<T> ToExclusive() Returns Type Description RangeBoundaryTo <T> Range boundary with exclusive boundary kind or the original one if the boundary has no value. | Improve this Doc View Source ToInclusive() Creates a new boundary with inclusive boundary kind if the current boundary has a value. The original boundary is returned otherwise. Declaration public RangeBoundaryTo<T> ToInclusive() Returns Type Description RangeBoundaryTo <T> Range boundary with inclusive boundary kind or the original one if the boundary has no value. | Improve this Doc View Source ToString() Returns string representation of the boundary. Declaration public override string ToString() Returns Type Description System.String The string representation of the boundary. Overrides System.ValueType.ToString() | Improve this Doc View Source ToString(String) Returns string representation of the boundary using the specified format string. If T does not implement System.IFormattable the format string is ignored Declaration public string ToString(string format) Parameters Type Name Description System.String format The format string Returns Type Description System.String The string representation of the boundary. | Improve this Doc View Source ToString(String, IFormatProvider) Returns string representation of the boundary using the specified format string. If T does not implement System.IFormattable the format string is ignored Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format string System.IFormatProvider formatProvider The format provider Returns Type Description System.String The string representation of the boundary. Implements System.IFormattable.ToString(System.String, System.IFormatProvider) | Improve this Doc View Source WithValue(Func<T, T>) Creates a new boundary with updated value (if the current boundary has one). If the boundary has no value the method returns the boundary unchanged. Declaration public RangeBoundaryTo<T> WithValue(Func<T, T> newValueSelector) Parameters Type Name Description System.Func <T, T> newValueSelector Callback to obtain a new value for the boundary. Used if the boundary has a value. Returns Type Description RangeBoundaryTo <T> Range boundary with the same kind but with a new value (if the current boundary has one). | Improve this Doc View Source WithValue<T2>(Func<T, T2>) Creates a new boundary with updated value (if the current boundary has one). If the boundary has no value the method returns the boundary unchanged. Declaration public RangeBoundaryTo<T2> WithValue<T2>(Func<T, T2> newValueSelector) Parameters Type Name Description System.Func <T, T2> newValueSelector Callback to obtain a new value for the boundary. Used if the boundary has a value. Returns Type Description RangeBoundaryTo <T2> Range boundary with the same kind but with a new value (if the current boundary has one). Type Parameters Name Description T2 The new type of the range value Operators | Improve this Doc View Source Equality(RangeBoundaryTo<T>, RangeBoundaryTo<T>) Implements the operator ==. Declaration public static bool operator ==(RangeBoundaryTo<T> boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 == boundary2. | Improve this Doc View Source GreaterThan(T, RangeBoundaryTo<T>) Implements the operator >. Declaration public static bool operator>(T boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description T boundary1 The value of the boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 > boundary2. | Improve this Doc View Source GreaterThan(RangeBoundaryTo<T>, T) Implements the operator >. Declaration public static bool operator>(RangeBoundaryTo<T> boundary1, T boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. T boundary2 The value of the boundary2. Returns Type Description System.Boolean True , if boundary1 > boundary2. | Improve this Doc View Source GreaterThan(RangeBoundaryTo<T>, RangeBoundaryFrom<T>) Implements the operator >. Declaration public static bool operator>(RangeBoundaryTo<T> boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 > boundary2. | Improve this Doc View Source GreaterThan(RangeBoundaryTo<T>, RangeBoundaryTo<T>) Implements the operator >. Declaration public static bool operator>(RangeBoundaryTo<T> boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 > boundary2. | Improve this Doc View Source GreaterThanOrEqual(T, RangeBoundaryTo<T>) Implements the operator >=. Declaration public static bool operator >=(T boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description T boundary1 The value of the boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 >= boundary2. | Improve this Doc View Source GreaterThanOrEqual(RangeBoundaryTo<T>, T) Implements the operator >=. Declaration public static bool operator >=(RangeBoundaryTo<T> boundary1, T boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. T boundary2 The value of the boundary2. Returns Type Description System.Boolean True , if boundary1 >= boundary2. | Improve this Doc View Source GreaterThanOrEqual(RangeBoundaryTo<T>, RangeBoundaryFrom<T>) Implements the operator >=. Declaration public static bool operator >=(RangeBoundaryTo<T> boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 >= boundary2. | Improve this Doc View Source GreaterThanOrEqual(RangeBoundaryTo<T>, RangeBoundaryTo<T>) Implements the operator >=. Declaration public static bool operator >=(RangeBoundaryTo<T> boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 >= boundary2. | Improve this Doc View Source Inequality(RangeBoundaryTo<T>, RangeBoundaryTo<T>) Implements the operator !=. Declaration public static bool operator !=(RangeBoundaryTo<T> boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 != boundary2. | Improve this Doc View Source LessThan(T, RangeBoundaryTo<T>) Implements the operator <. Declaration public static bool operator <(T boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description T boundary1 The value of the boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 < boundary2. | Improve this Doc View Source LessThan(RangeBoundaryTo<T>, T) Implements the operator <. Declaration public static bool operator <(RangeBoundaryTo<T> boundary1, T boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. T boundary2 The value of the boundary2. Returns Type Description System.Boolean True , if boundary1 < boundary2. | Improve this Doc View Source LessThan(RangeBoundaryTo<T>, RangeBoundaryFrom<T>) Implements the operator <. Declaration public static bool operator <(RangeBoundaryTo<T> boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 < boundary2. | Improve this Doc View Source LessThan(RangeBoundaryTo<T>, RangeBoundaryTo<T>) Implements the operator <. Declaration public static bool operator <(RangeBoundaryTo<T> boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 < boundary2. | Improve this Doc View Source LessThanOrEqual(T, RangeBoundaryTo<T>) Implements the operator <=. Declaration public static bool operator <=(T boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description T boundary1 The value of the boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 <= boundary2. | Improve this Doc View Source LessThanOrEqual(RangeBoundaryTo<T>, T) Implements the operator <=. Declaration public static bool operator <=(RangeBoundaryTo<T> boundary1, T boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. T boundary2 The value of the boundary2. Returns Type Description System.Boolean True , if boundary1 <= boundary2. | Improve this Doc View Source LessThanOrEqual(RangeBoundaryTo<T>, RangeBoundaryFrom<T>) Implements the operator <=. Declaration public static bool operator <=(RangeBoundaryTo<T> boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 <= boundary2. | Improve this Doc View Source LessThanOrEqual(RangeBoundaryTo<T>, RangeBoundaryTo<T>) Implements the operator <=. Declaration public static bool operator <=(RangeBoundaryTo<T> boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description RangeBoundaryTo <T> boundary1 The boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 <= boundary2. Explicit Interface Implementations | Improve this Doc View Source IComparable.CompareTo(Object) Compares the current boundary with the boundary or with the value of another boundary of the same kind. Following order is used: '∅' < '+∞' < 'a)' < '[a' == 'a]' < '(a' < '-∞'. Declaration int IComparable.CompareTo(object obj) Parameters Type Name Description System.Object obj An object to compare with this object. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has the following meanings: Less than zero This object is less than the obj parameter. Zero This object is equal to obj . Greater than zero This object is greater than obj . Implements System.IComparable.CompareTo(System.Object) Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.ToInvariantString<T>(T) StringExtensions.ToInvariantString<T>(T, String)"
  },
  "api/main/CodeJam.Option-1.Some.html": {
    "href": "api/main/CodeJam.Option-1.Some.html",
    "title": "Class Option<T>.Some | CodeJam",
    "keywords": "Class Option<T>.Some Represents an Option with value. Inheritance System.Object Option <T> Option<T>.Some Inherited Members Option<T>.HasValue Option<T>.IsSome Option<T>.IsNone Option<T>.Equals(Option<T>) Option<T>.Equals(Object) Option<T>.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public sealed class Some : Option<T>, IOption<T>, IEquatable<Option<T>> Constructors | Improve this Doc View Source Some(T) Initializes a new instance to the specified value. Declaration public Some(T value) Parameters Type Name Description T value The value. Properties | Improve this Doc View Source Value Gets the value of the current object. Declaration public T Value { get; } Property Value Type Description T Methods | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Overrides Option<T>.GetHashCode() Extension Methods Option.Do<T>(IOption<T>, Action<IOption<T>>, Action) Option.GetValueOrDefault<T, TResult>(IOption<T>, Func<IOption<T>, TResult>, Func<TResult>) Option.GetValueOrDefault<T>(IOption<T>, T) Option.With<T, TResult>(Option<T>, Func<T, TResult>) Option.With<T, TResult>(Option<T>, Func<T, TResult>, TResult) Option.With<T, TResult>(Option<T>, Func<T, TResult>, Func<TResult>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Option-1.None.html": {
    "href": "api/main/CodeJam.Option-1.None.html",
    "title": "Class Option<T>.None | CodeJam",
    "keywords": "Class Option<T>.None Represents an Option without value. Inheritance System.Object Option <T> Option<T>.None Inherited Members Option<T>.HasValue Option<T>.IsSome Option<T>.IsNone Option<T>.Value Option<T>.Equals(Option<T>) Option<T>.Equals(Object) Option<T>.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public sealed class None : Option<T>, IOption<T>, IEquatable<Option<T>> Methods | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Overrides Option<T>.GetHashCode() Extension Methods Option.Do<T>(IOption<T>, Action<IOption<T>>, Action) Option.GetValueOrDefault<T, TResult>(IOption<T>, Func<IOption<T>, TResult>, Func<TResult>) Option.GetValueOrDefault<T>(IOption<T>, T) Option.With<T, TResult>(Option<T>, Func<T, TResult>) Option.With<T, TResult>(Option<T>, Func<T, TResult>, TResult) Option.With<T, TResult>(Option<T>, Func<T, TResult>, Func<TResult>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.IOneOf-5.html": {
    "href": "api/main/CodeJam.IOneOf-5.html",
    "title": "Interface IOneOf<T1, T2, T3, T4, T5> | CodeJam",
    "keywords": "Interface IOneOf<T1, T2, T3, T4, T5> Common interface for OneOf<T1, T2, T3, T4, T5> and ValueOneOf<T1, T2, T3, T4, T5> . Namespace : CodeJam Assembly : CodeJam.dll Syntax public interface IOneOf<T1, T2, T3, T4, T5> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 T5 Type of case 5 Properties | Improve this Doc View Source IsCase1 Returns true if class contains value of type T1 . Declaration bool IsCase1 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase2 Returns true if class contains value of type T2 . Declaration bool IsCase2 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase3 Returns true if class contains value of type T3 . Declaration bool IsCase3 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase4 Returns true if class contains value of type T4 . Declaration bool IsCase4 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase5 Returns true if class contains value of type T5 . Declaration bool IsCase5 { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>) Calls action for actual type argument. Declaration void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action, Action<T5> case5Action) Parameters Type Name Description System.Action <T1> case1Action Action for T1 System.Action <T2> case2Action Action for T2 System.Action <T3> case3Action Action for T3 System.Action <T4> case4Action Action for T4 System.Action <T5> case5Action Action for T5 | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>) Calls func for actual type argument and returns calculated value. Declaration TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector, Func<T5, TResult> case5Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector Calculation function for T1 System.Func <T2, TResult> case2Selector Calculation function for T2 System.Func <T3, TResult> case3Selector Calculation function for T3 System.Func <T4, TResult> case4Selector Calculation function for T4 System.Func <T5, TResult> case5Selector Calculation function for T5 Returns Type Description TResult Calculated value. Type Parameters Name Description TResult Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.IOneOf-4.html": {
    "href": "api/main/CodeJam.IOneOf-4.html",
    "title": "Interface IOneOf<T1, T2, T3, T4> | CodeJam",
    "keywords": "Interface IOneOf<T1, T2, T3, T4> Common interface for OneOf<T1, T2, T3, T4> and ValueOneOf<T1, T2, T3, T4> . Namespace : CodeJam Assembly : CodeJam.dll Syntax public interface IOneOf<T1, T2, T3, T4> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 Properties | Improve this Doc View Source IsCase1 Returns true if class contains value of type T1 . Declaration bool IsCase1 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase2 Returns true if class contains value of type T2 . Declaration bool IsCase2 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase3 Returns true if class contains value of type T3 . Declaration bool IsCase3 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase4 Returns true if class contains value of type T4 . Declaration bool IsCase4 { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>) Calls action for actual type argument. Declaration void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action) Parameters Type Name Description System.Action <T1> case1Action Action for T1 System.Action <T2> case2Action Action for T2 System.Action <T3> case3Action Action for T3 System.Action <T4> case4Action Action for T4 | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>) Calls func for actual type argument and returns calculated value. Declaration TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector Calculation function for T1 System.Func <T2, TResult> case2Selector Calculation function for T2 System.Func <T3, TResult> case3Selector Calculation function for T3 System.Func <T4, TResult> case4Selector Calculation function for T4 Returns Type Description TResult Calculated value. Type Parameters Name Description TResult Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.HashCode.html": {
    "href": "api/main/CodeJam.HashCode.html",
    "title": "Class HashCode | CodeJam",
    "keywords": "Class HashCode Hash code helper methods. Inheritance System.Object HashCode Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class HashCode Methods | Improve this Doc View Source Combine(Int32, Int32) Combines hash codes. Declaration public static int Combine(int h1, int h2) Parameters Type Name Description System.Int32 h1 Hash code 1 System.Int32 h2 Hash code 2 Returns Type Description System.Int32 Combined hash code | Improve this Doc View Source Combine(Int32, Int32, Int32) Combines hash codes. Declaration public static int Combine(int h1, int h2, int h3) Parameters Type Name Description System.Int32 h1 Hash code 1 System.Int32 h2 Hash code 2 System.Int32 h3 Hash code 3 Returns Type Description System.Int32 Combined hash code | Improve this Doc View Source Combine(Int32, Int32, Int32, Int32) Combines hash codes. Declaration public static int Combine(int h1, int h2, int h3, int h4) Parameters Type Name Description System.Int32 h1 Hash code 1 System.Int32 h2 Hash code 2 System.Int32 h3 Hash code 3 System.Int32 h4 Hash code 4 Returns Type Description System.Int32 Combined hash code | Improve this Doc View Source Combine(Int32, Int32, Int32, Int32, Int32) Combines hash codes. Declaration public static int Combine(int h1, int h2, int h3, int h4, int h5) Parameters Type Name Description System.Int32 h1 Hash code 1 System.Int32 h2 Hash code 2 System.Int32 h3 Hash code 3 System.Int32 h4 Hash code 4 System.Int32 h5 Hash code 5 Returns Type Description System.Int32 Combined hash code | Improve this Doc View Source Combine(Int32, Int32, Int32, Int32, Int32, Int32) Combines hash codes. Declaration public static int Combine(int h1, int h2, int h3, int h4, int h5, int h6) Parameters Type Name Description System.Int32 h1 Hash code 1 System.Int32 h2 Hash code 2 System.Int32 h3 Hash code 3 System.Int32 h4 Hash code 4 System.Int32 h5 Hash code 5 System.Int32 h6 Hash code 6 Returns Type Description System.Int32 Combined hash code | Improve this Doc View Source Combine(Int32, Int32, Int32, Int32, Int32, Int32, Int32) Combines hash codes. Declaration public static int Combine(int h1, int h2, int h3, int h4, int h5, int h6, int h7) Parameters Type Name Description System.Int32 h1 Hash code 1 System.Int32 h2 Hash code 2 System.Int32 h3 Hash code 3 System.Int32 h4 Hash code 4 System.Int32 h5 Hash code 5 System.Int32 h6 Hash code 6 System.Int32 h7 Hash code 7 Returns Type Description System.Int32 Combined hash code | Improve this Doc View Source Combine(Int32, Int32, Int32, Int32, Int32, Int32, Int32, Int32) Combines hash codes. Declaration public static int Combine(int h1, int h2, int h3, int h4, int h5, int h6, int h7, int h8) Parameters Type Name Description System.Int32 h1 Hash code 1 System.Int32 h2 Hash code 2 System.Int32 h3 Hash code 3 System.Int32 h4 Hash code 4 System.Int32 h5 Hash code 5 System.Int32 h6 Hash code 6 System.Int32 h7 Hash code 7 System.Int32 h8 Hash code 8 Returns Type Description System.Int32 Combined hash code | Improve this Doc View Source CombineValues<T>(T[]) Combines hash codes. Declaration public static int CombineValues<T>(params T[] values) Parameters Type Name Description T[] values The collection to combine hash codes. Returns Type Description System.Int32 Combined hash code. Type Parameters Name Description T | Improve this Doc View Source CombineValues<T>(IEnumerable<T>) Combines hash codes. Declaration public static int CombineValues<T>(IEnumerable<T> values) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> values The sequence to combine hash codes. Returns Type Description System.Int32 Combined hash code. Type Parameters Name Description T"
  },
  "api/main/CodeJam.Fn.html": {
    "href": "api/main/CodeJam.Fn.html",
    "title": "Class Fn | CodeJam",
    "keywords": "Class Fn Helper methods for Func<TResult>(Func<TResult>) and Action(Action) delegates. Inheritance System.Object Fn Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class Fn Fields | Improve this Doc View Source False Gets the function that always returns false. Declaration public static readonly Func<bool> False Field Value Type Description System.Func < System.Boolean > | Improve this Doc View Source True Gets the function that always returns true. Declaration public static readonly Func<bool> True Field Value Type Description System.Func < System.Boolean > Methods | Improve this Doc View Source Action(Action) Helper for type inference from the lambda callback. Declaration public static Action Action(Action action) Parameters Type Name Description System.Action action The lambda callback. Returns Type Description System.Action The lambda callback passed. | Improve this Doc View Source Action<T1>(Action<T1>) Helper for type inference from the lambda callback. Declaration public static Action<T1> Action<T1>(Action<T1> action) Parameters Type Name Description System.Action <T1> action The lambda callback. Returns Type Description System.Action <T1> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. | Improve this Doc View Source Action<T1, T2>(Action<T1, T2>) Helper for type inference from the lambda callback. Declaration public static Action<T1, T2> Action<T1, T2>(Action<T1, T2> action) Parameters Type Name Description System.Action <T1, T2> action The lambda callback. Returns Type Description System.Action <T1, T2> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. | Improve this Doc View Source Action<T1, T2, T3>(Action<T1, T2, T3>) Helper for type inference from the lambda callback. Declaration public static Action<T1, T2, T3> Action<T1, T2, T3>(Action<T1, T2, T3> action) Parameters Type Name Description System.Action <T1, T2, T3> action The lambda callback. Returns Type Description System.Action <T1, T2, T3> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. | Improve this Doc View Source Action<T1, T2, T3, T4>(Action<T1, T2, T3, T4>) Helper for type inference from the lambda callback. Declaration public static Action<T1, T2, T3, T4> Action<T1, T2, T3, T4>(Action<T1, T2, T3, T4> action) Parameters Type Name Description System.Action <T1, T2, T3, T4> action The lambda callback. Returns Type Description System.Action <T1, T2, T3, T4> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. | Improve this Doc View Source Action<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5>) Helper for type inference from the lambda callback. Declaration public static Action<T1, T2, T3, T4, T5> Action<T1, T2, T3, T4, T5>(Action<T1, T2, T3, T4, T5> action) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5> action The lambda callback. Returns Type Description System.Action <T1, T2, T3, T4, T5> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. T5 The type of argument #5. | Improve this Doc View Source Action<T1, T2, T3, T4, T5, T6>(Action<T1, T2, T3, T4, T5, T6>) Helper for type inference from the lambda callback. Declaration public static Action<T1, T2, T3, T4, T5, T6> Action<T1, T2, T3, T4, T5, T6>(Action<T1, T2, T3, T4, T5, T6> action) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6> action The lambda callback. Returns Type Description System.Action <T1, T2, T3, T4, T5, T6> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. T5 The type of argument #5. T6 The type of argument #6. | Improve this Doc View Source Action<T1, T2, T3, T4, T5, T6, T7>(Action<T1, T2, T3, T4, T5, T6, T7>) Helper for type inference from the lambda callback. Declaration public static Action<T1, T2, T3, T4, T5, T6, T7> Action<T1, T2, T3, T4, T5, T6, T7>(Action<T1, T2, T3, T4, T5, T6, T7> action) Parameters Type Name Description System.Action <T1, T2, T3, T4, T5, T6, T7> action The lambda callback. Returns Type Description System.Action <T1, T2, T3, T4, T5, T6, T7> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. T5 The type of argument #5. T6 The type of argument #6. T7 The type of argument #7. | Improve this Doc View Source Func<TResult>(Func<TResult>) Helper for type inference from the lambda callback. Declaration public static Func<TResult> Func<TResult>(Func<TResult> func) Parameters Type Name Description System.Func <TResult> func The lambda callback. Returns Type Description System.Func <TResult> The lambda callback passed. Type Parameters Name Description TResult The result type. | Improve this Doc View Source Func<T1, TResult>(Func<T1, TResult>) Helper for type inference from the lambda callback. Declaration public static Func<T1, TResult> Func<T1, TResult>(Func<T1, TResult> func) Parameters Type Name Description System.Func <T1, TResult> func The lambda callback. Returns Type Description System.Func <T1, TResult> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. TResult The result type. | Improve this Doc View Source Func<T1, T2, TResult>(Func<T1, T2, TResult>) Helper for type inference from the lambda callback. Declaration public static Func<T1, T2, TResult> Func<T1, T2, TResult>(Func<T1, T2, TResult> func) Parameters Type Name Description System.Func <T1, T2, TResult> func The lambda callback. Returns Type Description System.Func <T1, T2, TResult> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. TResult The result type. | Improve this Doc View Source Func<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult>) Helper for type inference from the lambda callback. Declaration public static Func<T1, T2, T3, TResult> Func<T1, T2, T3, TResult>(Func<T1, T2, T3, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, TResult> func The lambda callback. Returns Type Description System.Func <T1, T2, T3, TResult> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. TResult The result type. | Improve this Doc View Source Func<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult>) Helper for type inference from the lambda callback. Declaration public static Func<T1, T2, T3, T4, TResult> Func<T1, T2, T3, T4, TResult>(Func<T1, T2, T3, T4, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, TResult> func The lambda callback. Returns Type Description System.Func <T1, T2, T3, T4, TResult> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. TResult The result type. | Improve this Doc View Source Func<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult>) Helper for type inference from the lambda callback. Declaration public static Func<T1, T2, T3, T4, T5, TResult> Func<T1, T2, T3, T4, T5, TResult>(Func<T1, T2, T3, T4, T5, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, TResult> func The lambda callback. Returns Type Description System.Func <T1, T2, T3, T4, T5, TResult> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. T5 The type of argument #5. TResult The result type. | Improve this Doc View Source Func<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult>) Helper for type inference from the lambda callback. Declaration public static Func<T1, T2, T3, T4, T5, T6, TResult> Func<T1, T2, T3, T4, T5, T6, TResult>(Func<T1, T2, T3, T4, T5, T6, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, TResult> func The lambda callback. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, TResult> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. T5 The type of argument #5. T6 The type of argument #6. TResult The result type. | Improve this Doc View Source Func<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult>) Helper for type inference from the lambda callback. Declaration public static Func<T1, T2, T3, T4, T5, T6, T7, TResult> Func<T1, T2, T3, T4, T5, T6, T7, TResult>(Func<T1, T2, T3, T4, T5, T6, T7, TResult> func) Parameters Type Name Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> func The lambda callback. Returns Type Description System.Func <T1, T2, T3, T4, T5, T6, T7, TResult> The lambda callback passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. T5 The type of argument #5. T6 The type of argument #6. T7 The type of argument #7. TResult The result type."
  },
  "api/main/CodeJam.ExceptionExtensions.html": {
    "href": "api/main/CodeJam.ExceptionExtensions.html",
    "title": "Class ExceptionExtensions | CodeJam",
    "keywords": "Class ExceptionExtensions The System.Exception class extensions. Inheritance System.Object ExceptionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class ExceptionExtensions Methods | Improve this Doc View Source ToDiagnosticString(Exception) Returns detailed exception text. Declaration public static string ToDiagnosticString(this Exception exception) Parameters Type Name Description System.Exception exception Exception to process. Returns Type Description System.String Detailed exception text. | Improve this Doc View Source ToDiagnosticString(Exception, StringBuilder) Returns detailed exception text. Declaration public static StringBuilder ToDiagnosticString(this Exception exception, StringBuilder stringBuilder) Parameters Type Name Description System.Exception exception Exception to process. System.Text.StringBuilder stringBuilder System.Text.StringBuilder instance. Returns Type Description System.Text.StringBuilder Detailed exception text."
  },
  "api/main/CodeJam.Collections.SuffixTreeBase.html": {
    "href": "api/main/CodeJam.Collections.SuffixTreeBase.html",
    "title": "Class SuffixTreeBase | CodeJam",
    "keywords": "Class SuffixTreeBase Base class for suffix tree algorithm implementation. Inheritance System.Object SuffixTreeBase SuffixTree Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public abstract class SuffixTreeBase Constructors | Improve this Doc View Source SuffixTreeBase() Constructs a base for a suffix tree Declaration protected SuffixTreeBase() Fields | Improve this Doc View Source RootNodeIndex Root node index Declaration protected const int RootNodeIndex = 0 Field Value Type Description System.Int32 Properties | Improve this Doc View Source EdgeComparer The comparer to compare edges of a node against a char Declaration protected Func<int, char, int> EdgeComparer { get; } Property Value Type Description System.Func < System.Int32 , System.Char , System.Int32 > | Improve this Doc View Source InternalData Concatenated input strings Declaration protected string InternalData { get; } Property Value Type Description System.String | Improve this Doc View Source NodesCount Number of nodes Declaration protected int NodesCount { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Root The root node Declaration protected SuffixTreeBase.Node Root { get; } Property Value Type Description SuffixTreeBase.Node | Improve this Doc View Source StringLocations List of locatons of added strings inside the InternalData Declaration protected List<> StringLocations { get; } Property Value Type Description System.Collections.Generic.List < System. > Methods | Improve this Doc View Source Add(String) Adds a new string to the tree Declaration public void Add(string data) Parameters Type Name Description System.String data The string to add The last string character should be unique among all added strings | Improve this Doc View Source AddNode(SuffixTreeBase.Node) Adds a new node Declaration protected int AddNode(SuffixTreeBase.Node node) Parameters Type Name Description SuffixTreeBase.Node node A node to add Returns Type Description System.Int32 Index of the node | Improve this Doc View Source All() Enumerates all suffixes in the suffix tree Declaration public IEnumerable<Suffix> All() Returns Type Description System.Collections.Generic.IEnumerable < Suffix > The enumeration of all suffixes in lexicographical order Remarks May return suffixes with the same value of the they are present in different source strings | Improve this Doc View Source AppendNodeText(StringBuilder, Int32) Prints a single node information Declaration protected virtual void AppendNodeText(StringBuilder sb, int nodeIndex) Parameters Type Name Description System.Text.StringBuilder sb The builder to print to System.Int32 nodeIndex The node index | Improve this Doc View Source BuildFor(Int32, Int32) Appends suffixes for the last added string Declaration protected abstract void BuildFor(int begin, int end) Parameters Type Name Description System.Int32 begin System.Int32 end | Improve this Doc View Source Contains(String) Checks wether the suffix tree contains the given substring or not Declaration public bool Contains(string substring) Parameters Type Name Description System.String substring The substring to locate Returns Type Description System.Boolean true if found, false otherwise | Improve this Doc View Source ContainsSuffix(String) Checks wether the suffix tree contains the given suffix or not Declaration public bool ContainsSuffix(string suffix) Parameters Type Name Description System.String suffix The suffix to locate Returns Type Description System.Boolean true if found, false otherwise | Improve this Doc View Source GetNode(Int32) Gets a node at the index Declaration protected SuffixTreeBase.Node GetNode(int index) Parameters Type Name Description System.Int32 index The index of the node Returns Type Description SuffixTreeBase.Node The node | Improve this Doc View Source Print() Prints the tree structure to the string for the debugging purposes Declaration public string Print() Returns Type Description System.String The tree structure as a string | Improve this Doc View Source StartingWith(String) Enumerates all suffixes starting with the given prefix Declaration public IEnumerable<Suffix> StartingWith(string prefix) Parameters Type Name Description System.String prefix The prefix to find Returns Type Description System.Collections.Generic.IEnumerable < Suffix > The enumeration of all suffixes with the given prefix in lexicographical order | Improve this Doc View Source UpdateNode(Int32, SuffixTreeBase.Node) Updates the node at the index Declaration protected void UpdateNode(int index, SuffixTreeBase.Node node) Parameters Type Name Description System.Int32 index The index to update SuffixTreeBase.Node node The new node value Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Collections.OwnedCollection-2.html": {
    "href": "api/main/CodeJam.Collections.OwnedCollection-2.html",
    "title": "Class OwnedCollection<TOwner, TItem> | CodeJam",
    "keywords": "Class OwnedCollection<TOwner, TItem> Collection type that allows to associate collection items with the owner. Inheritance System.Object System.Collections.ObjectModel.Collection <TItem> OwnedCollectionBase <TOwner, TItem> OwnedCollection<TOwner, TItem> Inherited Members OwnedCollectionBase<TOwner, TItem>.Owner OwnedCollectionBase<TOwner, TItem>.GetOwner(TItem) OwnedCollectionBase<TOwner, TItem>.SetOwner(TItem, TOwner) OwnedCollectionBase<TOwner, TItem>.ClearItems() OwnedCollectionBase<TOwner, TItem>.InsertItem(Int32, TItem) OwnedCollectionBase<TOwner, TItem>.RemoveItem(Int32) OwnedCollectionBase<TOwner, TItem>.SetItem(Int32, TItem) System.Collections.ObjectModel.Collection<TItem>.Add(TItem) System.Collections.ObjectModel.Collection<TItem>.Clear() System.Collections.ObjectModel.Collection<TItem>.CopyTo(TItem[], System.Int32) System.Collections.ObjectModel.Collection<TItem>.Contains(TItem) System.Collections.ObjectModel.Collection<TItem>.GetEnumerator() System.Collections.ObjectModel.Collection<TItem>.IndexOf(TItem) System.Collections.ObjectModel.Collection<TItem>.Insert(System.Int32, TItem) System.Collections.ObjectModel.Collection<TItem>.Remove(TItem) System.Collections.ObjectModel.Collection<TItem>.RemoveAt(System.Int32) System.Collections.ObjectModel.Collection<TItem>.ClearItems() System.Collections.ObjectModel.Collection<TItem>.InsertItem(System.Int32, TItem) System.Collections.ObjectModel.Collection<TItem>.RemoveItem(System.Int32) System.Collections.ObjectModel.Collection<TItem>.SetItem(System.Int32, TItem) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.Collection<TItem>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Add(System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Contains(System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.IndexOf(System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Remove(System.Object) System.Collections.ObjectModel.Collection<TItem>.Count System.Collections.ObjectModel.Collection<TItem>.Items System.Collections.ObjectModel.Collection<TItem>.Item[System.Int32] System.Collections.ObjectModel.Collection<TItem>.System.Collections.Generic.ICollection<TItem>.IsReadOnly System.Collections.ObjectModel.Collection<TItem>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.Collection<TItem>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Item[System.Int32] System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.IsReadOnly System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.IsFixedSize System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public class OwnedCollection<TOwner, TItem> : OwnedCollectionBase<TOwner, TItem>, IList<TItem>, ICollection<TItem>, IList, ICollection, IReadOnlyList<TItem>, IReadOnlyCollection<TItem>, IEnumerable<TItem>, IEnumerable where TOwner : class where TItem : class Type Parameters Name Description TOwner The type of the owner. TItem The type of the item. Constructors | Improve this Doc View Source OwnedCollection(TOwner, Func<TItem, TOwner>, Action<TItem, TOwner>) Initializes a new instance of the OwnedCollection<TOwner, TItem> class. Declaration public OwnedCollection(TOwner owner, Func<TItem, TOwner> ownerGetter, Action<TItem, TOwner> ownerSetter) Parameters Type Name Description TOwner owner The owner for the collection. System.Func <TItem, TOwner> ownerGetter Owner getter for the item. System.Action <TItem, TOwner> ownerSetter Owner setter for the item. Methods | Improve this Doc View Source GetOwner(TItem) Gets the owner of the item. Declaration protected override TOwner GetOwner(TItem item) Parameters Type Name Description TItem item The item. Returns Type Description TOwner Owner of the item. Overrides CodeJam.Collections.OwnedCollectionBase<TOwner, TItem>.GetOwner(TItem) | Improve this Doc View Source SetOwner(TItem, TOwner) Sets the owner of the item. Declaration protected override void SetOwner(TItem item, TOwner owner) Parameters Type Name Description TItem item The item. TOwner owner The owner of the item. Overrides CodeJam.Collections.OwnedCollectionBase<TOwner, TItem>.SetOwner(TItem, TOwner) Extension Methods Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Algorithms.PartitionPoint<T>(IList<T>, Predicate<T>) Algorithms.PartitionPoint<T>(IList<T>, Int32, Predicate<T>) Algorithms.PartitionPoint<T>(IList<T>, Int32, Int32, Predicate<T>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, TSource) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, TAccumulate) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, TResult) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, Func<TSource>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, Func<TResult>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.WithIndex<T>(IEnumerable<T>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, Func<T, T, TResult>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.CombineWithNext<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhile<T>(IEnumerable<T>, Func<T, T, Boolean>) EnumerableExtensions.Page<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Slice<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TakeLast<T>(IEnumerable<T>, Int32) EnumerableExtensions.Split<T>(IEnumerable<T>, Int32) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.Union<T>(IEnumerable<T>, T[]) EnumerableExtensions.Concat<T>(IEnumerable<T>, T) EnumerableExtensions.Concat<T>(IEnumerable<T>, T[]) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T[]) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>, IEqualityComparer<T>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.OrderBy<TSource>(IEnumerable<TSource>) EnumerableExtensions.OrderByDescending<TSource>(IEnumerable<TSource>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T, Func<T, Boolean>) EnumerableExtensions.AsList<T>(IEnumerable<T>) EnumerableExtensions.AsArray<T>(IEnumerable<T>) EnumerableExtensions.ToStrings<T>(IEnumerable<T>) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>) CollectionExtensions.NotNullNorEmpty<T>(ICollection<T>) CollectionExtensions.AddRange<T>(ICollection<T>, T[]) CollectionExtensions.AddRange<T>(ICollection<T>, IList<T>) CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CompositeRangeExtensions.ToCompositeRange<T, TKey>(IEnumerable<TKey>, Func<TKey, T>, Func<TKey, T>) CompositeRangeExtensions.ToCompositeRange<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.Join<T>(IEnumerable<T>, String) StringExtensions.Join<T>(IEnumerable<T>) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Int32, Action<T>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Action<T>, String) See Also System.Collections.ObjectModel.Collection <T>"
  },
  "api/main/CodeJam.Collections.Array-1.html": {
    "href": "api/main/CodeJam.Collections.Array-1.html",
    "title": "Class Array<T> | CodeJam",
    "keywords": "Class Array<T> System.Array type extensions. Inheritance System.Object Array<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public static class Array<T> Type Parameters Name Description T Type of an array. Fields | Improve this Doc View Source Empty Empty instance of T []. Declaration public static readonly T[] Empty Field Value Type Description T[]"
  },
  "api/blocks/CodeJam.TableData.Parser.html": {
    "href": "api/blocks/CodeJam.TableData.Parser.html",
    "title": "Delegate Parser | CodeJam",
    "keywords": "Delegate Parser Reads single line from table data and parses it. Namespace : CodeJam.TableData Assembly : CodeJam.Blocks.dll Syntax public delegate string[] Parser(TextReader reader, ref int lineNum); Parameters Type Name Description System.IO.TextReader reader System.IO.TextReader to read data from System.Int32 lineNum current number of line Returns Type Description System.String [] Null, if end of file reached, string[0] if line contains no valued, or array of values. Extension Methods Map.DeepCopy<T>(T) TableDataParser.Parse(Parser, String) TableDataParser.Parse(Parser, TextReader)"
  },
  "api/main/CodeJam.Threading.AsyncOperationHelper.html": {
    "href": "api/main/CodeJam.Threading.AsyncOperationHelper.html",
    "title": "Class AsyncOperationHelper | CodeJam",
    "keywords": "Class AsyncOperationHelper Extension and utility methods for System.ComponentModel.AsyncOperationManager and System.ComponentModel.AsyncOperation Inheritance System.Object AsyncOperationHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Threading Assembly : CodeJam.dll Syntax public static class AsyncOperationHelper Methods | Improve this Doc View Source CreateOperation() Returns an System.ComponentModel.AsyncOperation for tracking the duration of a particular asynchronous operation. Declaration public static AsyncOperation CreateOperation() Returns Type Description System.ComponentModel.AsyncOperation An System.ComponentModel.AsyncOperation that you can use to track the duration of an asynchronous method invocation. | Improve this Doc View Source Post(AsyncOperation, Action) Invokes a runner on the thread or context appropriate for the application model. Declaration public static void Post(this AsyncOperation asyncOp, Action runner) Parameters Type Name Description System.ComponentModel.AsyncOperation asyncOp System.Action runner A System.Action that wraps the delegate to be called when the operation ends. | Improve this Doc View Source PostOperationCompleted(AsyncOperation, Action) Ends the lifetime of an asynchronous operation. Declaration public static void PostOperationCompleted(this AsyncOperation asyncOp, Action runner) Parameters Type Name Description System.ComponentModel.AsyncOperation asyncOp System.Action runner A System.Action that wraps the delegate to be called when the operation ends. | Improve this Doc View Source RunAsync(Action<AsyncOperation>) Gets thread from pool and run runner inside it. Declaration public static void RunAsync(Action<AsyncOperation> runner) Parameters Type Name Description System.Action < System.ComponentModel.AsyncOperation > runner Action to run inside created thread. | Improve this Doc View Source RunAsync(Action<AsyncOperation>, Action) Gets thread from pool and run runner inside it. Declaration public static void RunAsync(Action<AsyncOperation> runner, Action completeHandler) Parameters Type Name Description System.Action < System.ComponentModel.AsyncOperation > runner Action to run inside created thread. System.Action completeHandler Action called after runner complete execution. Synchronized with method calling thread. | Improve this Doc View Source Send(AsyncOperation, Action) Invokes a runner on the thread or context appropriate for the application model and waits for it completion. Declaration public static void Send(this AsyncOperation asyncOp, Action runner) Parameters Type Name Description System.ComponentModel.AsyncOperation asyncOp System.Action runner A System.Action that wraps the delegate to be called when the operation ends. | Improve this Doc View Source Send<T>(AsyncOperation, Func<T>) Invokes a runner on the thread or context appropriate for the application model and returns result. Declaration public static T Send<T>(this AsyncOperation asyncOp, Func<T> runner) Parameters Type Name Description System.ComponentModel.AsyncOperation asyncOp System.Func <T> runner A System.Func<TResult> that wraps the delegate to be called when the operation ends. Returns Type Description T Result of runner execution. Type Parameters Name Description T"
  },
  "api/main/CodeJam.Collections.LazyDictionary.html": {
    "href": "api/main/CodeJam.Collections.LazyDictionary.html",
    "title": "Class LazyDictionary | CodeJam",
    "keywords": "Class LazyDictionary Provides static methods for ILazyDictionary<TKey, TValue> . Inheritance System.Object LazyDictionary Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public static class LazyDictionary Methods | Improve this Doc View Source Create<TKey, TValue>(Func<TKey, TValue>, Boolean) Creates implementation of ILazyDictionary<TKey, TValue> . Declaration public static ILazyDictionary<TKey, TValue> Create<TKey, TValue>(Func<TKey, TValue> valueFactory, bool threadSafe) Parameters Type Name Description System.Func <TKey, TValue> valueFactory Function to create value on demand. System.Boolean threadSafe If true, creates a thread safe implementation. valueFactory guaranteed to call only once. Returns Type Description ILazyDictionary <TKey, TValue> ILazyDictionary<TKey, TValue> implementation. Type Parameters Name Description TKey Type of key TValue Type of value | Improve this Doc View Source Create<TKey, TValue>(Func<TKey, TValue>, IEqualityComparer<TKey>, Boolean) Creates implementation of ILazyDictionary<TKey, TValue> . Declaration public static ILazyDictionary<TKey, TValue> Create<TKey, TValue>(Func<TKey, TValue> valueFactory, IEqualityComparer<TKey> comparer, bool threadSafe) Parameters Type Name Description System.Func <TKey, TValue> valueFactory Function to create value on demand. System.Collections.Generic.IEqualityComparer <TKey> comparer Key comparer. System.Boolean threadSafe If true, creates a thread safe implementation. valueFactory guaranteed to call only once. Returns Type Description ILazyDictionary <TKey, TValue> ILazyDictionary<TKey, TValue> implementation. Type Parameters Name Description TKey Type of key TValue Type of value | Improve this Doc View Source Create<TKey, TValue>(Func<TKey, TValue>, IEqualityComparer<TKey>, LazyThreadSafetyMode) Creates implementation of ILazyDictionary<TKey, TValue> . Declaration public static ILazyDictionary<TKey, TValue> Create<TKey, TValue>(Func<TKey, TValue> valueFactory, IEqualityComparer<TKey> comparer, LazyThreadSafetyMode threadSafety) Parameters Type Name Description System.Func <TKey, TValue> valueFactory Function to create value on demand. System.Collections.Generic.IEqualityComparer <TKey> comparer Key comparer. System.Threading.LazyThreadSafetyMode threadSafety One of the enumeration values that specifies the thread safety mode. Returns Type Description ILazyDictionary <TKey, TValue> ILazyDictionary<TKey, TValue> implementation. Type Parameters Name Description TKey Type of key TValue Type of value | Improve this Doc View Source Create<TKey, TValue>(Func<TKey, TValue>, LazyThreadSafetyMode) Creates implementation of ILazyDictionary<TKey, TValue> . Declaration public static ILazyDictionary<TKey, TValue> Create<TKey, TValue>(Func<TKey, TValue> valueFactory, LazyThreadSafetyMode threadSafety) Parameters Type Name Description System.Func <TKey, TValue> valueFactory Function to create value on demand. System.Threading.LazyThreadSafetyMode threadSafety One of the enumeration values that specifies the thread safety mode. Returns Type Description ILazyDictionary <TKey, TValue> ILazyDictionary<TKey, TValue> implementation. Type Parameters Name Description TKey Type of key TValue Type of value"
  },
  "api/main/CodeJam.Collections.EnumerableExtensions.html": {
    "href": "api/main/CodeJam.Collections.EnumerableExtensions.html",
    "title": "Class EnumerableExtensions | CodeJam",
    "keywords": "Class EnumerableExtensions Extensions for System.Collections.Generic.IEnumerable<T> Inheritance System.Object EnumerableExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public static class EnumerableExtensions Methods | Improve this Doc View Source AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, TSource) Applies an accumulator function over a sequence. Declaration public static TSource AggregateOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source An System.Collections.Generic.IEnumerable<T> to aggregate over. System.Func <TSource, TSource, TSource> func An accumulator function to be invoked on each element. TSource defaultValue Default value returned if the source is empty. Returns Type Description TSource The final accumulator value. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, Func<TSource>) Applies an accumulator function over a sequence. Declaration public static TSource AggregateOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, TSource, TSource> func, Func<TSource> defaultSelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source An System.Collections.Generic.IEnumerable<T> to aggregate over. System.Func <TSource, TSource, TSource> func An accumulator function to be invoked on each element. System.Func <TSource> defaultSelector A function to select default value if the source is empty. Returns Type Description TSource The final accumulator value. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, TAccumulate) Applies an accumulator function over a sequence. Declaration public static TAccumulate AggregateOrDefault<TSource, TAccumulate>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, TAccumulate defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source An System.Collections.Generic.IEnumerable<T> to aggregate over. TAccumulate seed The initial accumulator value. System.Func <TAccumulate, TSource, TAccumulate> func An accumulator function to be invoked on each element. TAccumulate defaultValue Default value returned if the source is empty. Returns Type Description TAccumulate The final accumulator value. Type Parameters Name Description TSource The type of the elements of source. TAccumulate The type of the accumulator value. | Improve this Doc View Source AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate>) Applies an accumulator function over a sequence. Declaration public static TAccumulate AggregateOrDefault<TSource, TAccumulate>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate> defaultSelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source An System.Collections.Generic.IEnumerable<T> to aggregate over. TAccumulate seed The initial accumulator value. System.Func <TAccumulate, TSource, TAccumulate> func An accumulator function to be invoked on each element. System.Func <TAccumulate> defaultSelector A function to select default value if the source is empty. Returns Type Description TAccumulate The final accumulator value. Type Parameters Name Description TSource The type of the elements of source. TAccumulate The type of the accumulator value. | Improve this Doc View Source AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, TResult) Applies an accumulator function over a sequence. Declaration public static TResult AggregateOrDefault<TSource, TAccumulate, TResult>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector, TResult defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source An System.Collections.Generic.IEnumerable<T> to aggregate over. TAccumulate seed The initial accumulator value. System.Func <TAccumulate, TSource, TAccumulate> func An accumulator function to be invoked on each element. System.Func <TAccumulate, TResult> resultSelector A function to transform the final accumulator value into the result value. TResult defaultValue Default value returned if the source is empty. Returns Type Description TResult The final accumulator value. Type Parameters Name Description TSource The type of the elements of source. TAccumulate The type of the accumulator value. TResult The type of the resulting value. | Improve this Doc View Source AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, Func<TResult>) Applies an accumulator function over a sequence. Declaration public static TResult AggregateOrDefault<TSource, TAccumulate, TResult>(this IEnumerable<TSource> source, TAccumulate seed, Func<TAccumulate, TSource, TAccumulate> func, Func<TAccumulate, TResult> resultSelector, Func<TResult> defaultSelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source An System.Collections.Generic.IEnumerable<T> to aggregate over. TAccumulate seed The initial accumulator value. System.Func <TAccumulate, TSource, TAccumulate> func An accumulator function to be invoked on each element. System.Func <TAccumulate, TResult> resultSelector A function to transform the final accumulator value into the result value. System.Func <TResult> defaultSelector A function to select default value if the source is empty. Returns Type Description TResult The final accumulator value. Type Parameters Name Description TSource The type of the elements of source. TAccumulate The type of the accumulator value. TResult The type of the resulting value. | Improve this Doc View Source AsArray<T>(IEnumerable<T>) Casts the specified sequence to array if possible, or creates an array from. Declaration public static T[] AsArray<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The System.Collections.Generic.IEnumerable<T> to create an array from. Returns Type Description T[] An array that contains elements from the input sequence. Type Parameters Name Description T The type of the elements of source. | Improve this Doc View Source AsList<T>(IEnumerable<T>) Casts the specified sequence to System.Collections.Generic.List<T> if possible, or creates a System.Collections.Generic.List<T> from. Declaration public static List<T> AsList<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The System.Collections.Generic.IEnumerable<T> to create a System.Collections.Generic.List<T> from. Returns Type Description System.Collections.Generic.List <T> A System.Collections.Generic.List<T> that contains elements from the input sequence. Type Parameters Name Description T The type of the elements of source. | Improve this Doc View Source CombineWithNext<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) Combines item with next value from the sequence. Declaration public static IEnumerable<TResult> CombineWithNext<T, TResult>(this IEnumerable<T> source, T combineLast, Func<T, T, TResult> prevNextSelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The input sequence. T combineLast The value to be used as a next for the last item in the sequence. System.Func <T, T, TResult> prevNextSelector The previous next selector. Returns Type Description System.Collections.Generic.IEnumerable <TResult> Sequence of items combined with previous values from the sequence. Type Parameters Name Description T The type of the item. TResult The type of the result. | Improve this Doc View Source CombineWithPrevious<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) Combines item with previous value from the sequence. Declaration public static IEnumerable<TResult> CombineWithPrevious<T, TResult>(this IEnumerable<T> source, T seed, Func<T, T, TResult> prevNextSelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The input sequence. T seed The seed value to be used as a previous for the first item in the sequence. System.Func <T, T, TResult> prevNextSelector The previous next selector. Returns Type Description System.Collections.Generic.IEnumerable <TResult> Sequence of items combined with previous values from the sequence. Type Parameters Name Description T The type of the item. TResult The type of the result. | Improve this Doc View Source CombineWithPrevious<T, TResult>(IEnumerable<T>, Func<T, T, TResult>) Combines item with previous value from the sequence. Declaration public static IEnumerable<TResult> CombineWithPrevious<T, TResult>(this IEnumerable<T> source, Func<T, T, TResult> prevNextSelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The input sequence. System.Func <T, T, TResult> prevNextSelector The previous next selector. Returns Type Description System.Collections.Generic.IEnumerable <TResult> Sequence of items combined with previous values from the sequence. Type Parameters Name Description T The type of the item. TResult The type of the result. | Improve this Doc View Source Concat<T>(IEnumerable<T>, T) Appends specified element to end of the collection. Declaration public static IEnumerable<T> Concat<T>(this IEnumerable<T> source, T element) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source enumerable. T element Element to concat. Returns Type Description System.Collections.Generic.IEnumerable <T> Concatenated enumerable Type Parameters Name Description T Type of element. | Improve this Doc View Source Concat<T>(IEnumerable<T>, T[]) Appends specified elements to end of the collection. Declaration public static IEnumerable<T> Concat<T>(this IEnumerable<T> source, params T[] elements) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source enumerable. T[] elements Elements to concat. Returns Type Description System.Collections.Generic.IEnumerable <T> Concatenated enumerable Type Parameters Name Description T Type of element. | Improve this Doc View Source DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) Returns a sequence with distinct elements from the input sequence based on the specified key. Declaration public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to return distinct elements from. System.Func <TSource, TKey> keySelector A function to extract the key for each element. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> that contains distinct elements from the source sequence. Type Parameters Name Description TSource TKey | Improve this Doc View Source DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) Returns a sequence with distinct elements from the input sequence based on the specified key and key comparer. Declaration public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence to return distinct elements from. System.Func <TSource, TKey> keySelector A function to extract the key for each element. System.Collections.Generic.IEqualityComparer <TKey> comparer An System.Collections.Generic.IEqualityComparer<T> to compare values. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> that contains distinct elements from the source sequence. Type Parameters Name Description TSource TKey | Improve this Doc View Source ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) Produces the set difference of two sequences by using the specified key to compare values. Declaration public static IEnumerable<TSource> ExceptBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> first An System.Collections.Generic.IEnumerable<T> whose elements that are not also in second will be returned. System.Collections.Generic.IEnumerable <TSource> second An System.Collections.Generic.IEnumerable<T> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence. System.Func <TSource, TKey> keySelector A function to extract the key for each element. Returns Type Description System.Collections.Generic.IEnumerable <TSource> A sequence that contains the set difference of the elements of two sequences. Type Parameters Name Description TSource TKey | Improve this Doc View Source ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) Produces the set difference of two sequences by using the specified key and System.Collections.Generic.IEqualityComparer<T> to compare values. Declaration public static IEnumerable<TSource> ExceptBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> first An System.Collections.Generic.IEnumerable<T> whose elements that are not also in second will be returned. System.Collections.Generic.IEnumerable <TSource> second An System.Collections.Generic.IEnumerable<T> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence. System.Func <TSource, TKey> keySelector A function to extract the key for each element. System.Collections.Generic.IEqualityComparer <TKey> comparer An System.Collections.Generic.IEqualityComparer<T> to compare values. Returns Type Description System.Collections.Generic.IEnumerable <TSource> A sequence that contains the set difference of the elements of two sequences. Type Parameters Name Description TSource TKey | Improve this Doc View Source FirstOrDefault<T>(IEnumerable<T>, T) Returns first element, or specified defaultValue , if sequence is empty. Declaration public static T FirstOrDefault<T>(this IEnumerable<T> source, T defaultValue) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source An System.Collections.Generic.IEnumerable<T> to return an element from. T defaultValue Default value. Returns Type Description T default ( T ) if source is empty; otherwise, the first element in source . Type Parameters Name Description T The type of the elements of source . | Improve this Doc View Source FirstOrDefault<T>(IEnumerable<T>, T, Func<T, Boolean>) Returns the first element of the sequence that satisfies a condition or a specified defaultValue if no such element is found. Declaration public static T FirstOrDefault<T>(this IEnumerable<T> source, T defaultValue, Func<T, bool> predicate) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source An System.Collections.Generic.IEnumerable<T> to return an element from. T defaultValue Default value. System.Func <T, System.Boolean > predicate A function to test each element for a condition. Returns Type Description T default ( T ) if source is empty or if no element passes the test specified by predicate ; otherwise, the first element in source that passes the test specified by predicate . Type Parameters Name Description T The type of the elements of source . | Improve this Doc View Source Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) Returns a flattened sequence from a graph or hierarchy of elements by using the specified children selector. Declaration public static IEnumerable<T> Flatten<T>(this IEnumerable<T> source, Func<T, IEnumerable<T>> childrenSelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source hierarchy to flatten. System.Func <T, System.Collections.Generic.IEnumerable <T>> childrenSelector A function used to retrieve the children of an element. Returns Type Description System.Collections.Generic.IEnumerable <T> A flat sequence of elements produced from the elements in the source hierarchy. Type Parameters Name Description T | Improve this Doc View Source GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>) Performs topological sort on source . Declaration public static IEnumerable<T[]> GroupTopoSort<T>(this ICollection<T> source, Func<T, IEnumerable<T>> dependsOnGetter) Parameters Type Name Description System.Collections.Generic.ICollection <T> source Collection to sort. System.Func <T, System.Collections.Generic.IEnumerable <T>> dependsOnGetter Function that returns items dependent on specified item. Returns Type Description System.Collections.Generic.IEnumerable <T[]> Topologically sorted list of items in source separated by dependency level. Type Parameters Name Description T | Improve this Doc View Source GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) Performs topological sort on source . Declaration public static IEnumerable<T[]> GroupTopoSort<T>(this ICollection<T> source, Func<T, IEnumerable<T>> dependsOnGetter, IEqualityComparer<T> equalityComparer) Parameters Type Name Description System.Collections.Generic.ICollection <T> source Collection to sort. System.Func <T, System.Collections.Generic.IEnumerable <T>> dependsOnGetter Function that returns items dependent on specified item. System.Collections.Generic.IEqualityComparer <T> equalityComparer Equality comparer for item comparison Returns Type Description System.Collections.Generic.IEnumerable <T[]> Topologically sorted list of items in source , separated by dependency level. Type Parameters Name Description T | Improve this Doc View Source GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) Performs topological sort on source . Declaration public static IEnumerable<T[]> GroupTopoSort<T>(this IEnumerable<T> source, Func<T, IEnumerable<T>> dependsOnGetter) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source Collection to sort. System.Func <T, System.Collections.Generic.IEnumerable <T>> dependsOnGetter Function that returns items dependent on specified item. Returns Type Description System.Collections.Generic.IEnumerable <T[]> Topologically sorted list of items in source separated by dependency level. Type Parameters Name Description T | Improve this Doc View Source GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) Performs topological sort on source . Declaration public static IEnumerable<T[]> GroupTopoSort<T>(this IEnumerable<T> source, Func<T, IEnumerable<T>> dependsOnGetter, IEqualityComparer<T> equalityComparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source Collection to sort. System.Func <T, System.Collections.Generic.IEnumerable <T>> dependsOnGetter Function that returns items dependent on specified item. System.Collections.Generic.IEqualityComparer <T> equalityComparer Equality comparer for item comparison Returns Type Description System.Collections.Generic.IEnumerable <T[]> Topologically sorted list of items in source separated by dependency level. Type Parameters Name Description T | Improve this Doc View Source GroupWhile<T>(IEnumerable<T>, Func<T, T, Boolean>) Groups items in the sequence while they have same grouping key. Declaration public static IEnumerable<T[]> GroupWhile<T>(this IEnumerable<T> source, Func<T, T, bool> predicate) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source. System.Func <T, T, System.Boolean > predicate Gropung predicate. Returns Type Description System.Collections.Generic.IEnumerable <T[]> Grouped items. Type Parameters Name Description T Type of items in sequence | Improve this Doc View Source GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>) Groups items in the sequence while they have same grouping key. Declaration public static IEnumerable<IGrouping<TKey, T>> GroupWhileEquals<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source. System.Func <T, TKey> keySelector The grouping key selector. Returns Type Description System.Collections.Generic.IEnumerable < System.Linq.IGrouping <TKey, T>> Grouped items with grouping key. Type Parameters Name Description T Type of items in sequence TKey The type of the grouping key. | Improve this Doc View Source GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) Groups items in the sequence while they have same grouping key. Declaration public static IEnumerable<IGrouping<TKey, T>> GroupWhileEquals<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source. System.Func <T, TKey> keySelector The grouping key selector. System.Collections.Generic.IEqualityComparer <TKey> comparer The comparer. Returns Type Description System.Collections.Generic.IEnumerable < System.Linq.IGrouping <TKey, T>> Grouped items with grouping key. Type Parameters Name Description T Type of items in sequence TKey The type of the grouping key. | Improve this Doc View Source GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>) Groups items in the sequence while they have same grouping key. Declaration public static IEnumerable<IGrouping<TKey, TItem>> GroupWhileEquals<T, TItem, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector, Func<T, TItem> itemSelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source. System.Func <T, TKey> keySelector The grouping key selector. System.Func <T, TItem> itemSelector The item selector. Returns Type Description System.Collections.Generic.IEnumerable < System.Linq.IGrouping <TKey, TItem>> Grouped items with grouping key. Type Parameters Name Description T Type of items in sequence TItem The type of resulting item. TKey The type of the grouping key. | Improve this Doc View Source GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>, IEqualityComparer<TKey>) Groups items in the sequence while they have same grouping key. Declaration public static IEnumerable<IGrouping<TKey, TItem>> GroupWhileEquals<T, TItem, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector, Func<T, TItem> itemSelector, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source. System.Func <T, TKey> keySelector The grouping key selector. System.Func <T, TItem> itemSelector The item selector. System.Collections.Generic.IEqualityComparer <TKey> comparer The comparer. Returns Type Description System.Collections.Generic.IEnumerable < System.Linq.IGrouping <TKey, TItem>> Grouped items with grouping key. Type Parameters Name Description T Type of items in sequence TItem The type of resulting item. TKey The type of the grouping key. | Improve this Doc View Source IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) Produces the set intersection of two sequences by using the specified key to compare values. Declaration public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> first An System.Collections.Generic.IEnumerable<T> whose distinct elements that also appear in second will be returned. System.Collections.Generic.IEnumerable <TSource> second An System.Collections.Generic.IEnumerable<T> whose distinct elements that also appear in the first sequence will be returned. System.Func <TSource, TKey> keySelector A function to extract the key for each element. Returns Type Description System.Collections.Generic.IEnumerable <TSource> A sequence that contains the elements that form the set intersection of two sequences. Type Parameters Name Description TSource TKey | Improve this Doc View Source IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) Produces the set intersection of two sequences by using the specified key and System.Collections.Generic.IEqualityComparer<T> to compare values. Declaration public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> first An System.Collections.Generic.IEnumerable<T> whose distinct elements that also appear in second will be returned. System.Collections.Generic.IEnumerable <TSource> second An System.Collections.Generic.IEnumerable<T> whose distinct elements that also appear in the first sequence will be returned. System.Func <TSource, TKey> keySelector A function to extract the key for each element. System.Collections.Generic.IEqualityComparer <TKey> comparer An System.Collections.Generic.IEqualityComparer<T> to compare values. Returns Type Description System.Collections.Generic.IEnumerable <TSource> A sequence that contains the elements that form the set intersection of two sequences. Type Parameters Name Description TSource TKey | Improve this Doc View Source IsFirst<TSource>(IEnumerable<TSource>, TSource) Checks, if item is first element of source . Declaration public static bool IsFirst<TSource>(this IEnumerable<TSource> source, TSource item) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source An System.Collections.Generic.IEnumerable<T> to check. TSource item Source item to compare with first element. Returns Type Description System.Boolean true , if source has at least one element and first element is equals to item , otherwise false . Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source IsFirst<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) Checks, if item is first element of source . Declaration public static bool IsFirst<TSource>(this IEnumerable<TSource> source, TSource item, IEqualityComparer<TSource> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source An System.Collections.Generic.IEnumerable<T> to check. TSource item Source item to compare with first element. System.Collections.Generic.IEqualityComparer <TSource> comparer The comparer. Returns Type Description System.Boolean true , if source has at least one element and first element is equals to item , otherwise false . Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source IsLast<TSource>(IEnumerable<TSource>, TSource) Checks, if item is last element of source . Declaration public static bool IsLast<TSource>(this IEnumerable<TSource> source, TSource item) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source An System.Collections.Generic.IEnumerable<T> to check. TSource item Source item to compare with last element. Returns Type Description System.Boolean true , if source has at least one element and last element is equals to item , otherwise false . Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source IsLast<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) Checks, if item is last element of source . Declaration public static bool IsLast<TSource>(this IEnumerable<TSource> source, TSource item, IEqualityComparer<TSource> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source An System.Collections.Generic.IEnumerable<T> to check. TSource item Source item to compare with last element. System.Collections.Generic.IEqualityComparer <TSource> comparer The comparer. Returns Type Description System.Boolean true , if source has at least one element and last element is equals to item , otherwise false . Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, byte> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Byte > selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Decimal > selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Double > selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, short> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Int16 > selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Int32 > selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Int64 > selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, byte ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Byte >> selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Decimal >> selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Double >> selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, short ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Int16 >> selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Int32 >> selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Int64 >> selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.SByte >> selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Single >> selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.UInt16 >> selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, uint ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.UInt32 >> selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.UInt64 >> selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.SByte > selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Single > selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.UInt16 > selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, uint> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.UInt32 > selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.UInt64 > selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) Invokes a selector on each element of a source and returns the item with maximum value. Declaration public static TSource MaxBy<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the maximum value of. System.Func <TSource, TValue> selector A transform function to apply to each element. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. TValue Type of the value | Improve this Doc View Source MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) Invokes a selector on each element of a source and returns the item with maximum value. Declaration public static TSource MaxBy<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector, IComparer<TValue> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the maximum value of. System.Func <TSource, TValue> selector A transform function to apply to each element. System.Collections.Generic.IComparer <TValue> comparer The System.Collections.Generic.IComparer<T> to compare values. Returns Type Description TSource The item with maximum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. TValue Type of the value | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, byte> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Byte > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Decimal > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Double > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, short> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Int16 > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Int32 > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Int64 > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, byte ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Byte >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Decimal >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Double >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, short ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Int16 >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Int32 >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Int64 >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.SByte >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Single >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.UInt16 >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, uint ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.UInt32 >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.UInt64 >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.SByte > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Single > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.UInt16 > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, uint> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.UInt32 > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MaxByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.UInt64 > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) Invokes a selector on each element of a source and returns the item with maximum value. Declaration public static TSource MaxByOrDefault<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the maximum value of. System.Func <TSource, TValue> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. TValue Type of the value | Improve this Doc View Source MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) Invokes a selector on each element of a source and returns the item with maximum value. Declaration public static TSource MaxByOrDefault<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector, IComparer<TValue> comparer, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the maximum value of. System.Func <TSource, TValue> selector A transform function to apply to each element. System.Collections.Generic.IComparer <TValue> comparer The System.Collections.Generic.IComparer<T> to compare values. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with maximum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. TValue Type of the value | Improve this Doc View Source MaxOrDefault<TSource>(IEnumerable<TSource>) Returns maximum item from the sequence or default value. Declaration public static TSource MaxOrDefault<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. Returns Type Description TSource Maximum item from the sequence or default value. Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) Returns maximum item from the sequence or default value. Declaration public static TSource MaxOrDefault<TSource>(this IEnumerable<TSource> source, TSource defaultValue) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. TSource defaultValue The default value to return if the sequence.s empty. Returns Type Description TSource Maximum item from the sequence or default value. Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) Returns maximum item from the sequence or default value. Declaration public static TSource MaxOrDefault<TSource>(this IEnumerable<TSource> source, IComparer<TSource> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. System.Collections.Generic.IComparer <TSource> comparer The comparer. Returns Type Description TSource Maximum item from the sequence or default value Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) Returns maximum item from the sequence or default value. Declaration public static TSource MaxOrDefault<TSource>(this IEnumerable<TSource> source, IComparer<TSource> comparer, TSource defaultValue) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. System.Collections.Generic.IComparer <TSource> comparer The comparer. TSource defaultValue The default value to return if the sequence.s empty. Returns Type Description TSource Maximum item from the sequence or default value Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) Returns maximum item from the sequence or default value. Declaration public static T MaxOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. System.Func <TSource, T> selector The value selector. Returns Type Description T Maximum item from the sequence or default value. Type Parameters Name Description TSource The type of the elements in the source sequence. T Type of the value. | Improve this Doc View Source MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) Returns maximum item from the sequence or default value. Declaration public static T MaxOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector, T defaultValue) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. System.Func <TSource, T> selector The value selector. T defaultValue The default value to return if the sequence.s empty. Returns Type Description T Maximum item from the sequence or default value Type Parameters Name Description TSource The type of the elements in the source sequence. T Type of the value. | Improve this Doc View Source MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) Returns maximum item from the sequence or default value. Declaration public static T MaxOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector, IComparer<T> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. System.Func <TSource, T> selector The value selector. System.Collections.Generic.IComparer <T> comparer The comparer. Returns Type Description T Maximum item from the sequence or default value Type Parameters Name Description TSource The type of the elements in the source sequence. T Type of the value. | Improve this Doc View Source MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) Returns maximum item from the sequence or default value. Declaration public static T MaxOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector, IComparer<T> comparer, T defaultValue) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. System.Func <TSource, T> selector The value selector. System.Collections.Generic.IComparer <T> comparer The comparer. T defaultValue The default value to return if the sequence.s empty. Returns Type Description T Maximum item from the sequence or default value Type Parameters Name Description TSource The type of the elements in the source sequence. T Type of the value. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, byte> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Byte > selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Decimal > selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Double > selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, short> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Int16 > selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Int32 > selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Int64 > selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, byte ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Byte >> selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Decimal >> selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Double >> selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, short ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Int16 >> selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Int32 >> selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Int64 >> selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.SByte >> selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Single >> selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.UInt16 >> selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, uint ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.UInt32 >> selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong ? > selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.UInt64 >> selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.SByte > selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Single > selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.UInt16 > selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, uint> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.UInt32 > selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.UInt64 > selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, TValue> selector A transform function to apply to each element. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. TValue Type of the value Exceptions Type Condition System.InvalidOperationException source has no not null elements | Improve this Doc View Source MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinBy<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector, IComparer<TValue> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, TValue> selector A transform function to apply to each element. System.Collections.Generic.IComparer <TValue> comparer The System.Collections.Generic.IComparer<T> to compare values. Returns Type Description TSource The item with minimum value in the sequence. Type Parameters Name Description TSource The type of the elements of source. TValue Type of the value Exceptions Type Condition System.InvalidOperationException source has no not null elements | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, byte> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Byte > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Decimal > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, double> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Double > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, short> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Int16 > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, int> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Int32 > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, long> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Int64 > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, byte ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Byte >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, decimal ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Decimal >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, double ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Double >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, short ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Int16 >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, int ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Int32 >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, long ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Int64 >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.SByte >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, float ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.Single >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.UInt16 >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, uint ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.UInt32 >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong ? > selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Nullable < System.UInt64 >> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, sbyte> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.SByte > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, float> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.Single > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ushort> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.UInt16 > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, uint> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.UInt32 > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource>(this IEnumerable<TSource> source, Func<TSource, ulong> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, System.UInt64 > selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, TValue> selector A transform function to apply to each element. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. TValue Type of the value Exceptions Type Condition System.InvalidOperationException source has no not null elements | Improve this Doc View Source MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) Invokes a selector on each element of a source and returns the item with minimum value. Declaration public static TSource MinByOrDefault<TSource, TValue>(this IEnumerable<TSource> source, Func<TSource, TValue> selector, IComparer<TValue> comparer, TSource defaultValue = null) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to determine the minimum value of. System.Func <TSource, TValue> selector A transform function to apply to each element. System.Collections.Generic.IComparer <TValue> comparer The System.Collections.Generic.IComparer<T> to compare values. TSource defaultValue Value returned if collection contains no not null elements. Returns Type Description TSource The item with minimum value in the sequence or TSource default value if source has no not null elements. Type Parameters Name Description TSource The type of the elements of source. TValue Type of the value | Improve this Doc View Source MinOrDefault<TSource>(IEnumerable<TSource>) Returns minimum item from the sequence or default value. Declaration public static TSource MinOrDefault<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. Returns Type Description TSource Minimum item from the sequence or default value. Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source MinOrDefault<TSource>(IEnumerable<TSource>, TSource) Returns minimum item from the sequence or default value. Declaration public static TSource MinOrDefault<TSource>(this IEnumerable<TSource> source, TSource defaultValue) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. TSource defaultValue The default value to return if the sequence.s empty. Returns Type Description TSource Minimum item from the sequence or default value Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) Returns minimum item from the sequence or default value. Declaration public static TSource MinOrDefault<TSource>(this IEnumerable<TSource> source, IComparer<TSource> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. System.Collections.Generic.IComparer <TSource> comparer The comparer. Returns Type Description TSource Minimum item from the sequence or default value Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) Returns minimum item from the sequence or default value. Declaration public static TSource MinOrDefault<TSource>(this IEnumerable<TSource> source, IComparer<TSource> comparer, TSource defaultValue) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. System.Collections.Generic.IComparer <TSource> comparer The comparer. TSource defaultValue The default value to return if the sequence.s empty. Returns Type Description TSource Minimum item from the sequence or default value Type Parameters Name Description TSource The type of the elements in the source sequence. | Improve this Doc View Source MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) Returns minimum item from the sequence or default value. Declaration public static T MinOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. System.Func <TSource, T> selector The value selector. Returns Type Description T Minimum item from the sequence or default value. Type Parameters Name Description TSource The type of the elements in the source sequence. T Type of the value. | Improve this Doc View Source MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) Returns minimum item from the sequence or default value. Declaration public static T MinOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector, T defaultValue) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. System.Func <TSource, T> selector The value selector. T defaultValue The default value to return if the sequence.s empty. Returns Type Description T Minimum item from the sequence or default value Type Parameters Name Description TSource The type of the elements in the source sequence. T Type of the value. | Improve this Doc View Source MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) Returns minimum item from the sequence or default value. Declaration public static T MinOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector, IComparer<T> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. System.Func <TSource, T> selector The value selector. System.Collections.Generic.IComparer <T> comparer The comparer. Returns Type Description T Minimum item from the sequence or default value Type Parameters Name Description TSource The type of the elements in the source sequence. T Type of the value. | Improve this Doc View Source MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) Returns minimum item from the sequence or default value. Declaration public static T MinOrDefault<TSource, T>(this IEnumerable<TSource> source, Func<TSource, T> selector, IComparer<T> comparer, T defaultValue) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source The sequence. System.Func <TSource, T> selector The value selector. System.Collections.Generic.IComparer <T> comparer The comparer. T defaultValue The default value to return if the sequence.s empty. Returns Type Description T Minimum item from the sequence or default value Type Parameters Name Description TSource The type of the elements in the source sequence. T Type of the value. | Improve this Doc View Source OrderBy<TSource>(IEnumerable<TSource>) Sorts the elements of a sequence in ascending order. Declaration public static IOrderedEnumerable<TSource> OrderBy<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to order. Returns Type Description System.Linq.IOrderedEnumerable <TSource> An System.Linq.IOrderedEnumerable<TElement> whose elements are sorted. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source OrderByDescending<TSource>(IEnumerable<TSource>) Sorts the elements of a sequence in descending order. Declaration public static IOrderedEnumerable<TSource> OrderByDescending<TSource>(this IEnumerable<TSource> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> source A sequence of values to order. Returns Type Description System.Linq.IOrderedEnumerable <TSource> An System.Linq.IOrderedEnumerable<TElement> whose elements are sorted. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source Page<T>(IEnumerable<T>, Int32, Int32) Extracts pageSize elements from a sequence at a particular one-based page number. Declaration public static IEnumerable<T> Page<T>(this IEnumerable<T> source, int pageIndex, int pageSize) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The sequence from which to page. System.Int32 pageIndex The one-based page number. System.Int32 pageSize The size of the page. Returns Type Description System.Collections.Generic.IEnumerable <T> A new sequence containing elements are at the specified pageIndex from the source sequence. Type Parameters Name Description T The type of the elements in the source sequence. | Improve this Doc View Source Prepend<T>(IEnumerable<T>, T) Prepends specified element to the collection start. Declaration public static IEnumerable<T> Prepend<T>(this IEnumerable<T> source, T element) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source enumerable. T element Element to prepend. Returns Type Description System.Collections.Generic.IEnumerable <T> Concatenated enumerable Type Parameters Name Description T Type of element. | Improve this Doc View Source Prepend<T>(IEnumerable<T>, T[]) Prepends specified elements to the collection start. Declaration public static IEnumerable<T> Prepend<T>(this IEnumerable<T> source, params T[] elements) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source enumerable. T[] elements Elements to prepend. Returns Type Description System.Collections.Generic.IEnumerable <T> Concatenated enumerable Type Parameters Name Description T Type of element. | Improve this Doc View Source SelectMany<TSource>(IEnumerable<IEnumerable<TSource>>) Projects each element of a sequence to an System.Collections.Generic.IEnumerable<T> and flattens the resulting sequences into one sequence. Declaration public static IEnumerable<TSource> SelectMany<TSource>(this IEnumerable<IEnumerable<TSource>> source) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Collections.Generic.IEnumerable <TSource>> source A sequence of values to project. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence. Type Parameters Name Description TSource The type of the elements of source. | Improve this Doc View Source Slice<T>(IEnumerable<T>, Int32, Int32) Extracts count elements from a sequence at a particular zero-based starting index. Declaration public static IEnumerable<T> Slice<T>(this IEnumerable<T> source, int startIndex, int count) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The sequence from which to extract elements. System.Int32 startIndex The zero-based index at which to begin slicing. System.Int32 count The number of items to slice out of the index. Returns Type Description System.Collections.Generic.IEnumerable <T> A new sequence containing any elements sliced out from the source sequence. Type Parameters Name Description T The type of the elements in the source sequence. Remarks If the starting position or count specified result in slice extending past the end of the sequence, it will return all elements up to that point. There is no guarantee that the resulting sequence will contain the number of elements requested - it may have anywhere from 0 to count . This method is implemented in an optimized manner for any sequence implementing IList{T} . The result of Slice() is identical to: sequence.Skip(startIndex).Take(count) . | Improve this Doc View Source Split<T>(IEnumerable<T>, Int32) Splits the input sequence into a sequence of chunks of the specified size. Declaration public static IEnumerable<T[]> Split<T>(this IEnumerable<T> source, int size) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The sequence to split into chunks. System.Int32 size The size of the chunks. Returns Type Description System.Collections.Generic.IEnumerable <T[]> A sequence of chunks of the specified size. Type Parameters Name Description T | Improve this Doc View Source TakeLast<T>(IEnumerable<T>, Int32) Returns a specified number of contiguous elements from the end of a sequence. Declaration public static IEnumerable<T> TakeLast<T>(this IEnumerable<T> source, int count) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The sequence to return the last element of. System.Int32 count The number of elements to return. Returns Type Description System.Collections.Generic.IEnumerable <T> An System.Collections.Generic.IEnumerable<T> that contains the specified number of elements from the end of the input sequence. Type Parameters Name Description T The type of the elements of source . Remarks This operator uses deferred execution and streams its results. | Improve this Doc View Source ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, DictionaryDuplicate) Creates a System.Collections.Generic.Dictionary<TKey, TValue> from an System.Collections.Generic.IEnumerable<T> according to a specified key selector function and a duplicate handling policy. Declaration public static Dictionary<TKey, T> ToDictionary<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector, DictionaryDuplicate duplicateHandling) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source An System.Collections.Generic.IEnumerable<T> to create a System.Collections.Generic.Dictionary<TKey, TValue> from. System.Func <T, TKey> keySelector A function to extract a key from each element. DictionaryDuplicate duplicateHandling Policy for duplicate handling. Returns Type Description System.Collections.Generic.Dictionary <TKey, T> A System.Collections.Generic.Dictionary<TKey, TValue> that contains keys and values. Type Parameters Name Description T The type of the elements of source . TKey The type of the key returned by keySelector . | Improve this Doc View Source ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, DictionaryDuplicate) Creates a System.Collections.Generic.Dictionary<TKey, TValue> from an System.Collections.Generic.IEnumerable<T> according to a specified key selector function, a comparer and a duplicate handling policy. Declaration public static Dictionary<TKey, T> ToDictionary<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer, DictionaryDuplicate duplicateHandling) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source An System.Collections.Generic.IEnumerable<T> to create a System.Collections.Generic.Dictionary<TKey, TValue> from. System.Func <T, TKey> keySelector A function to extract a key from each element. System.Collections.Generic.IEqualityComparer <TKey> comparer An System.Collections.Generic.IEqualityComparer<T> to compare keys. DictionaryDuplicate duplicateHandling Policy for duplicate handling. Returns Type Description System.Collections.Generic.Dictionary <TKey, T> A System.Collections.Generic.Dictionary<TKey, TValue> that contains keys and values. Type Parameters Name Description T The type of the elements of source . TKey The type of the key returned by keySelector . | Improve this Doc View Source ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, DictionaryDuplicate) Creates a System.Collections.Generic.Dictionary<TKey, TValue> from an System.Collections.Generic.IEnumerable<T> according to a specified key selector function, an element selector function and a duplicate handling policy. Declaration public static Dictionary<TKey, TElement> ToDictionary<T, TKey, TElement>(this IEnumerable<T> source, Func<T, TKey> keySelector, Func<T, TElement> elementSelector, DictionaryDuplicate duplicateHandling) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source An System.Collections.Generic.IEnumerable<T> to create a System.Collections.Generic.Dictionary<TKey, TValue> from. System.Func <T, TKey> keySelector A function to extract a key from each element. System.Func <T, TElement> elementSelector A transform function to produce a result element value from each element. DictionaryDuplicate duplicateHandling Policy for duplicate handling. Returns Type Description System.Collections.Generic.Dictionary <TKey, TElement> A System.Collections.Generic.Dictionary<TKey, TValue> that contains keys and values. Type Parameters Name Description T The type of the elements of source . TKey The type of the key returned by keySelector . TElement The type of the value returned by elementSelector . | Improve this Doc View Source ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>, DictionaryDuplicate) Creates a System.Collections.Generic.Dictionary<TKey, TValue> from an System.Collections.Generic.IEnumerable<T> according to a specified key selector function, an element selector function, a comparer and a duplicate handling policy. Declaration public static Dictionary<TKey, TElement> ToDictionary<T, TKey, TElement>(this IEnumerable<T> source, Func<T, TKey> keySelector, Func<T, TElement> elementSelector, IEqualityComparer<TKey> comparer, DictionaryDuplicate duplicateHandling) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The source to create a lookup dictionary from. System.Func <T, TKey> keySelector A function to extract a key from each element. System.Func <T, TElement> elementSelector A transform function to produce a result element value from each element. System.Collections.Generic.IEqualityComparer <TKey> comparer An equality comparer to compare keys. DictionaryDuplicate duplicateHandling Policy for duplicate handling. Returns Type Description System.Collections.Generic.Dictionary <TKey, TElement> A System.Collections.Generic.Dictionary<TKey, TValue> that contains keys and values. Type Parameters Name Description T The type of the elements of source . TKey The type of the value returned by keySelector . TElement The type of the value returned by elementSelector . | Improve this Doc View Source ToHashSet<T>(IEnumerable<T>) Creates a System.Collections.Generic.HashSet<T> from an System.Collections.Generic.IEnumerable<T> . Declaration public static HashSet<T> ToHashSet<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The System.Collections.Generic.IEnumerable<T> to create a System.Collections.Generic.HashSet<T> from. Returns Type Description System.Collections.Generic.HashSet <T> A System.Collections.Generic.HashSet<T> that contains elements from the input sequence. Type Parameters Name Description T The type of the elements of source. | Improve this Doc View Source ToHashSet<T>(IEnumerable<T>, IEqualityComparer<T>) Creates a System.Collections.Generic.HashSet<T> from an System.Collections.Generic.IEnumerable<T> with the specified equality comparer. Declaration public static HashSet<T> ToHashSet<T>(this IEnumerable<T> source, IEqualityComparer<T> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The System.Collections.Generic.IEnumerable<T> to create a System.Collections.Generic.HashSet<T> from. System.Collections.Generic.IEqualityComparer <T> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use to comparing values in the set, or null to use the default implementation for the set type. Returns Type Description System.Collections.Generic.HashSet <T> A System.Collections.Generic.HashSet<T> that contains elements from the input sequence. Type Parameters Name Description T The type of the elements of source. | Improve this Doc View Source ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>) Creates a System.Collections.Generic.HashSet<T> from an System.Collections.Generic.IEnumerable<T> . Declaration public static HashSet<TKey> ToHashSet<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The System.Collections.Generic.IEnumerable<T> to create a System.Collections.Generic.HashSet<T> from. System.Func <T, TKey> keySelector A function to extract a key from each element. Returns Type Description System.Collections.Generic.HashSet <TKey> A System.Collections.Generic.HashSet<T> that contains keys from the input sequence. Type Parameters Name Description T The type of the elements of source. TKey The type of the key returned by keySelector . | Improve this Doc View Source ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) Creates a System.Collections.Generic.HashSet<T> from an System.Collections.Generic.IEnumerable<T> with the specified equality comparer. Declaration public static HashSet<TKey> ToHashSet<T, TKey>(this IEnumerable<T> source, Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The System.Collections.Generic.IEnumerable<T> to create a System.Collections.Generic.HashSet<T> from. System.Func <T, TKey> keySelector A function to extract a key from each element. System.Collections.Generic.IEqualityComparer <TKey> comparer The System.Collections.Generic.IEqualityComparer<T> implementation to use to comparing values in the set, or null to use the default implementation for the set type. Returns Type Description System.Collections.Generic.HashSet <TKey> A System.Collections.Generic.HashSet<T> that contains keys from the input sequence. Type Parameters Name Description T The type of the elements of source. TKey The type of the key returned by keySelector . | Improve this Doc View Source TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>) Performs topological sort on source . Declaration public static IEnumerable<T> TopoSort<T>(this ICollection<T> source, Func<T, IEnumerable<T>> dependsOnGetter) Parameters Type Name Description System.Collections.Generic.ICollection <T> source Collection to sort. System.Func <T, System.Collections.Generic.IEnumerable <T>> dependsOnGetter Function that returns items dependent on specified item. Returns Type Description System.Collections.Generic.IEnumerable <T> Topologically sorted list of items in source . Type Parameters Name Description T | Improve this Doc View Source TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) Performs topological sort on source . Declaration public static IEnumerable<T> TopoSort<T>(this ICollection<T> source, Func<T, IEnumerable<T>> dependsOnGetter, IEqualityComparer<T> equalityComparer) Parameters Type Name Description System.Collections.Generic.ICollection <T> source Collection to sort. System.Func <T, System.Collections.Generic.IEnumerable <T>> dependsOnGetter Function that returns items dependent on specified item. System.Collections.Generic.IEqualityComparer <T> equalityComparer Equality comparer for item comparison Returns Type Description System.Collections.Generic.IEnumerable <T> Topologically sorted list of items in source . Type Parameters Name Description T | Improve this Doc View Source TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) Performs topological sort on source . Declaration public static IEnumerable<T> TopoSort<T>(this IEnumerable<T> source, Func<T, IEnumerable<T>> dependsOnGetter) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source Collection to sort. System.Func <T, System.Collections.Generic.IEnumerable <T>> dependsOnGetter Function that returns items dependent on specified item. Returns Type Description System.Collections.Generic.IEnumerable <T> Topologically sorted list of items in source . Type Parameters Name Description T | Improve this Doc View Source TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) Performs topological sort on source . Declaration public static IEnumerable<T> TopoSort<T>(this IEnumerable<T> source, Func<T, IEnumerable<T>> dependsOnGetter, IEqualityComparer<T> equalityComparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source Collection to sort. System.Func <T, System.Collections.Generic.IEnumerable <T>> dependsOnGetter Function that returns items dependent on specified item. System.Collections.Generic.IEqualityComparer <T> equalityComparer Equality comparer for item comparison Returns Type Description System.Collections.Generic.IEnumerable <T> Topologically sorted list of items in source . Type Parameters Name Description T | Improve this Doc View Source TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) Performs topological sort on source . Declaration public static IEnumerable<T> TopoSort<T, TKey>(this ICollection<T> source, Func<T, IEnumerable<T>> dependsOnGetter, Func<T, TKey> keySelector) Parameters Type Name Description System.Collections.Generic.ICollection <T> source Collection to sort. System.Func <T, System.Collections.Generic.IEnumerable <T>> dependsOnGetter Function that returns items dependent on specified item. System.Func <T, TKey> keySelector Function that returns an item key, wich is used to compare. Returns Type Description System.Collections.Generic.IEnumerable <T> Topologically sorted list of items in source . Type Parameters Name Description T TKey | Improve this Doc View Source TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) Performs topological sort on source . Declaration public static IEnumerable<T> TopoSort<T, TKey>(this ICollection<T> source, Func<T, IEnumerable<T>> dependsOnGetter, Func<T, TKey> keySelector, IEqualityComparer<TKey> keyComparer) Parameters Type Name Description System.Collections.Generic.ICollection <T> source Collection to sort. System.Func <T, System.Collections.Generic.IEnumerable <T>> dependsOnGetter Function that returns items dependent on specified item. System.Func <T, TKey> keySelector Function that returns an item key, wich is used to compare. System.Collections.Generic.IEqualityComparer <TKey> keyComparer Equality comparer for item comparison Returns Type Description System.Collections.Generic.IEnumerable <T> Topologically sorted list of items in source . Type Parameters Name Description T TKey | Improve this Doc View Source TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) Performs topological sort on source . Declaration public static IEnumerable<T> TopoSort<T, TKey>(this IEnumerable<T> source, Func<T, IEnumerable<T>> dependsOnGetter, Func<T, TKey> keySelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source Collection to sort. System.Func <T, System.Collections.Generic.IEnumerable <T>> dependsOnGetter Function that returns items dependent on specified item. System.Func <T, TKey> keySelector Function that returns an item key, wich is used to compare. Returns Type Description System.Collections.Generic.IEnumerable <T> Topologically sorted list of items in source . Type Parameters Name Description T TKey | Improve this Doc View Source TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) Performs topological sort on source . Declaration public static IEnumerable<T> TopoSort<T, TKey>(this IEnumerable<T> source, Func<T, IEnumerable<T>> dependsOnGetter, Func<T, TKey> keySelector, IEqualityComparer<TKey> keyComparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source Collection to sort. System.Func <T, System.Collections.Generic.IEnumerable <T>> dependsOnGetter Function that returns items dependent on specified item. System.Func <T, TKey> keySelector Function that returns an item key, wich is used to compare. System.Collections.Generic.IEqualityComparer <TKey> keyComparer Equality comparer for item comparison Returns Type Description System.Collections.Generic.IEnumerable <T> Topologically sorted list of items in source . Type Parameters Name Description T TKey | Improve this Doc View Source ToStrings<T>(IEnumerable<T>) Returns string representations of source items. Declaration public static IEnumerable<string> ToStrings<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source An System.Collections.Generic.IEnumerable<T> to create strings from. Returns Type Description System.Collections.Generic.IEnumerable < System.String > Enumeration of string representation of source elements. Type Parameters Name Description T The type of the elements of source. | Improve this Doc View Source Union<T>(IEnumerable<T>, T[]) Produces the set union of two sequences by using the default equality comparer. Declaration public static IEnumerable<T> Union<T>(this IEnumerable<T> source, params T[] elements) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source An System.Collections.Generic.IEnumerable<T> whose distinct elements form the first set for the union. T[] elements An System.Collections.Generic.IEnumerable<T> whose distinct elements form the second set for the union. Returns Type Description System.Collections.Generic.IEnumerable <T> An System.Collections.Generic.IEnumerable<T> that contains the elements from both input sequences, excluding duplicates. Type Parameters Name Description T | Improve this Doc View Source UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) Produces the set union of two sequences by using the specified key to compare values. Declaration public static IEnumerable<TSource> UnionBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> first An System.Collections.Generic.IEnumerable<T> whose distinct elements form the first set for the union. System.Collections.Generic.IEnumerable <TSource> second An System.Collections.Generic.IEnumerable<T> whose distinct elements form the second set for the union. System.Func <TSource, TKey> keySelector A function to extract the key for each element. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> that contains the elements from both input sequences, excluding duplicates. Type Parameters Name Description TSource TKey | Improve this Doc View Source UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) Produces the set union of two sequences by using the specified key and System.Collections.Generic.IEqualityComparer<T> to compare values. Declaration public static IEnumerable<TSource> UnionBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Collections.Generic.IEnumerable <TSource> first An System.Collections.Generic.IEnumerable<T> whose distinct elements form the first set for the union. System.Collections.Generic.IEnumerable <TSource> second An System.Collections.Generic.IEnumerable<T> whose distinct elements form the second set for the union. System.Func <TSource, TKey> keySelector A function to extract the key for each element. System.Collections.Generic.IEqualityComparer <TKey> comparer An System.Collections.Generic.IEqualityComparer<T> to compare values. Returns Type Description System.Collections.Generic.IEnumerable <TSource> An System.Collections.Generic.IEnumerable<T> that contains the elements from both input sequences, excluding duplicates. Type Parameters Name Description TSource TKey | Improve this Doc View Source WithIndex<T>(IEnumerable<T>) Associates an index to each element of the source sequence. Declaration public static IEnumerable<IndexedItem<T>> WithIndex<T>(this IEnumerable<T> source) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> source The input sequence. Returns Type Description System.Collections.Generic.IEnumerable < IndexedItem <T>> A sequence of elements paired with their index in the sequence. Type Parameters Name Description T"
  },
  "api/main/CodeJam.Code.html": {
    "href": "api/main/CodeJam.Code.html",
    "title": "Class Code | CodeJam",
    "keywords": "Class Code Assertions class. Inheritance System.Object Code Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class Code Methods | Improve this Doc View Source AssertArgument(Boolean, String, String) Assertion for the argument value Declaration public static void AssertArgument(bool condition, string argName, string message) Parameters Type Name Description System.Boolean condition The condition to check System.String argName Name of the argument. System.String message The message. | Improve this Doc View Source AssertArgument(Boolean, String, String, Object[]) Assertion for the argument value Declaration public static void AssertArgument(bool condition, string argName, string messageFormat, params object[] args) Parameters Type Name Description System.Boolean condition The condition to check System.String argName Name of the argument. System.String messageFormat The message format. System.Object [] args The arguments. | Improve this Doc View Source AssertState(Boolean, String) State assertion Declaration public static void AssertState(bool condition, string message) Parameters Type Name Description System.Boolean condition The condition to check System.String message The message. | Improve this Doc View Source AssertState(Boolean, String, Object[]) State assertion Declaration public static void AssertState(bool condition, string messageFormat, params object[] args) Parameters Type Name Description System.Boolean condition The condition to check System.String messageFormat The message format. System.Object [] args The arguments. | Improve this Doc View Source BugIf(Boolean, String) Asserts if the given condition is satisfied. Declaration public static void BugIf(bool condition, string message) Parameters Type Name Description System.Boolean condition The condition to check. System.String message The message. | Improve this Doc View Source BugIf(Boolean, String, Object[]) Asserts if the given condition is satisfied. Declaration public static void BugIf(bool condition, string messageFormat, params object[] args) Parameters Type Name Description System.Boolean condition The condition to check. System.String messageFormat The message format. System.Object [] args The arguments. | Improve this Doc View Source DisposedIf<TDisposable>(Boolean, TDisposable) Assertion for object disposal Declaration public static void DisposedIf<TDisposable>(bool disposed, TDisposable thisReference)where TDisposable : IDisposable Parameters Type Name Description System.Boolean disposed Dispose condition. TDisposable thisReference The this reference. Type Parameters Name Description TDisposable The type of the disposable. | Improve this Doc View Source DisposedIf<TDisposable>(Boolean, TDisposable, String) Assertion for object disposal Declaration public static void DisposedIf<TDisposable>(bool disposed, TDisposable thisReference, string message)where TDisposable : IDisposable Parameters Type Name Description System.Boolean disposed Dispose condition. TDisposable thisReference The this reference. System.String message The message. Type Parameters Name Description TDisposable The type of the disposable. | Improve this Doc View Source DisposedIf<TDisposable>(Boolean, TDisposable, String, Object[]) Assertion for object disposal Declaration public static void DisposedIf<TDisposable>(bool disposed, TDisposable thisReference, string messageFormat, params object[] args)where TDisposable : IDisposable Parameters Type Name Description System.Boolean disposed Dispose condition. TDisposable thisReference The this reference. System.String messageFormat The message format. System.Object [] args The arguments. Type Parameters Name Description TDisposable The type of the disposable. | Improve this Doc View Source DisposedIfNull<TResource, TDisposable>(TResource, TDisposable) Assertion for object disposal Declaration public static void DisposedIfNull<TResource, TDisposable>(TResource resource, TDisposable thisReference)where TResource : class where TDisposable : IDisposable Parameters Type Name Description TResource resource The resource. Should be not null if the object is not disposed. TDisposable thisReference The this reference. Type Parameters Name Description TResource The type of the resource. TDisposable The type of the disposable. | Improve this Doc View Source DisposedIfNull<TResource, TDisposable>(TResource, TDisposable, String) Assertion for object disposal Declaration public static void DisposedIfNull<TResource, TDisposable>(TResource resource, TDisposable thisReference, string message)where TResource : class where TDisposable : IDisposable Parameters Type Name Description TResource resource The resource. Should be not null if the object is not disposed. TDisposable thisReference The this reference. System.String message The message. Type Parameters Name Description TResource The type of the resource. TDisposable The type of the disposable. | Improve this Doc View Source DisposedIfNull<TResource, TDisposable>(TResource, TDisposable, String, Object[]) Assertion for object disposal Declaration public static void DisposedIfNull<TResource, TDisposable>(TResource resource, TDisposable thisReference, string messageFormat, params object[] args)where TResource : class where TDisposable : IDisposable Parameters Type Name Description TResource resource The resource. Should be not null if the object is not disposed. TDisposable thisReference The this reference. System.String messageFormat The message format. System.Object [] args The arguments. Type Parameters Name Description TResource The type of the resource. TDisposable The type of the disposable. | Improve this Doc View Source InRange(Double, String, Double, Double) Assertion for the argument in range Declaration public static void InRange(double value, string argName, double fromValue, double toValue) Parameters Type Name Description System.Double value The value. System.String argName Name of the argument. System.Double fromValue From value (inclusive). System.Double toValue To value (inclusive). | Improve this Doc View Source InRange(Int32, String, Int32, Int32) Assertion for the argument in range Declaration public static void InRange(int value, string argName, int fromValue, int toValue) Parameters Type Name Description System.Int32 value The value. System.String argName Name of the argument. System.Int32 fromValue From value (inclusive). System.Int32 toValue To value (inclusive). | Improve this Doc View Source InRange<T>(T, String, T, T) Assertion for the argument in range Declaration public static void InRange<T>(T value, string argName, T fromValue, T toValue) Parameters Type Name Description T value The value. System.String argName Name of the argument. T fromValue From value (inclusive). T toValue To value (inclusive). Type Parameters Name Description T Type of the value | Improve this Doc View Source ItemNotNull<T>(IEnumerable<T>, String) Ensures that all items in arg != null Declaration public static void ItemNotNull<T>(IEnumerable<T> arg, string argName)where T : class Parameters Type Name Description System.Collections.Generic.IEnumerable <T> arg The argument. System.String argName Name of the argument. Type Parameters Name Description T Type of the value. Auto-inferred in most cases | Improve this Doc View Source NotNull<T>(T, String) Ensures that arg != null Declaration public static void NotNull<T>(T arg, string argName)where T : class Parameters Type Name Description T arg The argument. System.String argName Name of the argument. Type Parameters Name Description T Type of the value. Auto-inferred in most cases | Improve this Doc View Source NotNull<T>(Nullable<T>, String) Ensures that arg != null Declaration public static void NotNull<T>(T? arg, string argName)where T : struct Parameters Type Name Description System.Nullable <T> arg The argument. System.String argName Name of the argument. Type Parameters Name Description T Type of the value. Auto-inferred in most cases | Improve this Doc View Source NotNullAndItemNotNull<T>(IEnumerable<T>, String) Ensures that arg and its all items != null Declaration public static void NotNullAndItemNotNull<T>(IEnumerable<T> arg, string argName)where T : class Parameters Type Name Description System.Collections.Generic.IEnumerable <T> arg The argument. System.String argName Name of the argument. Type Parameters Name Description T Type of the value. Auto-inferred in most cases | Improve this Doc View Source NotNullNorEmpty(String, String) Ensures that arg is not null nor empty Declaration public static void NotNullNorEmpty(string arg, string argName) Parameters Type Name Description System.String arg The argument. System.String argName Name of the argument. | Improve this Doc View Source NotNullNorWhiteSpace(String, String) Ensures that arg is not null nor white space Declaration public static void NotNullNorWhiteSpace(string arg, string argName) Parameters Type Name Description System.String arg The argument. System.String argName Name of the argument. | Improve this Doc View Source ValidCount(Int32, String) Asserts if the passed value is not a valid count. Declaration public static void ValidCount(int count, string argName) Parameters Type Name Description System.Int32 count The count value. System.String argName The name of the argument. | Improve this Doc View Source ValidCount(Int32, String, Int32) Asserts if the passed value is not a valid count. Declaration public static void ValidCount(int count, string argName, int length) Parameters Type Name Description System.Int32 count The count value. System.String argName The name of the argument. System.Int32 length The length. | Improve this Doc View Source ValidIndex(Int32, String) Assertion for index in range Declaration public static void ValidIndex(int index, string argName) Parameters Type Name Description System.Int32 index The index. System.String argName Name of the argument. | Improve this Doc View Source ValidIndex(Int32, String, Int32) Assertion for index in range Declaration public static void ValidIndex(int index, string argName, int length) Parameters Type Name Description System.Int32 index The index. System.String argName Name of the argument. System.Int32 length The length. | Improve this Doc View Source ValidIndexAndCount(Int32, String, Int32, String, Int32) Assertion for startIndex-count pair Declaration public static void ValidIndexAndCount(int startIndex, string startIndexName, int count, string countName, int length) Parameters Type Name Description System.Int32 startIndex The start index. System.String startIndexName Start name of the index. System.Int32 count The count. System.String countName Name of the count. System.Int32 length The length. | Improve this Doc View Source ValidIndexPair(Int32, String, Int32, String, Int32) Assertion for from-to index pair Declaration public static void ValidIndexPair(int fromIndex, string fromIndexName, int toIndex, string toIndexName, int length) Parameters Type Name Description System.Int32 fromIndex From index. System.String fromIndexName Name of from index. System.Int32 toIndex To index. System.String toIndexName Name of to index. System.Int32 length The length."
  },
  "api/blocks/CodeJam.Metadata.html": {
    "href": "api/blocks/CodeJam.Metadata.html",
    "title": "Namespace CodeJam.Metadata | CodeJam",
    "keywords": "Namespace CodeJam.Metadata Classes MetadataException Defines the base class for the namespace exceptions. XmlAttributeReader Reads type metadata such as type and members attributes from XML. Interfaces IMetadataReader Metadata reader interface."
  },
  "api/blocks/CodeJam.Mapping.ScalarTypeAttribute.html": {
    "href": "api/blocks/CodeJam.Mapping.ScalarTypeAttribute.html",
    "title": "Class ScalarTypeAttribute | CodeJam",
    "keywords": "Class ScalarTypeAttribute Defines target type as scalar type. Inheritance System.Object System.Attribute ScalarTypeAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax [AttributeUsage(AttributeTargets.Class | AttributeTargets.Struct, AllowMultiple = true)] public class ScalarTypeAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source ScalarTypeAttribute() Defines target type as scalar type. Declaration public ScalarTypeAttribute() | Improve this Doc View Source ScalarTypeAttribute(Boolean) Defines target type as scalar type. Declaration public ScalarTypeAttribute(bool isScalar) Parameters Type Name Description System.Boolean isScalar true if target type is a scalar type. | Improve this Doc View Source ScalarTypeAttribute(String) Defines target type as scalar type. Declaration public ScalarTypeAttribute(string configuration) Parameters Type Name Description System.String configuration Configuration name. | Improve this Doc View Source ScalarTypeAttribute(String, Boolean) Defines target type as scalar type. Declaration public ScalarTypeAttribute(string configuration, bool isScalar) Parameters Type Name Description System.String configuration Configuration name. System.Boolean isScalar true if target type is a scalar type. Properties | Improve this Doc View Source Configuration Configuration name. Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsScalar true if target type is a scalar type. Declaration public bool IsScalar { get; set; } Property Value Type Description System.Boolean Extension Methods Map.DeepCopy<T>(T)"
  },
  "api/blocks/CodeJam.Mapping.DefaultValue-1.html": {
    "href": "api/blocks/CodeJam.Mapping.DefaultValue-1.html",
    "title": "Class DefaultValue<T> | CodeJam",
    "keywords": "Class DefaultValue<T> Provides default value service. Inheritance System.Object DefaultValue<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax public static class DefaultValue<T> Type Parameters Name Description T Properties | Improve this Doc View Source Value Gets default value for provided System.Type . Declaration public static T Value { get; set; } Property Value Type Description T"
  },
  "api/main/CodeJam.html": {
    "href": "api/main/CodeJam.html",
    "title": "Namespace CodeJam | CodeJam",
    "keywords": "Namespace CodeJam Classes Algorithms Miscellaneous algorithms Code Assertions class. CodeExceptions Exception factory class DebugCode Debug-time assertions class. Common constants DebugEnumCode Enum assertions class. DebugUriCode URI assertions class. Disposable Helper methods for System.IDisposable DisposableExtensions The System.IDisposable extensions. EnumCode Enum assertions class. EnumCodeExceptions Enum exception factory class EnumHelper Extension methods for Enum types EnumValue Enum value information. EnumValues Holds information about enum members ExceptionExtensions The System.Exception class extensions. Fn Helper methods for Func<TResult>(Func<TResult>) and Action(Action) delegates. Fn<T> Helper methods for System.Func<TResult> HashCode Hash code helper methods. HGlobal HGlobal wrapper. HGlobalScope Wraps System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr) and System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr) . HGlobalScope<T> Wraps Mashal.AllocHGlobal and Marshal.FreeHGlobal using generic. Lazy Helper methods for System.Lazy<T> class. Memory The utility class for working with arrays of primitive types. NullableHelper Helper method for nullable types. OneOf<T1, T2> Tagged union for 2 types. OneOf<T1, T2, T3> Tagged union for 3 types. OneOf<T1, T2, T3, T4> Tagged union for 4 types. OneOf<T1, T2, T3, T4, T5> Tagged union for 5 types. OneOf<T1, T2, T3, T4, T5, T6> Tagged union for 6 types. OneOf<T1, T2, T3, T4, T5, T6, T7> Tagged union for 7 types. OneOf<T1, T2, T3, T4, T5, T6, T7, T8> Tagged union for 8 types. Option Methods to work with Option Option<T> Represents an optional value. Option<T>.None Represents an Option without value. Option<T>.Some Represents an Option with value. UriCode URI assertions class. UriCodeExceptions Uri exception factory class UriHelper Helper methods for System.Uri class. ValueOption Methods to work with ValueOption Structs Disposable.EmptyDisposable The System.IDisposable implementation with no action on Dispose() ValueOneOf<T1, T2> Value type tagged union for 2 types. ValueOneOf<T1, T2, T3> Value type tagged union for 3 types. ValueOneOf<T1, T2, T3, T4> Value type tagged union for 4 types. ValueOneOf<T1, T2, T3, T4, T5> Value type tagged union for 5 types. ValueOneOf<T1, T2, T3, T4, T5, T6> Value type tagged union for 6 types. ValueOneOf<T1, T2, T3, T4, T5, T6, T7> Value type tagged union for 7 types. ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> Value type tagged union for 8 types. ValueOption<T> Represents a value type that can be assigned null. Interfaces IOneOf<T1, T2> Common interface for OneOf<T1, T2> and ValueOneOf<T1, T2> . IOneOf<T1, T2, T3> Common interface for OneOf<T1, T2, T3> and ValueOneOf<T1, T2, T3> . IOneOf<T1, T2, T3, T4> Common interface for OneOf<T1, T2, T3, T4> and ValueOneOf<T1, T2, T3, T4> . IOneOf<T1, T2, T3, T4, T5> Common interface for OneOf<T1, T2, T3, T4, T5> and ValueOneOf<T1, T2, T3, T4, T5> . IOneOf<T1, T2, T3, T4, T5, T6> Common interface for OneOf<T1, T2, T3, T4, T5, T6> and ValueOneOf<T1, T2, T3, T4, T5, T6> . IOneOf<T1, T2, T3, T4, T5, T6, T7> Common interface for OneOf<T1, T2, T3, T4, T5, T6, T7> and ValueOneOf<T1, T2, T3, T4, T5, T6, T7> . IOneOf<T1, T2, T3, T4, T5, T6, T7, T8> Common interface for OneOf<T1, T2, T3, T4, T5, T6, T7, T8> and ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> . IOption<T> Option<T> and ValueOption<T> common interface."
  },
  "api/main/CodeJam.OneOf-5.html": {
    "href": "api/main/CodeJam.OneOf-5.html",
    "title": "Class OneOf<T1, T2, T3, T4, T5> | CodeJam",
    "keywords": "Class OneOf<T1, T2, T3, T4, T5> Tagged union for 5 types. Inheritance System.Object OneOf<T1, T2, T3, T4, T5> Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public abstract class OneOf<T1, T2, T3, T4, T5> : IOneOf<T1, T2, T3, T4, T5>, IEquatable<OneOf<T1, T2, T3, T4, T5>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 T5 Type of case 5 Properties | Improve this Doc View Source IsCase1 Declaration public abstract bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public abstract bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5>.IsCase2 | Improve this Doc View Source IsCase3 Declaration public abstract bool IsCase3 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5>.IsCase3 | Improve this Doc View Source IsCase4 Declaration public abstract bool IsCase4 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5>.IsCase4 | Improve this Doc View Source IsCase5 Declaration public abstract bool IsCase5 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5>.IsCase5 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2, T3, T4, T5> for value of type T1 . Declaration public static OneOf<T1, T2, T3, T4, T5> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5> Value of OneOf<T1, T2, T3, T4, T5> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2, T3, T4, T5> for value of type T2 . Declaration public static OneOf<T1, T2, T3, T4, T5> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5> Value of OneOf<T1, T2, T3, T4, T5> . | Improve this Doc View Source Create(T3) Creates instance of OneOf<T1, T2, T3, T4, T5> for value of type T3 . Declaration public static OneOf<T1, T2, T3, T4, T5> Create(T3 value) Parameters Type Name Description T3 value Value of type T3 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5> Value of OneOf<T1, T2, T3, T4, T5> . | Improve this Doc View Source Create(T4) Creates instance of OneOf<T1, T2, T3, T4, T5> for value of type T4 . Declaration public static OneOf<T1, T2, T3, T4, T5> Create(T4 value) Parameters Type Name Description T4 value Value of type T4 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5> Value of OneOf<T1, T2, T3, T4, T5> . | Improve this Doc View Source Create(T5) Creates instance of OneOf<T1, T2, T3, T4, T5> for value of type T5 . Declaration public static OneOf<T1, T2, T3, T4, T5> Create(T5 value) Parameters Type Name Description T5 value Value of type T5 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5> Value of OneOf<T1, T2, T3, T4, T5> . | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>) Declaration public abstract void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action, Action<T5> case5Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action System.Action <T3> case3Action System.Action <T4> case4Action System.Action <T5> case5Action Implements IOneOf<T1, T2, T3, T4, T5>.Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>) | Improve this Doc View Source Equals(OneOf<T1, T2, T3, T4, T5>) Declaration public abstract bool Equals(OneOf<T1, T2, T3, T4, T5> other) Parameters Type Name Description OneOf <T1, T2, T3, T4, T5> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>) Declaration public abstract TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector, Func<T5, TResult> case5Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector System.Func <T3, TResult> case3Selector System.Func <T4, TResult> case4Selector System.Func <T5, TResult> case5Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2, T3, T4, T5>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>) Operators | Improve this Doc View Source Equality(OneOf<T1, T2, T3, T4, T5>, OneOf<T1, T2, T3, T4, T5>) Equality operator. Declaration public static bool operator ==(OneOf<T1, T2, T3, T4, T5> left, OneOf<T1, T2, T3, T4, T5> right) Parameters Type Name Description OneOf <T1, T2, T3, T4, T5> left Left parameter. OneOf <T1, T2, T3, T4, T5> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to OneOf<T1, T2, T3, T4, T5>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5> Instance of OneOf<T1, T2, T3, T4, T5> for value of type T1 . | Improve this Doc View Source Implicit(T2 to OneOf<T1, T2, T3, T4, T5>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5> Instance of OneOf<T1, T2, T3, T4, T5> for value of type T2 . | Improve this Doc View Source Implicit(T3 to OneOf<T1, T2, T3, T4, T5>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5>(T3 value) Parameters Type Name Description T3 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5> Instance of OneOf<T1, T2, T3, T4, T5> for value of type T3 . | Improve this Doc View Source Implicit(T4 to OneOf<T1, T2, T3, T4, T5>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5>(T4 value) Parameters Type Name Description T4 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5> Instance of OneOf<T1, T2, T3, T4, T5> for value of type T4 . | Improve this Doc View Source Implicit(T5 to OneOf<T1, T2, T3, T4, T5>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5>(T5 value) Parameters Type Name Description T5 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5> Instance of OneOf<T1, T2, T3, T4, T5> for value of type T5 . | Improve this Doc View Source Inequality(OneOf<T1, T2, T3, T4, T5>, OneOf<T1, T2, T3, T4, T5>) Unequality operator. Declaration public static bool operator !=(OneOf<T1, T2, T3, T4, T5> left, OneOf<T1, T2, T3, T4, T5> right) Parameters Type Name Description OneOf <T1, T2, T3, T4, T5> left Left parameter. OneOf <T1, T2, T3, T4, T5> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.IO.html": {
    "href": "api/main/CodeJam.IO.html",
    "title": "Namespace CodeJam.IO | CodeJam",
    "keywords": "Namespace CodeJam.IO Classes DebugIoCode IO assertions class. IoCode IO assertions class. IoCodeExceptions IO exception factory class PathHelpers Helpers for System.IO.Path . TempData Methods to work with temporary data. TempData.TempBase Base class for temp file|directory objects. Contains logic to proof the removal will be performed even on resource leak. TempData.TempDirectory Wraps reference on a temp directory meant to be deleted on dispose TempData.TempFile Wraps reference on a temp file meant to be deleted on dispose"
  },
  "api/main/CodeJam.IO.TempData.html": {
    "href": "api/main/CodeJam.IO.TempData.html",
    "title": "Class TempData | CodeJam",
    "keywords": "Class TempData Methods to work with temporary data. Inheritance System.Object TempData Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.IO Assembly : CodeJam.dll Syntax public static class TempData Methods | Improve this Doc View Source CreateDirectory() Creates temp directory and returns System.IDisposable to free it. Declaration public static TempData.TempDirectory CreateDirectory() Returns Type Description TempData.TempDirectory Temp directory to be freed on dispose. | Improve this Doc View Source CreateDirectory(String) Creates temp directory and returns System.IDisposable to free it. Declaration public static TempData.TempDirectory CreateDirectory(string dirPath) Parameters Type Name Description System.String dirPath The dir path. Returns Type Description TempData.TempDirectory Temp directory to be freed on dispose. | Improve this Doc View Source CreateDirectory(String, String) Creates temp directory and returns System.IDisposable to free it. Declaration public static TempData.TempDirectory CreateDirectory(string dirPath, string directoryName) Parameters Type Name Description System.String dirPath The dir path. System.String directoryName Name of the temp directory. Returns Type Description TempData.TempDirectory Temp directory to be freed on dispose. | Improve this Doc View Source CreateFile() Creates temp file and return disposable handle. Declaration public static TempData.TempFile CreateFile() Returns Type Description TempData.TempFile Temp file to be freed on dispose. | Improve this Doc View Source CreateFile(String) Creates temp file and return disposable handle. Declaration public static TempData.TempFile CreateFile(string dirPath) Parameters Type Name Description System.String dirPath The dir path. Returns Type Description TempData.TempFile Temp file to be freed on dispose. | Improve this Doc View Source CreateFile(String, String) Creates temp file and return disposable handle. Declaration public static TempData.TempFile CreateFile(string dirPath, string fileName) Parameters Type Name Description System.String dirPath The dir path. System.String fileName Name of the temp file. Returns Type Description TempData.TempFile Temp file to be freed on dispose. Exceptions Type Condition System.ArgumentNullException dirPath is null. | Improve this Doc View Source CreateFileStream() Creates stream and returns disposable handler. Declaration public static FileStream CreateFileStream() Returns Type Description System.IO.FileStream Temp stream to be freed on dispose. | Improve this Doc View Source CreateFileStream(FileAccess) Creates stream and returns disposable handler. Declaration public static FileStream CreateFileStream(FileAccess fileAccess) Parameters Type Name Description System.IO.FileAccess fileAccess The file access. Returns Type Description System.IO.FileStream Temp stream to be freed on dispose. | Improve this Doc View Source CreateFileStream(String, String, FileAccess) Creates stream and returns disposable handler. Declaration public static FileStream CreateFileStream(string dirPath, string fileName = null, FileAccess fileAccess = FileAccess.Read | FileAccess.Write | FileAccess.ReadWrite) Parameters Type Name Description System.String dirPath The dir path. System.String fileName Name of the temp file. System.IO.FileAccess fileAccess The file access. Returns Type Description System.IO.FileStream Temp stream to be freed on dispose. | Improve this Doc View Source GetTempName() Returns a random name for a temp file or directory. Declaration public static string GetTempName() Returns Type Description System.String A random name Remarks The resulting name is a local name (does not include a base path) | Improve this Doc View Source GetTempName(String) Returns a random name for a temp file or directory. Declaration public static string GetTempName(string extension) Parameters Type Name Description System.String extension The extension for thew filename. Returns Type Description System.String A random name Remarks The resulting name is a local name (does not include a base path)"
  },
  "api/main/CodeJam.Expressions.ExpressionExtensions.html": {
    "href": "api/main/CodeJam.Expressions.ExpressionExtensions.html",
    "title": "Class ExpressionExtensions | CodeJam",
    "keywords": "Class ExpressionExtensions System.Linq.Expressions.Expression Extensions. Inheritance System.Object ExpressionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Expressions Assembly : CodeJam.dll Syntax public static class ExpressionExtensions Methods | Improve this Doc View Source Find(Expression, Func<Expression, Boolean>) Finds and expression in expression tree. Declaration public static Expression Find(this Expression expr, Func<Expression, bool> func) Parameters Type Name Description System.Linq.Expressions.Expression expr System.Linq.Expressions.Expression to VisitInternal. System.Func < System.Linq.Expressions.Expression , System.Boolean > func Find function. Return true if expression is found. Returns Type Description System.Linq.Expressions.Expression Found expression or null. | Improve this Doc View Source Find(Expression, Expression) Finds an expression in expression tree. Declaration public static Expression Find(this Expression expr, Expression exprToFind) Parameters Type Name Description System.Linq.Expressions.Expression expr System.Linq.Expressions.Expression to VisitInternal. System.Linq.Expressions.Expression exprToFind Expression to find. Returns Type Description System.Linq.Expressions.Expression Found expression or null. | Improve this Doc View Source GetConstructor(LambdaExpression) Returns the constructor. Declaration public static ConstructorInfo GetConstructor(this LambdaExpression expression) Parameters Type Name Description System.Linq.Expressions.LambdaExpression expression The expression to analyze. Returns Type Description System.Reflection.ConstructorInfo The System.Reflection.ConstructorInfo instance. | Improve this Doc View Source GetDebugView(Expression) Gets the DebugView internal property value of provided expression. Declaration public static string GetDebugView(this Expression expression) Parameters Type Name Description System.Linq.Expressions.Expression expression Expression to get DebugView. Returns Type Description System.String DebugView value. | Improve this Doc View Source GetField(LambdaExpression) Returns the field. Declaration public static FieldInfo GetField(this LambdaExpression expression) Parameters Type Name Description System.Linq.Expressions.LambdaExpression expression The expression to analyze. Returns Type Description System.Reflection.FieldInfo The System.Reflection.FieldInfo instance. | Improve this Doc View Source GetFullPropertyName(LambdaExpression) Returns a composited name of the property. Declaration public static string GetFullPropertyName(this LambdaExpression expression) Parameters Type Name Description System.Linq.Expressions.LambdaExpression expression The expression to analyze. Returns Type Description System.String A composited name of the property. | Improve this Doc View Source GetMemberInfo(LambdaExpression) Gets the System.Reflection.MemberInfo . Declaration public static MemberInfo GetMemberInfo(this LambdaExpression expression) Parameters Type Name Description System.Linq.Expressions.LambdaExpression expression The expression to analyze. Returns Type Description System.Reflection.MemberInfo The System.Reflection.MemberInfo instance. | Improve this Doc View Source GetMembersInfo(LambdaExpression) Gets the System.Reflection.MemberInfo . Declaration public static MemberInfo[] GetMembersInfo(this LambdaExpression expression) Parameters Type Name Description System.Linq.Expressions.LambdaExpression expression The expression to analyze. Returns Type Description System.Reflection.MemberInfo [] The System.Reflection.MemberInfo instance. | Improve this Doc View Source GetMethod(LambdaExpression) Returns the method. Declaration public static MethodInfo GetMethod(this LambdaExpression expression) Parameters Type Name Description System.Linq.Expressions.LambdaExpression expression The expression to analyze. Returns Type Description System.Reflection.MethodInfo The System.Reflection.MethodInfo instance. | Improve this Doc View Source GetMethodName(LambdaExpression) Returns a name of the method. Declaration public static string GetMethodName(this LambdaExpression expression) Parameters Type Name Description System.Linq.Expressions.LambdaExpression expression The expression to analyze. Returns Type Description System.String A name of the method. | Improve this Doc View Source GetProperty(LambdaExpression) Returns the property. Declaration public static PropertyInfo GetProperty(this LambdaExpression expression) Parameters Type Name Description System.Linq.Expressions.LambdaExpression expression The expression to analyze. Returns Type Description System.Reflection.PropertyInfo The System.Reflection.PropertyInfo instance. | Improve this Doc View Source GetPropertyName(LambdaExpression) Returns a name of the property. Declaration public static string GetPropertyName(this LambdaExpression expression) Parameters Type Name Description System.Linq.Expressions.LambdaExpression expression The expression to analyze. Returns Type Description System.String A name of the property. | Improve this Doc View Source ReplaceParameters(LambdaExpression, Expression) Replaces lambda body parameter and returns modified body. Declaration public static Expression ReplaceParameters(this LambdaExpression lambda, Expression exprToReplaceParameter) Parameters Type Name Description System.Linq.Expressions.LambdaExpression lambda Original lambda. System.Linq.Expressions.Expression exprToReplaceParameter An expression to replace lambda pameter. Returns Type Description System.Linq.Expressions.Expression Modified body. | Improve this Doc View Source ReplaceParameters(LambdaExpression, Expression[]) Replaces lambda body parameters and returns modified body. Declaration public static Expression ReplaceParameters(this LambdaExpression lambda, params Expression[] exprToReplaceParameter) Parameters Type Name Description System.Linq.Expressions.LambdaExpression lambda Original lambda. System.Linq.Expressions.Expression [] exprToReplaceParameter Expressions to replace lambda pameters. Returns Type Description System.Linq.Expressions.Expression Modified body. | Improve this Doc View Source Transform(Expression, Func<Expression, Expression>) Tranforms original expression. Declaration public static Expression Transform(this Expression expr, Func<Expression, Expression> func) Parameters Type Name Description System.Linq.Expressions.Expression expr Expression to transform. System.Func < System.Linq.Expressions.Expression , System.Linq.Expressions.Expression > func Transform function. Returns Type Description System.Linq.Expressions.Expression Modified expression. | Improve this Doc View Source Transform<T>(T, Func<Expression, Expression>) Tranforms original expression. Declaration public static T Transform<T>(this T expr, Func<Expression, Expression> func)where T : LambdaExpression Parameters Type Name Description T expr Expression to transform. System.Func < System.Linq.Expressions.Expression , System.Linq.Expressions.Expression > func Transform function. Returns Type Description T Modified expression. Type Parameters Name Description T | Improve this Doc View Source Visit(Expression, Action<Expression>) Visits expression tree. Declaration public static void Visit(this Expression expr, Action<Expression> func) Parameters Type Name Description System.Linq.Expressions.Expression expr System.Linq.Expressions.Expression to visit. System.Action < System.Linq.Expressions.Expression > func Visit action. | Improve this Doc View Source Visit(Expression, Func<Expression, Boolean>) Visits expression tree. Declaration public static void Visit(this Expression expr, Func<Expression, bool> func) Parameters Type Name Description System.Linq.Expressions.Expression expr System.Linq.Expressions.Expression to visit. System.Func < System.Linq.Expressions.Expression , System.Boolean > func Visit function. Return true to stop."
  },
  "api/main/CodeJam.Expressions.Expr.html": {
    "href": "api/main/CodeJam.Expressions.Expr.html",
    "title": "Class Expr | CodeJam",
    "keywords": "Class Expr Provides helper methods for Action and Func delegates. Inheritance System.Object Expr Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Expressions Assembly : CodeJam.dll Syntax public static class Expr Methods | Improve this Doc View Source Action(Expression<Action>) Helper for type inference from the lambda expression. Declaration public static Expression<Action> Action(Expression<Action> actionExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action > actionExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Action > The lambda expression passed. | Improve this Doc View Source Action<T1>(Expression<Action<T1>>) Helper for type inference from the lambda expression. Declaration public static Expression<Action<T1>> Action<T1>(Expression<Action<T1>> actionExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action <T1>> actionExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Action <T1>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. | Improve this Doc View Source Action<T1, T2>(Expression<Action<T1, T2>>) Helper for type inference from the lambda expression. Declaration public static Expression<Action<T1, T2>> Action<T1, T2>(Expression<Action<T1, T2>> actionExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action <T1, T2>> actionExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Action <T1, T2>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. | Improve this Doc View Source Action<T1, T2, T3>(Expression<Action<T1, T2, T3>>) Helper for type inference from the lambda expression. Declaration public static Expression<Action<T1, T2, T3>> Action<T1, T2, T3>(Expression<Action<T1, T2, T3>> actionExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action <T1, T2, T3>> actionExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Action <T1, T2, T3>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. | Improve this Doc View Source Action<T1, T2, T3, T4>(Expression<Action<T1, T2, T3, T4>>) Helper for type inference from the lambda expression. Declaration public static Expression<Action<T1, T2, T3, T4>> Action<T1, T2, T3, T4>(Expression<Action<T1, T2, T3, T4>> actionExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action <T1, T2, T3, T4>> actionExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Action <T1, T2, T3, T4>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. | Improve this Doc View Source Action<T1, T2, T3, T4, T5>(Expression<Action<T1, T2, T3, T4, T5>>) Helper for type inference from the lambda expression. Declaration public static Expression<Action<T1, T2, T3, T4, T5>> Action<T1, T2, T3, T4, T5>(Expression<Action<T1, T2, T3, T4, T5>> actionExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action <T1, T2, T3, T4, T5>> actionExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Action <T1, T2, T3, T4, T5>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. T5 The type of argument #5. | Improve this Doc View Source Action<T1, T2, T3, T4, T5, T6>(Expression<Action<T1, T2, T3, T4, T5, T6>>) Helper for type inference from the lambda expression. Declaration public static Expression<Action<T1, T2, T3, T4, T5, T6>> Action<T1, T2, T3, T4, T5, T6>(Expression<Action<T1, T2, T3, T4, T5, T6>> actionExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action <T1, T2, T3, T4, T5, T6>> actionExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Action <T1, T2, T3, T4, T5, T6>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. T5 The type of argument #5. T6 The type of argument #6. | Improve this Doc View Source Action<T1, T2, T3, T4, T5, T6, T7>(Expression<Action<T1, T2, T3, T4, T5, T6, T7>>) Helper for type inference from the lambda expression. Declaration public static Expression<Action<T1, T2, T3, T4, T5, T6, T7>> Action<T1, T2, T3, T4, T5, T6, T7>(Expression<Action<T1, T2, T3, T4, T5, T6, T7>> actionExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action <T1, T2, T3, T4, T5, T6, T7>> actionExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Action <T1, T2, T3, T4, T5, T6, T7>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. T5 The type of argument #5. T6 The type of argument #6. T7 The type of argument #7. | Improve this Doc View Source Func<TResult>(Expression<Func<TResult>>) Helper for type inference from the lambda expression. Declaration public static Expression<Func<TResult>> Func<TResult>(Expression<Func<TResult>> funcExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TResult>> funcExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Func <TResult>> The lambda expression passed. Type Parameters Name Description TResult The result type. | Improve this Doc View Source Func<T1, TResult>(Expression<Func<T1, TResult>>) Helper for type inference from the lambda expression. Declaration public static Expression<Func<T1, TResult>> Func<T1, TResult>(Expression<Func<T1, TResult>> funcExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T1, TResult>> funcExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Func <T1, TResult>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. TResult The result type. | Improve this Doc View Source Func<T1, T2, TResult>(Expression<Func<T1, T2, TResult>>) Helper for type inference from the lambda expression. Declaration public static Expression<Func<T1, T2, TResult>> Func<T1, T2, TResult>(Expression<Func<T1, T2, TResult>> funcExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T1, T2, TResult>> funcExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Func <T1, T2, TResult>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. TResult The result type. | Improve this Doc View Source Func<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>>) Helper for type inference from the lambda expression. Declaration public static Expression<Func<T1, T2, T3, TResult>> Func<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>> funcExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T1, T2, T3, TResult>> funcExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Func <T1, T2, T3, TResult>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. TResult The result type. | Improve this Doc View Source Func<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>>) Helper for type inference from the lambda expression. Declaration public static Expression<Func<T1, T2, T3, T4, TResult>> Func<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>> funcExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T1, T2, T3, T4, TResult>> funcExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Func <T1, T2, T3, T4, TResult>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. TResult The result type. | Improve this Doc View Source Func<T1, T2, T3, T4, T5, TResult>(Expression<Func<T1, T2, T3, T4, T5, TResult>>) Helper for type inference from the lambda expression. Declaration public static Expression<Func<T1, T2, T3, T4, T5, TResult>> Func<T1, T2, T3, T4, T5, TResult>(Expression<Func<T1, T2, T3, T4, T5, TResult>> funcExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T1, T2, T3, T4, T5, TResult>> funcExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Func <T1, T2, T3, T4, T5, TResult>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. T5 The type of argument #5. TResult The result type. | Improve this Doc View Source Func<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, TResult>>) Helper for type inference from the lambda expression. Declaration public static Expression<Func<T1, T2, T3, T4, T5, T6, TResult>> Func<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, TResult>> funcExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T1, T2, T3, T4, T5, T6, TResult>> funcExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Func <T1, T2, T3, T4, T5, T6, TResult>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. T5 The type of argument #5. T6 The type of argument #6. TResult The result type. | Improve this Doc View Source Func<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>>) Helper for type inference from the lambda expression. Declaration public static Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> Func<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> funcExpression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T1, T2, T3, T4, T5, T6, T7, TResult>> funcExpression The lambda expression. Returns Type Description System.Linq.Expressions.Expression < System.Func <T1, T2, T3, T4, T5, T6, T7, TResult>> The lambda expression passed. Type Parameters Name Description T1 The type of argument #1. T2 The type of argument #2. T3 The type of argument #3. T4 The type of argument #4. T5 The type of argument #5. T6 The type of argument #6. T7 The type of argument #7. TResult The result type."
  },
  "api/main/CodeJam.DebugCode.html": {
    "href": "api/main/CodeJam.DebugCode.html",
    "title": "Class DebugCode | CodeJam",
    "keywords": "Class DebugCode Debug-time assertions class. Common constants Inheritance System.Object DebugCode Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class DebugCode Fields | Improve this Doc View Source DebugCondition Conditional symbol for debug builds. Declaration public const string DebugCondition = \"DEBUG\" Field Value Type Description System.String Methods | Improve this Doc View Source AssertArgument(Boolean, String, String) Assertion for the argument value Declaration [Conditional(\"DEBUG\")] public static void AssertArgument(bool condition, string argName, string message) Parameters Type Name Description System.Boolean condition The condition to check System.String argName Name of the argument. System.String message The message. | Improve this Doc View Source AssertArgument(Boolean, String, String, Object[]) Assertion for the argument value Declaration [Conditional(\"DEBUG\")] public static void AssertArgument(bool condition, string argName, string messageFormat, params object[] args) Parameters Type Name Description System.Boolean condition The condition to check System.String argName Name of the argument. System.String messageFormat The message format. System.Object [] args The arguments. | Improve this Doc View Source AssertState(Boolean, String) State assertion Declaration [Conditional(\"DEBUG\")] public static void AssertState(bool condition, string message) Parameters Type Name Description System.Boolean condition The condition to check System.String message The message. | Improve this Doc View Source AssertState(Boolean, String, Object[]) State assertion Declaration [Conditional(\"DEBUG\")] public static void AssertState(bool condition, string messageFormat, params object[] args) Parameters Type Name Description System.Boolean condition The condition to check System.String messageFormat The message format. System.Object [] args The arguments. | Improve this Doc View Source BugIf(Boolean, String) Asserts if the given condition is satisfied. Declaration [Conditional(\"DEBUG\")] public static void BugIf(bool condition, string message) Parameters Type Name Description System.Boolean condition The condition to check. System.String message The message. | Improve this Doc View Source BugIf(Boolean, String, Object[]) Asserts if the given condition is satisfied. Declaration [Conditional(\"DEBUG\")] public static void BugIf(bool condition, string messageFormat, params object[] args) Parameters Type Name Description System.Boolean condition The condition to check. System.String messageFormat The message format. System.Object [] args The arguments. | Improve this Doc View Source InRange(Double, String, Double, Double) Assertion for the argument in range Declaration [Conditional(\"DEBUG\")] public static void InRange(double value, string argName, double fromValue, double toValue) Parameters Type Name Description System.Double value The value. System.String argName Name of the argument. System.Double fromValue From value (inclusive). System.Double toValue To value (inclusive). | Improve this Doc View Source InRange(Int32, String, Int32, Int32) Assertion for the argument in range Declaration [Conditional(\"DEBUG\")] public static void InRange(int value, string argName, int fromValue, int toValue) Parameters Type Name Description System.Int32 value The value. System.String argName Name of the argument. System.Int32 fromValue From value (inclusive). System.Int32 toValue To value (inclusive). | Improve this Doc View Source InRange<T>(T, String, T, T) Assertion for the argument in range Declaration [Conditional(\"DEBUG\")] public static void InRange<T>(T value, string argName, T fromValue, T toValue) Parameters Type Name Description T value The value. System.String argName Name of the argument. T fromValue From value (inclusive). T toValue To value (inclusive). Type Parameters Name Description T Type of the value | Improve this Doc View Source ItemNotNull<T>(IEnumerable<T>, String) Ensures that all items in arg != null Declaration [Conditional(\"DEBUG\")] public static void ItemNotNull<T>(IEnumerable<T> arg, string argName)where T : class Parameters Type Name Description System.Collections.Generic.IEnumerable <T> arg The argument. System.String argName Name of the argument. Type Parameters Name Description T Type of the value. Auto-inferred in most cases | Improve this Doc View Source NotNull<T>(T, String) Ensures that arg != null Declaration [Conditional(\"DEBUG\")] public static void NotNull<T>(T arg, string argName)where T : class Parameters Type Name Description T arg The argument. System.String argName Name of the argument. Type Parameters Name Description T Type of the value. Auto-inferred in most cases | Improve this Doc View Source NotNull<T>(Nullable<T>, String) Ensures that arg != null Declaration [Conditional(\"DEBUG\")] public static void NotNull<T>(T? arg, string argName)where T : struct Parameters Type Name Description System.Nullable <T> arg The argument. System.String argName Name of the argument. Type Parameters Name Description T Type of the value. Auto-inferred in most cases | Improve this Doc View Source NotNullAndItemNotNull<T>(IEnumerable<T>, String) Ensures that arg and its all items != null Declaration [Conditional(\"DEBUG\")] public static void NotNullAndItemNotNull<T>(IEnumerable<T> arg, string argName)where T : class Parameters Type Name Description System.Collections.Generic.IEnumerable <T> arg The argument. System.String argName Name of the argument. Type Parameters Name Description T Type of the value. Auto-inferred in most cases | Improve this Doc View Source NotNullNorEmpty(String, String) Ensures that arg is not null nor empty Declaration [Conditional(\"DEBUG\")] public static void NotNullNorEmpty(string arg, string argName) Parameters Type Name Description System.String arg The argument. System.String argName Name of the argument. | Improve this Doc View Source NotNullNorWhiteSpace(String, String) Ensures that arg is not null nor white space Declaration [Conditional(\"DEBUG\")] public static void NotNullNorWhiteSpace(string arg, string argName) Parameters Type Name Description System.String arg The argument. System.String argName Name of the argument. | Improve this Doc View Source ValidCount(Int32, String) Asserts if the passed value is not a valid count. Declaration [Conditional(\"DEBUG\")] public static void ValidCount(int count, string argName) Parameters Type Name Description System.Int32 count The count value. System.String argName The name of the argument. | Improve this Doc View Source ValidCount(Int32, String, Int32) Asserts if the passed value is not a valid count. Declaration [Conditional(\"DEBUG\")] public static void ValidCount(int count, string argName, int length) Parameters Type Name Description System.Int32 count The count value. System.String argName The name of the argument. System.Int32 length The length. | Improve this Doc View Source ValidIndex(Int32, String) Assertion for index in range Declaration [Conditional(\"DEBUG\")] public static void ValidIndex(int index, string argName) Parameters Type Name Description System.Int32 index The index. System.String argName Name of the argument. | Improve this Doc View Source ValidIndex(Int32, String, Int32) Assertion for index in range Declaration [Conditional(\"DEBUG\")] public static void ValidIndex(int index, string argName, int length) Parameters Type Name Description System.Int32 index The index. System.String argName Name of the argument. System.Int32 length The length. | Improve this Doc View Source ValidIndexAndCount(Int32, String, Int32, String, Int32) Assertion for startIndex-count pair Declaration [Conditional(\"DEBUG\")] public static void ValidIndexAndCount(int startIndex, string startIndexName, int count, string countName, int length) Parameters Type Name Description System.Int32 startIndex The start index. System.String startIndexName Start name of the index. System.Int32 count The count. System.String countName Name of the count. System.Int32 length The length. | Improve this Doc View Source ValidIndexPair(Int32, String, Int32, String, Int32) Assertion for from-to index pair Declaration [Conditional(\"DEBUG\")] public static void ValidIndexPair(int fromIndex, string fromIndexName, int toIndex, string toIndexName, int length) Parameters Type Name Description System.Int32 fromIndex From index. System.String fromIndexName Name of from index. System.Int32 toIndex To index. System.String toIndexName Name of to index. System.Int32 length The length."
  },
  "api/main/CodeJam.Collections.Suffix.html": {
    "href": "api/main/CodeJam.Collections.Suffix.html",
    "title": "Struct Suffix | CodeJam",
    "keywords": "Struct Suffix Suffix of the SuffixTree Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public struct Suffix Properties | Improve this Doc View Source Length The length of the suffix Declaration public int Length { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Offset The offset of the suffix from the beginning of the source string Declaration public int Offset { get; } Property Value Type Description System.Int32 | Improve this Doc View Source SourceIndex The index of the source string in the order or addition to the Suffix tree 0 - for the first added string, 1 - for the second, etc Declaration public int SourceIndex { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Value The suffix value Declaration public string Value { get; } Property Value Type Description System.String Operators | Improve this Doc View Source Implicit(Suffix to String) String conversion operator Declaration public static implicit operator string (Suffix suffix) Parameters Type Name Description Suffix suffix The suffix to convert Returns Type Description System.String Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Collections.ILazyDictionary-2.html": {
    "href": "api/main/CodeJam.Collections.ILazyDictionary-2.html",
    "title": "Interface ILazyDictionary<TKey, TValue> | CodeJam",
    "keywords": "Interface ILazyDictionary<TKey, TValue> Dictionary with lazy values initialization. Inherited Members System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey) System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, TValue) System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Item[TKey] System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values System.Collections.Generic.IReadOnlyCollection<System.Collections.Generic.KeyValuePair<TKey, TValue>>.Count System.Collections.Generic.IEnumerable<System.Collections.Generic.KeyValuePair<TKey, TValue>>.GetEnumerator() System.Collections.IEnumerable.GetEnumerator() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public interface ILazyDictionary<TKey, TValue> : IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters Name Description TKey Type of key TValue Type of value Methods | Improve this Doc View Source Clear() Clears all created values Declaration void Clear() Extension Methods DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey, TValue) DictionaryExtensions.GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>) DictionaryExtensions.GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, TResult) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue>) DictionaryExtensions.GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, Func<TKey, TResult>) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, TSource) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, TAccumulate) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, TResult) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, Func<TSource>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, Func<TResult>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.WithIndex<T>(IEnumerable<T>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, Func<T, T, TResult>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.CombineWithNext<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhile<T>(IEnumerable<T>, Func<T, T, Boolean>) EnumerableExtensions.Page<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Slice<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TakeLast<T>(IEnumerable<T>, Int32) EnumerableExtensions.Split<T>(IEnumerable<T>, Int32) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.Union<T>(IEnumerable<T>, T[]) EnumerableExtensions.Concat<T>(IEnumerable<T>, T) EnumerableExtensions.Concat<T>(IEnumerable<T>, T[]) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T[]) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>, IEqualityComparer<T>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.OrderBy<TSource>(IEnumerable<TSource>) EnumerableExtensions.OrderByDescending<TSource>(IEnumerable<TSource>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T, Func<T, Boolean>) EnumerableExtensions.AsList<T>(IEnumerable<T>) EnumerableExtensions.AsArray<T>(IEnumerable<T>) EnumerableExtensions.ToStrings<T>(IEnumerable<T>) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) CompositeRangeExtensions.ToCompositeRange<T, TKey>(IEnumerable<TKey>, Func<TKey, T>, Func<TKey, T>) CompositeRangeExtensions.ToCompositeRange<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.Join<T>(IEnumerable<T>, String) StringExtensions.Join<T>(IEnumerable<T>) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Int32, Action<T>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Action<T>, String)"
  },
  "api/main/CodeJam.CodeExceptions.html": {
    "href": "api/main/CodeJam.CodeExceptions.html",
    "title": "Class CodeExceptions | CodeJam",
    "keywords": "Class CodeExceptions Exception factory class Inheritance System.Object CodeExceptions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class CodeExceptions Properties | Improve this Doc View Source BreakOnException If true, breaks execution if debugger is attached and assertion is failed. Enabled by default. Declaration public static bool BreakOnException { get; set; } Property Value Type Description System.Boolean true if the execution will break on exception creation; otherwise, false . | Improve this Doc View Source CodeTraceSource Returns trace source for code exceptions. Declaration public static TraceSource CodeTraceSource { get; } Property Value Type Description System.Diagnostics.TraceSource The code trace source. Methods | Improve this Doc View Source Argument(String, String, Object[]) Creates System.ArgumentException . Declaration public static ArgumentException Argument(string argumentName, string messageFormat, params object[] args) Parameters Type Name Description System.String argumentName Name of the argument. System.String messageFormat The message format. System.Object [] args The arguments. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException . | Improve this Doc View Source ArgumentItemNull(String) Creates System.ArgumentNullException . Declaration public static ArgumentException ArgumentItemNull(string argumentName) Parameters Type Name Description System.String argumentName Name of the argument. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException . | Improve this Doc View Source ArgumentNull(String) Creates System.ArgumentNullException . Declaration public static ArgumentNullException ArgumentNull(string argumentName) Parameters Type Name Description System.String argumentName Name of the argument. Returns Type Description System.ArgumentNullException Initialized instance of System.ArgumentNullException . | Improve this Doc View Source ArgumentNullOrEmpty(String) Creates System.ArgumentException for empty string. Declaration public static ArgumentException ArgumentNullOrEmpty(string argumentName) Parameters Type Name Description System.String argumentName Name of the argument. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException . | Improve this Doc View Source ArgumentNullOrWhiteSpace(String) Creates System.ArgumentException for empty (or whitespace) string. Declaration public static ArgumentException ArgumentNullOrWhiteSpace(string argumentName) Parameters Type Name Description System.String argumentName Name of the argument. Returns Type Description System.ArgumentException Initialized instance of System.ArgumentException . | Improve this Doc View Source ArgumentOutOfRange(String, Double, Double, Double) Creates System.ArgumentOutOfRangeException . Declaration public static ArgumentOutOfRangeException ArgumentOutOfRange(string argumentName, double value, double fromValue, double toValue) Parameters Type Name Description System.String argumentName Name of the argument. System.Double value The value. System.Double fromValue From value (inclusive). System.Double toValue To value (inclusive). Returns Type Description System.ArgumentOutOfRangeException Initialized instance of System.ArgumentOutOfRangeException . | Improve this Doc View Source ArgumentOutOfRange(String, Int32, Int32, Int32) Creates System.ArgumentOutOfRangeException . Declaration public static ArgumentOutOfRangeException ArgumentOutOfRange(string argumentName, int value, int fromValue, int toValue) Parameters Type Name Description System.String argumentName Name of the argument. System.Int32 value The value. System.Int32 fromValue From value (inclusive). System.Int32 toValue To value (inclusive). Returns Type Description System.ArgumentOutOfRangeException Initialized instance of System.ArgumentOutOfRangeException . | Improve this Doc View Source ArgumentOutOfRange<T>(String, T, T, T) Creates System.ArgumentOutOfRangeException . Declaration public static ArgumentOutOfRangeException ArgumentOutOfRange<T>(string argumentName, T value, T fromValue, T toValue) Parameters Type Name Description System.String argumentName Name of the argument. T value The value. T fromValue From value (inclusive). T toValue To value (inclusive). Returns Type Description System.ArgumentOutOfRangeException Initialized instance of System.ArgumentOutOfRangeException . Type Parameters Name Description T | Improve this Doc View Source BreakIfAttached() BreaksExecution if debugger attached. Declaration public static void BreakIfAttached() | Improve this Doc View Source IndexOutOfRange(String, Int32, Int32, Int32) Creates System.IndexOutOfRangeException . Declaration public static IndexOutOfRangeException IndexOutOfRange(string argumentName, int value, int startIndex, int length) Parameters Type Name Description System.String argumentName Name of the argument. System.Int32 value The value. System.Int32 startIndex The start index. System.Int32 length The length. Returns Type Description System.IndexOutOfRangeException Initialized instance of System.IndexOutOfRangeException . | Improve this Doc View Source InvalidOperation(String, Object[]) Creates System.InvalidOperationException . Declaration public static InvalidOperationException InvalidOperation(string messageFormat, params object[] args) Parameters Type Name Description System.String messageFormat The message format. System.Object [] args The arguments. Returns Type Description System.InvalidOperationException Initialized instance of System.InvalidOperationException . | Improve this Doc View Source ObjectDisposed(Type) Throw this if the object is disposed. Declaration public static ObjectDisposedException ObjectDisposed(Type typeofDisposedObject) Parameters Type Name Description System.Type typeofDisposedObject The typeof disposed object. Returns Type Description System.ObjectDisposedException Initialized instance of System.ObjectDisposedException . | Improve this Doc View Source ObjectDisposed(Type, String, Object[]) Throw this if the object is disposed. Declaration public static ObjectDisposedException ObjectDisposed(Type typeofDisposedObject, string messageFormat, params object[] args) Parameters Type Name Description System.Type typeofDisposedObject The typeof disposed object. System.String messageFormat The message format. System.Object [] args The arguments. Returns Type Description System.ObjectDisposedException Initialized instance of System.ObjectDisposedException . | Improve this Doc View Source UnexpectedArgumentValue<T>(String, T) Creates System.ArgumentOutOfRangeException . Used to be thrown from the default: switch clause Declaration public static ArgumentOutOfRangeException UnexpectedArgumentValue<T>(string argumentName, T value) Parameters Type Name Description System.String argumentName Name of the argument. T value The value. Returns Type Description System.ArgumentOutOfRangeException Initialized instance of System.ArgumentOutOfRangeException . Type Parameters Name Description T The type of the value. Auto-inferred. | Improve this Doc View Source UnexpectedArgumentValue<T>(String, T, String, Object[]) Creates System.ArgumentOutOfRangeException . Used to be thrown from default: switch clause Declaration public static ArgumentOutOfRangeException UnexpectedArgumentValue<T>(string argumentName, T value, string messageFormat, params object[] args) Parameters Type Name Description System.String argumentName Name of the argument. T value The value. System.String messageFormat The message format. System.Object [] args The arguments. Returns Type Description System.ArgumentOutOfRangeException Initialized instance of System.ArgumentOutOfRangeException . Type Parameters Name Description T The type of the value. Auto-inferred. | Improve this Doc View Source UnexpectedValue(String, Object[]) Creates System.InvalidOperationException . Used to be thrown from default: switch clause Declaration public static InvalidOperationException UnexpectedValue(string messageFormat, params object[] args) Parameters Type Name Description System.String messageFormat The message format. System.Object [] args The arguments. Returns Type Description System.InvalidOperationException Initialized instance of System.InvalidOperationException . | Improve this Doc View Source UnexpectedValue<T>(T) Creates System.InvalidOperationException . Used to be thrown from the default: switch clause Declaration public static InvalidOperationException UnexpectedValue<T>(T value) Parameters Type Name Description T value The value. Returns Type Description System.InvalidOperationException Initialized instance of System.InvalidOperationException . Type Parameters Name Description T The type of the value. Auto-inferred. | Improve this Doc View Source Unreachable(String, Object[]) Used to be thrown in places expected to be unreachable. Declaration public static NotSupportedException Unreachable(string messageFormat, params object[] args) Parameters Type Name Description System.String messageFormat The message format. System.Object [] args The arguments. Returns Type Description System.NotSupportedException Initialized instance of System.NotSupportedException ."
  },
  "api/blocks/CodeJam.TableData.html": {
    "href": "api/blocks/CodeJam.TableData.html",
    "title": "Namespace CodeJam.TableData | CodeJam",
    "keywords": "Namespace CodeJam.TableData Classes CsvFormat CSV format support. FixedWidthFormat Fixed width format support. TableDataParser Contains methods for table data parsing. Structs DataLine Line of data. Delegates Parser Reads single line from table data and parses it."
  },
  "api/blocks/CodeJam.Services.ServiceProviderHelper.html": {
    "href": "api/blocks/CodeJam.Services.ServiceProviderHelper.html",
    "title": "Class ServiceProviderHelper | CodeJam",
    "keywords": "Class ServiceProviderHelper System.IServiceProvider and IServicePublisher helper methods. Inheritance System.Object ServiceProviderHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Services Assembly : CodeJam.Blocks.dll Syntax public static class ServiceProviderHelper Methods | Improve this Doc View Source GetRequiredService(IServiceProvider, Type) Gets the service object of the specified type, or throws an exception if service not registered. Declaration public static object GetRequiredService(this IServiceProvider provider, Type serviceType) Parameters Type Name Description System.IServiceProvider provider Instance of System.IServiceProvider . System.Type serviceType An object that specifies the type of service object to get. Returns Type Description System.Object A service object of type serviceType . | Improve this Doc View Source GetRequiredService<T>(IServiceProvider) Gets the service object of the specified type, or throws an exception if service not registered. Declaration public static T GetRequiredService<T>(this IServiceProvider provider) Parameters Type Name Description System.IServiceProvider provider Instance of System.IServiceProvider . Returns Type Description T A service object of type T . Type Parameters Name Description T An object that specifies the type of service object to get. | Improve this Doc View Source GetService<T>(IServiceProvider) Gets the service object of the specified type. Declaration public static T GetService<T>(this IServiceProvider provider) Parameters Type Name Description System.IServiceProvider provider Instance of System.IServiceProvider . Returns Type Description T A service object of type serviceType. Type Parameters Name Description T An object that specifies the type of service object to get. | Improve this Doc View Source Publish<T>(IServicePublisher, T) Publish service. Declaration public static IDisposable Publish<T>(this IServicePublisher publisher, T serviceInstance)where T : class Parameters Type Name Description IServicePublisher publisher Service publisher. T serviceInstance Instance of service of type T Returns Type Description System.IDisposable Disposable cookie to conceal published service Type Parameters Name Description T Type of service object to publish. | Improve this Doc View Source Publish<T>(IServicePublisher, Func<IServicePublisher, T>) Publish service. Declaration public static IDisposable Publish<T>(this IServicePublisher publisher, Func<IServicePublisher, T> instanceFactory)where T : class Parameters Type Name Description IServicePublisher publisher Service publisher. System.Func < IServicePublisher , T> instanceFactory Factory to create service instance Returns Type Description System.IDisposable Disposable cookie to conceal published service Type Parameters Name Description T Type of service object to publish."
  },
  "api/blocks/CodeJam.Mapping.Map.html": {
    "href": "api/blocks/CodeJam.Mapping.Map.html",
    "title": "Class Map | CodeJam",
    "keywords": "Class Map Mapper helper class. Inheritance System.Object Map Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax public static class Map Examples This example shows how to map one object to another. Methods | Improve this Doc View Source DeepCopy<T>(T) Performs deep copy. Declaration public static T DeepCopy<T>(this T obj) Parameters Type Name Description T obj An object to copy. Returns Type Description T Created object. Type Parameters Name Description T Type of object. | Improve this Doc View Source GetMapper<TFrom, TTo>() Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public static Mapper<TFrom, TTo> GetMapper<TFrom, TTo>() Returns Type Description Mapper <TFrom, TTo> Mapping expression. Type Parameters Name Description TFrom Type to map from. TTo Type to map to. | Improve this Doc View Source GetMapper<TFrom, TTo>(Func<MapperBuilder<TFrom, TTo>, MapperBuilder<TFrom, TTo>>) Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public static Mapper<TFrom, TTo> GetMapper<TFrom, TTo>(Func<MapperBuilder<TFrom, TTo>, MapperBuilder<TFrom, TTo>> setter) Parameters Type Name Description System.Func < MapperBuilder <TFrom, TTo>, MapperBuilder <TFrom, TTo>> setter MapperBuilder parameter setter. Returns Type Description Mapper <TFrom, TTo> Mapping expression. Type Parameters Name Description TFrom Type to map from. TTo Type to map to."
  },
  "api/blocks/CodeJam.Mapping.CodeJamMappingException.html": {
    "href": "api/blocks/CodeJam.Mapping.CodeJamMappingException.html",
    "title": "Class CodeJamMappingException | CodeJam",
    "keywords": "Class CodeJamMappingException Defines the base class for the namespace exceptions. Inheritance System.Object System.Exception CodeJamMappingException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax [Serializable] public class CodeJamMappingException : Exception, ISerializable, _Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source CodeJamMappingException() Initializes a new instance of the CodeJamMappingException class. Declaration public CodeJamMappingException() Remarks This constructor initializes the System.Exception.Message property of the new instance such as \"A Build Type exception has occurred.\" | Improve this Doc View Source CodeJamMappingException(Exception) Initializes a new instance of the CodeJamMappingException class with the specified InnerException property. Declaration public CodeJamMappingException(Exception innerException) Parameters Type Name Description System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.InnerException | Improve this Doc View Source CodeJamMappingException(SerializationInfo, StreamingContext) Initializes a new instance of the CodeJamMappingException class with serialized data. Declaration protected CodeJamMappingException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The object that holds the serialized object data. System.Runtime.Serialization.StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source CodeJamMappingException(String) Initializes a new instance of the CodeJamMappingException class with the specified error message. Declaration public CodeJamMappingException(string message) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. See Also System.Exception.Message | Improve this Doc View Source CodeJamMappingException(String, Exception) Initializes a new instance of the CodeJamMappingException class with the specified error message and InnerException property. Declaration public CodeJamMappingException(string message, Exception innerException) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.Message System.Exception.InnerException Extension Methods Map.DeepCopy<T>(T)"
  },
  "api/main/CodeJam.ValueOneOf-2.html": {
    "href": "api/main/CodeJam.ValueOneOf-2.html",
    "title": "Struct ValueOneOf<T1, T2> | CodeJam",
    "keywords": "Struct ValueOneOf<T1, T2> Value type tagged union for 2 types. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam Assembly : CodeJam.dll Syntax public struct ValueOneOf<T1, T2> : IOneOf<T1, T2>, IEquatable<ValueOneOf<T1, T2>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 Properties | Improve this Doc View Source IsCase1 Declaration public bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2>.IsCase2 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2> for value of type T1 . Declaration public static ValueOneOf<T1, T2> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description ValueOneOf <T1, T2> Value of ValueOneOf<T1, T2> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2> for value of type T2 . Declaration public static ValueOneOf<T1, T2> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description ValueOneOf <T1, T2> Value of ValueOneOf<T1, T2> . | Improve this Doc View Source Do(Action<T1>, Action<T2>) Declaration public void Do(Action<T1> case1Action, Action<T2> case2Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action Implements IOneOf<T1, T2>.Do(Action<T1>, Action<T2>) | Improve this Doc View Source Equals(ValueOneOf<T1, T2>) Declaration public bool Equals(ValueOneOf<T1, T2> other) Parameters Type Name Description ValueOneOf <T1, T2> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>) Declaration public TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>) Operators | Improve this Doc View Source Equality(ValueOneOf<T1, T2>, ValueOneOf<T1, T2>) Equality operator. Declaration public static bool operator ==(ValueOneOf<T1, T2> left, ValueOneOf<T1, T2> right) Parameters Type Name Description ValueOneOf <T1, T2> left Left parameter. ValueOneOf <T1, T2> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to ValueOneOf<T1, T2>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description ValueOneOf <T1, T2> Instance of ValueOneOf<T1, T2> for value of type T1 . | Improve this Doc View Source Implicit(T2 to ValueOneOf<T1, T2>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description ValueOneOf <T1, T2> Instance of ValueOneOf<T1, T2> for value of type T2 . | Improve this Doc View Source Inequality(ValueOneOf<T1, T2>, ValueOneOf<T1, T2>) Unequality operator. Declaration public static bool operator !=(ValueOneOf<T1, T2> left, ValueOneOf<T1, T2> right) Parameters Type Name Description ValueOneOf <T1, T2> left Left parameter. ValueOneOf <T1, T2> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.UriHelper.html": {
    "href": "api/main/CodeJam.UriHelper.html",
    "title": "Class UriHelper | CodeJam",
    "keywords": "Class UriHelper Helper methods for System.Uri class. Inheritance System.Object UriHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class UriHelper Methods | Improve this Doc View Source Combine(String, String) Combine two uris. Declaration public static Uri Combine(string baseUri, string relativeUri) Parameters Type Name Description System.String baseUri Base uri System.String relativeUri Relative uri Returns Type Description System.Uri Combined uri. | Improve this Doc View Source Combine(Uri, String) Combine two uris. Declaration public static Uri Combine(this Uri baseUri, string relativeUri) Parameters Type Name Description System.Uri baseUri Base uri System.String relativeUri Relative uri Returns Type Description System.Uri Combined uri. | Improve this Doc View Source Combine(Uri, Uri) Combine two uris. Declaration public static Uri Combine(this Uri baseUri, Uri relativeUri) Parameters Type Name Description System.Uri baseUri Base uri System.Uri relativeUri Relative uri Returns Type Description System.Uri Combined uri."
  },
  "api/main/CodeJam.Arithmetic.Operators-1.html": {
    "href": "api/main/CodeJam.Arithmetic.Operators-1.html",
    "title": "Class Operators<T> | CodeJam",
    "keywords": "Class Operators<T> Callbacks for common arithmetic actions. Look at OperatorsPerformanceTest to see why. Inheritance System.Object Operators<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Arithmetic Assembly : CodeJam.dll Syntax public static class Operators<T> Type Parameters Name Description T The type of the operands. Properties | Improve this Doc View Source AreEqual AreEqual operator. Declaration public static Func<T, T, bool> AreEqual { get; } Property Value Type Description System.Func <T, T, System.Boolean > The AreEqual operator. | Improve this Doc View Source AreNotEqual AreNotEqual operator. Declaration public static Func<T, T, bool> AreNotEqual { get; } Property Value Type Description System.Func <T, T, System.Boolean > The AreNotEqual operator. | Improve this Doc View Source BitwiseAnd BitwiseAnd operator. Declaration public static Func<T, T, T> BitwiseAnd { get; } Property Value Type Description System.Func <T, T, T> The BitwiseAnd operator. | Improve this Doc View Source BitwiseOr BitwiseOr operator. Declaration public static Func<T, T, T> BitwiseOr { get; } Property Value Type Description System.Func <T, T, T> The BitwiseOr operator. | Improve this Doc View Source Compare Comparison callback Declaration public static Func<T, T, int> Compare { get; } Property Value Type Description System.Func <T, T, System.Int32 > | Improve this Doc View Source Div Div operator. Declaration public static Func<T, T, T> Div { get; } Property Value Type Description System.Func <T, T, T> The Div operator. | Improve this Doc View Source GreaterThan GreaterThan operator. Declaration public static Func<T, T, bool> GreaterThan { get; } Property Value Type Description System.Func <T, T, System.Boolean > The GreaterThan operator. | Improve this Doc View Source GreaterThanOrEqual GreaterThanOrEqual operator. Declaration public static Func<T, T, bool> GreaterThanOrEqual { get; } Property Value Type Description System.Func <T, T, System.Boolean > The GreaterThanOrEqual operator. | Improve this Doc View Source HasNaN Check for the NaN value. Declaration public static bool HasNaN { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasNegativeInfinity Check for the negative infinity value. Declaration public static bool HasNegativeInfinity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasPositiveInfinity Check for the positive infinity value. Declaration public static bool HasPositiveInfinity { get; } Property Value Type Description System.Boolean | Improve this Doc View Source LeftShift LeftShift operator. Declaration public static Func<T, T, T> LeftShift { get; } Property Value Type Description System.Func <T, T, T> The LeftShift operator. | Improve this Doc View Source LessThan LessThan operator. Declaration public static Func<T, T, bool> LessThan { get; } Property Value Type Description System.Func <T, T, System.Boolean > The LessThan operator. | Improve this Doc View Source LessThanOrEqual LessThanOrEqual operator. Declaration public static Func<T, T, bool> LessThanOrEqual { get; } Property Value Type Description System.Func <T, T, System.Boolean > The LessThanOrEqual operator. | Improve this Doc View Source Minus Minus operator. Declaration public static Func<T, T, T> Minus { get; } Property Value Type Description System.Func <T, T, T> The Minus operator. | Improve this Doc View Source Modulo Modulo operator. Declaration public static Func<T, T, T> Modulo { get; } Property Value Type Description System.Func <T, T, T> The Modulo operator. | Improve this Doc View Source Mul Mul operator. Declaration public static Func<T, T, T> Mul { get; } Property Value Type Description System.Func <T, T, T> The Mul operator. | Improve this Doc View Source NaN NaN value Declaration public static T NaN { get; } Property Value Type Description T | Improve this Doc View Source NegativeInfinity Negative infinity value Declaration public static T NegativeInfinity { get; } Property Value Type Description T | Improve this Doc View Source OnesComplement OnesComplement operator. Declaration public static Func<T, T> OnesComplement { get; } Property Value Type Description System.Func <T, T> The OnesComplement operator. | Improve this Doc View Source Plus Plus operator. Declaration public static Func<T, T, T> Plus { get; } Property Value Type Description System.Func <T, T, T> The Plus operator. | Improve this Doc View Source PositiveInfinity Positive infinity value Declaration public static T PositiveInfinity { get; } Property Value Type Description T | Improve this Doc View Source RightShift RightShift operator. Declaration public static Func<T, T, T> RightShift { get; } Property Value Type Description System.Func <T, T, T> The RightShift operator. | Improve this Doc View Source UnaryMinus UnaryMinus operator. Declaration public static Func<T, T> UnaryMinus { get; } Property Value Type Description System.Func <T, T> The UnaryMinus operator. | Improve this Doc View Source Xor Xor operator. Declaration public static Func<T, T, T> Xor { get; } Property Value Type Description System.Func <T, T, T> The Xor operator."
  },
  "api/blocks/CodeJam.TableData.DataLine.html": {
    "href": "api/blocks/CodeJam.TableData.DataLine.html",
    "title": "Struct DataLine | CodeJam",
    "keywords": "Struct DataLine Line of data. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.TableData Assembly : CodeJam.Blocks.dll Syntax public struct DataLine Constructors | Improve this Doc View Source DataLine(Int32, String[]) Initializes a new instance of the System.Object class. Declaration public DataLine(int lineNum, string[] values) Parameters Type Name Description System.Int32 lineNum The line number. System.String [] values Line values. Properties | Improve this Doc View Source LineNum Line number. Declaration public int LineNum { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Values Line values. Declaration public string[] Values { get; } Property Value Type Description System.String [] Methods | Improve this Doc View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description System.String A System.String containing a fully qualified type name. Overrides System.ValueType.ToString() Extension Methods Map.DeepCopy<T>(T)"
  },
  "api/blocks/CodeJam.Metadata.MetadataException.html": {
    "href": "api/blocks/CodeJam.Metadata.MetadataException.html",
    "title": "Class MetadataException | CodeJam",
    "keywords": "Class MetadataException Defines the base class for the namespace exceptions. Inheritance System.Object System.Exception MetadataException Inherited Members System.Exception.GetBaseException() System.Exception.ToString() System.Exception.GetObjectData(System.Runtime.Serialization.SerializationInfo, System.Runtime.Serialization.StreamingContext) System.Exception.GetType() System.Exception.Message System.Exception.Data System.Exception.InnerException System.Exception.TargetSite System.Exception.StackTrace System.Exception.HelpLink System.Exception.Source System.Exception.HResult System.Exception.SerializeObjectState System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.MemberwiseClone() Namespace : CodeJam.Metadata Assembly : CodeJam.Blocks.dll Syntax [Serializable] public class MetadataException : Exception, ISerializable, _Exception Remarks This class is the base class for exceptions that may occur during execution of the namespace members. Constructors | Improve this Doc View Source MetadataException() Initializes a new instance of the MetadataException class. Declaration public MetadataException() Remarks This constructor initializes the System.Exception.Message property of the new instance such as \"A Build Type exception has occurred.\" | Improve this Doc View Source MetadataException(Exception) Initializes a new instance of the MetadataException class with the specified InnerException property. Declaration public MetadataException(Exception innerException) Parameters Type Name Description System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.InnerException | Improve this Doc View Source MetadataException(SerializationInfo, StreamingContext) Initializes a new instance of the MetadataException class with serialized data. Declaration protected MetadataException(SerializationInfo info, StreamingContext context) Parameters Type Name Description System.Runtime.Serialization.SerializationInfo info The object that holds the serialized object data. System.Runtime.Serialization.StreamingContext context The contextual information about the source or destination. Remarks This constructor is called during deserialization to reconstitute the exception object transmitted over a stream. | Improve this Doc View Source MetadataException(String) Initializes a new instance of the MetadataException class with the specified error message. Declaration public MetadataException(string message) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. See Also System.Exception.Message | Improve this Doc View Source MetadataException(String, Exception) Initializes a new instance of the MetadataException class with the specified error message and InnerException property. Declaration public MetadataException(string message, Exception innerException) Parameters Type Name Description System.String message The message to display to the client when the exception is thrown. System.Exception innerException The InnerException, if any, that threw the current exception. See Also System.Exception.Message System.Exception.InnerException Extension Methods Map.DeepCopy<T>(T)"
  },
  "api/blocks/CodeJam.Mapping.Mapper-2.html": {
    "href": "api/blocks/CodeJam.Mapping.Mapper-2.html",
    "title": "Class Mapper<TFrom, TTo> | CodeJam",
    "keywords": "Class Mapper<TFrom, TTo> Maps an object of TFrom type to an object of TTo type. Inheritance System.Object Mapper<TFrom, TTo> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax public class Mapper<TFrom, TTo> Type Parameters Name Description TFrom Type to map from. TTo Type to map to. Examples This example shows how to map one object to another. Methods | Improve this Doc View Source GetMapper() Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public Func<TFrom, TTo, IDictionary<object, object>, TTo> GetMapper() Returns Type Description System.Func <TFrom, TTo, System.Collections.Generic.IDictionary < System.Object , System.Object >, TTo> Mapping expression. | Improve this Doc View Source GetMapperEx() Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public Func<TFrom, TTo> GetMapperEx() Returns Type Description System.Func <TFrom, TTo> Mapping expression. | Improve this Doc View Source GetMapperExpression() Returns a mapper expression to map an object of TFrom type to an object of TTo type. Declaration public Expression<Func<TFrom, TTo, IDictionary<object, object>, TTo>> GetMapperExpression() Returns Type Description System.Linq.Expressions.Expression < System.Func <TFrom, TTo, System.Collections.Generic.IDictionary < System.Object , System.Object >, TTo>> Mapping expression. | Improve this Doc View Source GetMapperExpressionEx() Returns a mapper expression to map an object of TFrom type to an object of TTo type. Returned expression is compatible to IQueriable. Declaration public Expression<Func<TFrom, TTo>> GetMapperExpressionEx() Returns Type Description System.Linq.Expressions.Expression < System.Func <TFrom, TTo>> Mapping expression. | Improve this Doc View Source Map(TFrom) Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public TTo Map(TFrom source) Parameters Type Name Description TFrom source Object to map. Returns Type Description TTo Destination object. | Improve this Doc View Source Map(TFrom, TTo) Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public TTo Map(TFrom source, TTo destination) Parameters Type Name Description TFrom source Object to map. TTo destination Destination object. Returns Type Description TTo Destination object. | Improve this Doc View Source Map(TFrom, TTo, IDictionary<Object, Object>) Returns a mapper to map an object of TFrom type to an object of TTo type. Declaration public TTo Map(TFrom source, TTo destination, IDictionary<object, object> crossReferenceDictionary) Parameters Type Name Description TFrom source Object to map. TTo destination Destination object. System.Collections.Generic.IDictionary < System.Object , System.Object > crossReferenceDictionary Storage for cress references if applied. Returns Type Description TTo Destination object. Extension Methods Map.DeepCopy<T>(T)"
  },
  "api/blocks/CodeJam.Mapping.ConvertTo-1.html": {
    "href": "api/blocks/CodeJam.Mapping.ConvertTo-1.html",
    "title": "Class ConvertTo<TTo> | CodeJam",
    "keywords": "Class ConvertTo<TTo> A helper class to convert a value of TTo type. Inheritance System.Object ConvertTo<TTo> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax public static class ConvertTo<TTo> Type Parameters Name Description TTo Methods | Improve this Doc View Source From<TFrom>(TFrom) Converts an object from the TFrom type to the TTo . Declaration public static TTo From<TFrom>(TFrom o) Parameters Type Name Description TFrom o An object to convert. Returns Type Description TTo Converted object. Type Parameters Name Description TFrom Examples ConvertTo<int>.From(\"123\");"
  },
  "api/main/CodeJam.ValueOption.html": {
    "href": "api/main/CodeJam.ValueOption.html",
    "title": "Class ValueOption | CodeJam",
    "keywords": "Class ValueOption Methods to work with ValueOption Inheritance System.Object ValueOption Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class ValueOption Methods | Improve this Doc View Source None<T>() Creates instance of ValueOption without value. Declaration public static ValueOption<T> None<T>() Returns Type Description ValueOption <T> Instance without value. Type Parameters Name Description T Type of value. | Improve this Doc View Source Some<T>(T) Creates instance of ValueOption with specified value. Declaration public static ValueOption<T> Some<T>(T value) Parameters Type Name Description T value Value Returns Type Description ValueOption <T> Instance of ValueOption . Type Parameters Name Description T Type of value | Improve this Doc View Source SomeHasValue<T>(T) Creates instance of ValueOption with specified value, if value not null. Declaration public static ValueOption<T> SomeHasValue<T>(T value)where T : class Parameters Type Name Description T value Value Returns Type Description ValueOption <T> Instance of ValueOption with value , if value not null, or instance without value. Type Parameters Name Description T Type of value | Improve this Doc View Source SomeHasValue<T>(Nullable<T>) Creates instance of ValueOption with specified value, if value has value. Declaration public static ValueOption<T> SomeHasValue<T>(T? value)where T : struct Parameters Type Name Description System.Nullable <T> value Value Returns Type Description ValueOption <T> Instance of ValueOption with value , if value has value, or instance without value. Type Parameters Name Description T Type of value | Improve this Doc View Source With<T, TResult>(ValueOption<T>, Func<T, TResult>) Converts option value to another option with selectFunc . Declaration public static ValueOption<TResult> With<T, TResult>(this ValueOption<T> option, Func<T, TResult> selectFunc) Parameters Type Name Description ValueOption <T> option ValueOption instance to match. System.Func <T, TResult> selectFunc Function to map value Returns Type Description ValueOption <TResult> Converted by selectFunc value, or option with no value, if option has no value. Type Parameters Name Description T Type of value TResult Type of result | Improve this Doc View Source With<T, TResult>(ValueOption<T>, Func<T, TResult>, TResult) Converts option value to another option with selectFunc . Declaration public static ValueOption<TResult> With<T, TResult>(this ValueOption<T> option, Func<T, TResult> selectFunc, TResult defaultValue) Parameters Type Name Description ValueOption <T> option ValueOption instance to match. System.Func <T, TResult> selectFunc Function to map value TResult defaultValue Default value. Returns Type Description ValueOption <TResult> Converted by selectFunc value, or option with defaultValue , if option has no value. Type Parameters Name Description T Type of value TResult Type of result | Improve this Doc View Source With<T, TResult>(ValueOption<T>, Func<T, TResult>, Func<TResult>) Converts option value to another option with selectFunc . Declaration public static ValueOption<TResult> With<T, TResult>(this ValueOption<T> option, Func<T, TResult> selectFunc, Func<TResult> defaultFunc) Parameters Type Name Description ValueOption <T> option ValueOption instance to match. System.Func <T, TResult> selectFunc Function to map value System.Func <TResult> defaultFunc Function to return default value. Returns Type Description ValueOption <TResult> Converted by selectFunc value, or option with value returned by defaultFunc , if option has no value. Type Parameters Name Description T Type of value TResult Type of result"
  },
  "api/main/CodeJam.ValueOption-1.html": {
    "href": "api/main/CodeJam.ValueOption-1.html",
    "title": "Struct ValueOption<T> | CodeJam",
    "keywords": "Struct ValueOption<T> Represents a value type that can be assigned null. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam Assembly : CodeJam.dll Syntax public struct ValueOption<T> : IOption<T>, IEquatable<ValueOption<T>> Type Parameters Name Description T Constructors | Improve this Doc View Source ValueOption(T) Initializes a new instance to the specified value. Declaration public ValueOption(T value) Parameters Type Name Description T value The value. Properties | Improve this Doc View Source HasValue Gets a value indicating whether the current object has a value. Declaration public bool HasValue { get; } Property Value Type Description System.Boolean Implements IOption<T>.HasValue | Improve this Doc View Source Value Gets the value of the current object. Declaration public T Value { get; } Property Value Type Description T Implements IOption<T>.Value Methods | Improve this Doc View Source Equals(ValueOption<T>) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ValueOption<T> other) Parameters Type Name Description ValueOption <T> other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Indicates whether this instance and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with the current instance. Returns Type Description System.Boolean true if obj and this instance are the same type and represent the same value; otherwise, false. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns the hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns the fully qualified type name of this instance. Declaration public override string ToString() Returns Type Description System.String A System.String containing a fully qualified type name. Overrides System.ValueType.ToString() Operators | Improve this Doc View Source Equality(ValueOption<T>, ValueOption<T>) Equality operator. Declaration public static bool operator ==(ValueOption<T> left, ValueOption<T> right) Parameters Type Name Description ValueOption <T> left Left operand. ValueOption <T> right Right operand. Returns Type Description System.Boolean True , if left equals right . | Improve this Doc View Source Explicit(ValueOption<T> to T) Extracts value from option Declaration public static explicit operator T(ValueOption<T> option) Parameters Type Name Description ValueOption <T> option Returns Type Description T Value of option | Improve this Doc View Source Implicit(T to ValueOption<T>) Creates a new object initialized to a specified value. Declaration public static implicit operator ValueOption<T>(T value) Parameters Type Name Description T value Value to convert. Returns Type Description ValueOption <T> Instance of ValueOption . | Improve this Doc View Source Inequality(ValueOption<T>, ValueOption<T>) Unequality operator. Declaration public static bool operator !=(ValueOption<T> left, ValueOption<T> right) Parameters Type Name Description ValueOption <T> left Left operand. ValueOption <T> right Right operand. Returns Type Description System.Boolean True , if left not equals right . Extension Methods NullableHelper.AsNullable<T>(T) Option.Do<T>(IOption<T>, Action<IOption<T>>, Action) Option.GetValueOrDefault<T, TResult>(IOption<T>, Func<IOption<T>, TResult>, Func<TResult>) Option.GetValueOrDefault<T>(IOption<T>, T) ValueOption.With<T, TResult>(ValueOption<T>, Func<T, TResult>) ValueOption.With<T, TResult>(ValueOption<T>, Func<T, TResult>, TResult) ValueOption.With<T, TResult>(ValueOption<T>, Func<T, TResult>, Func<TResult>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/blocks/CodeJam.Services.IServicePublisher.html": {
    "href": "api/blocks/CodeJam.Services.IServicePublisher.html",
    "title": "Interface IServicePublisher | CodeJam",
    "keywords": "Interface IServicePublisher Service publisher interface. Inherited Members System.IServiceProvider.GetService(System.Type) Namespace : CodeJam.Services Assembly : CodeJam.Blocks.dll Syntax public interface IServicePublisher : IServiceProvider Methods | Improve this Doc View Source Publish(Type, Func<IServicePublisher, Object>) Publish service. Declaration IDisposable Publish(Type serviceType, Func<IServicePublisher, object> instanceFactory) Parameters Type Name Description System.Type serviceType Type of service object to publish. System.Func < IServicePublisher , System.Object > instanceFactory Factory to create service instance Returns Type Description System.IDisposable Disposable cookie to conceal published service | Improve this Doc View Source Publish(Type, Object) Publish service. Declaration IDisposable Publish(Type serviceType, object serviceInstance) Parameters Type Name Description System.Type serviceType Type of service object to publish. System.Object serviceInstance Instance of service of type serviceType . Returns Type Description System.IDisposable Disposable cookie to conceal published service Extension Methods Map.DeepCopy<T>(T) ServiceProviderHelper.GetRequiredService(IServiceProvider, Type) ServiceProviderHelper.GetService<T>(IServiceProvider) ServiceProviderHelper.GetRequiredService<T>(IServiceProvider) ServiceProviderHelper.Publish<T>(IServicePublisher, T) ServiceProviderHelper.Publish<T>(IServicePublisher, Func<IServicePublisher, T>)"
  },
  "api/blocks/CodeJam.Mapping.MapValueAttribute.html": {
    "href": "api/blocks/CodeJam.Mapping.MapValueAttribute.html",
    "title": "Class MapValueAttribute | CodeJam",
    "keywords": "Class MapValueAttribute Uses to define MapValue for enumtype. Inheritance System.Object System.Attribute MapValueAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = true)] public class MapValueAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source MapValueAttribute() Creates an instance of MapValueAttribute attribute. Declaration public MapValueAttribute() | Improve this Doc View Source MapValueAttribute(Object) Creates an instance of MapValueAttribute attribute. Declaration public MapValueAttribute(object value) Parameters Type Name Description System.Object value Mapping value. | Improve this Doc View Source MapValueAttribute(Object, Boolean) Creates an instance of MapValueAttribute attribute. Declaration public MapValueAttribute(object value, bool isDefault) Parameters Type Name Description System.Object value Mapping value. System.Boolean isDefault true if default. | Improve this Doc View Source MapValueAttribute(String, Object) Creates an instance of MapValueAttribute attribute. Declaration public MapValueAttribute(string configuration, object value) Parameters Type Name Description System.String configuration Active configuration. System.Object value Mapping value. | Improve this Doc View Source MapValueAttribute(String, Object, Boolean) Creates an instance of MapValueAttribute attribute. Declaration public MapValueAttribute(string configuration, object value, bool isDefault) Parameters Type Name Description System.String configuration Active configuration. System.Object value Mapping value. System.Boolean isDefault true if default. Properties | Improve this Doc View Source Configuration Active configuration. Declaration public string Configuration { get; set; } Property Value Type Description System.String | Improve this Doc View Source IsDefault true if default. Declaration public bool IsDefault { get; set; } Property Value Type Description System.Boolean | Improve this Doc View Source Value Mapping value. Declaration public object Value { get; set; } Property Value Type Description System.Object Extension Methods Map.DeepCopy<T>(T)"
  },
  "api/blocks/CodeJam.Mapping.Convert-2.html": {
    "href": "api/blocks/CodeJam.Mapping.Convert-2.html",
    "title": "Class Convert<TFrom, TTo> | CodeJam",
    "keywords": "Class Convert<TFrom, TTo> Provides data convertion functionality. Inheritance System.Object Convert<TFrom, TTo> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Mapping Assembly : CodeJam.Blocks.dll Syntax public static class Convert<TFrom, TTo> Type Parameters Name Description TFrom Type to convert from. TTo Type to convert to. Properties | Improve this Doc View Source Expression Represents an expression that converts a value of TFrom type to TTo type. Declaration public static Expression<Func<TFrom, TTo>> Expression { get; set; } Property Value Type Description System.Linq.Expressions.Expression < System.Func <TFrom, TTo>> | Improve this Doc View Source From Returns a function that converts a value of TFrom type to TTo type. Declaration public static Func<TFrom, TTo> From { get; } Property Value Type Description System.Func <TFrom, TTo> | Improve this Doc View Source Lambda Represents a function that converts a value of TFrom type to TTo type. Declaration public static Func<TFrom, TTo> Lambda { get; set; } Property Value Type Description System.Func <TFrom, TTo>"
  },
  "api/main/CodeJam.ValueOneOf-6.html": {
    "href": "api/main/CodeJam.ValueOneOf-6.html",
    "title": "Struct ValueOneOf<T1, T2, T3, T4, T5, T6> | CodeJam",
    "keywords": "Struct ValueOneOf<T1, T2, T3, T4, T5, T6> Value type tagged union for 6 types. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam Assembly : CodeJam.dll Syntax public struct ValueOneOf<T1, T2, T3, T4, T5, T6> : IOneOf<T1, T2, T3, T4, T5, T6>, IEquatable<ValueOneOf<T1, T2, T3, T4, T5, T6>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 T5 Type of case 5 T6 Type of case 6 Properties | Improve this Doc View Source IsCase1 Declaration public bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6>.IsCase2 | Improve this Doc View Source IsCase3 Declaration public bool IsCase3 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6>.IsCase3 | Improve this Doc View Source IsCase4 Declaration public bool IsCase4 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6>.IsCase4 | Improve this Doc View Source IsCase5 Declaration public bool IsCase5 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6>.IsCase5 | Improve this Doc View Source IsCase6 Declaration public bool IsCase6 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6>.IsCase6 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T1 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6> Value of ValueOneOf<T1, T2, T3, T4, T5, T6> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T2 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6> Value of ValueOneOf<T1, T2, T3, T4, T5, T6> . | Improve this Doc View Source Create(T3) Creates instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T3 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6> Create(T3 value) Parameters Type Name Description T3 value Value of type T3 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6> Value of ValueOneOf<T1, T2, T3, T4, T5, T6> . | Improve this Doc View Source Create(T4) Creates instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T4 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6> Create(T4 value) Parameters Type Name Description T4 value Value of type T4 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6> Value of ValueOneOf<T1, T2, T3, T4, T5, T6> . | Improve this Doc View Source Create(T5) Creates instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T5 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6> Create(T5 value) Parameters Type Name Description T5 value Value of type T5 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6> Value of ValueOneOf<T1, T2, T3, T4, T5, T6> . | Improve this Doc View Source Create(T6) Creates instance of OneOf<T1, T2, T3, T4, T5, T6> for value of type T6 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6> Create(T6 value) Parameters Type Name Description T6 value Value of type T6 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6> Value of ValueOneOf<T1, T2, T3, T4, T5, T6> . | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>) Declaration public void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action, Action<T5> case5Action, Action<T6> case6Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action System.Action <T3> case3Action System.Action <T4> case4Action System.Action <T5> case5Action System.Action <T6> case6Action Implements IOneOf<T1, T2, T3, T4, T5, T6>.Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>) | Improve this Doc View Source Equals(ValueOneOf<T1, T2, T3, T4, T5, T6>) Declaration public bool Equals(ValueOneOf<T1, T2, T3, T4, T5, T6> other) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4, T5, T6> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>) Declaration public TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector, Func<T5, TResult> case5Selector, Func<T6, TResult> case6Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector System.Func <T3, TResult> case3Selector System.Func <T4, TResult> case4Selector System.Func <T5, TResult> case5Selector System.Func <T6, TResult> case6Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2, T3, T4, T5, T6>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>) Operators | Improve this Doc View Source Equality(ValueOneOf<T1, T2, T3, T4, T5, T6>, ValueOneOf<T1, T2, T3, T4, T5, T6>) Equality operator. Declaration public static bool operator ==(ValueOneOf<T1, T2, T3, T4, T5, T6> left, ValueOneOf<T1, T2, T3, T4, T5, T6> right) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4, T5, T6> left Left parameter. ValueOneOf <T1, T2, T3, T4, T5, T6> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to ValueOneOf<T1, T2, T3, T4, T5, T6>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6> for value of type T1 . | Improve this Doc View Source Implicit(T2 to ValueOneOf<T1, T2, T3, T4, T5, T6>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6> for value of type T2 . | Improve this Doc View Source Implicit(T3 to ValueOneOf<T1, T2, T3, T4, T5, T6>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6>(T3 value) Parameters Type Name Description T3 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6> for value of type T3 . | Improve this Doc View Source Implicit(T4 to ValueOneOf<T1, T2, T3, T4, T5, T6>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6>(T4 value) Parameters Type Name Description T4 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6> for value of type T4 . | Improve this Doc View Source Implicit(T5 to ValueOneOf<T1, T2, T3, T4, T5, T6>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6>(T5 value) Parameters Type Name Description T5 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6> for value of type T5 . | Improve this Doc View Source Implicit(T6 to ValueOneOf<T1, T2, T3, T4, T5, T6>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6>(T6 value) Parameters Type Name Description T6 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6> for value of type T6 . | Improve this Doc View Source Inequality(ValueOneOf<T1, T2, T3, T4, T5, T6>, ValueOneOf<T1, T2, T3, T4, T5, T6>) Unequality operator. Declaration public static bool operator !=(ValueOneOf<T1, T2, T3, T4, T5, T6> left, ValueOneOf<T1, T2, T3, T4, T5, T6> right) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4, T5, T6> left Left parameter. ValueOneOf <T1, T2, T3, T4, T5, T6> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.ValueOneOf-5.html": {
    "href": "api/main/CodeJam.ValueOneOf-5.html",
    "title": "Struct ValueOneOf<T1, T2, T3, T4, T5> | CodeJam",
    "keywords": "Struct ValueOneOf<T1, T2, T3, T4, T5> Value type tagged union for 5 types. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam Assembly : CodeJam.dll Syntax public struct ValueOneOf<T1, T2, T3, T4, T5> : IOneOf<T1, T2, T3, T4, T5>, IEquatable<ValueOneOf<T1, T2, T3, T4, T5>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 T5 Type of case 5 Properties | Improve this Doc View Source IsCase1 Declaration public bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5>.IsCase2 | Improve this Doc View Source IsCase3 Declaration public bool IsCase3 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5>.IsCase3 | Improve this Doc View Source IsCase4 Declaration public bool IsCase4 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5>.IsCase4 | Improve this Doc View Source IsCase5 Declaration public bool IsCase5 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5>.IsCase5 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2, T3, T4, T5> for value of type T1 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5> Value of ValueOneOf<T1, T2, T3, T4, T5> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2, T3, T4, T5> for value of type T2 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5> Value of ValueOneOf<T1, T2, T3, T4, T5> . | Improve this Doc View Source Create(T3) Creates instance of OneOf<T1, T2, T3, T4, T5> for value of type T3 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5> Create(T3 value) Parameters Type Name Description T3 value Value of type T3 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5> Value of ValueOneOf<T1, T2, T3, T4, T5> . | Improve this Doc View Source Create(T4) Creates instance of OneOf<T1, T2, T3, T4, T5> for value of type T4 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5> Create(T4 value) Parameters Type Name Description T4 value Value of type T4 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5> Value of ValueOneOf<T1, T2, T3, T4, T5> . | Improve this Doc View Source Create(T5) Creates instance of OneOf<T1, T2, T3, T4, T5> for value of type T5 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5> Create(T5 value) Parameters Type Name Description T5 value Value of type T5 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5> Value of ValueOneOf<T1, T2, T3, T4, T5> . | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>) Declaration public void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action, Action<T5> case5Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action System.Action <T3> case3Action System.Action <T4> case4Action System.Action <T5> case5Action Implements IOneOf<T1, T2, T3, T4, T5>.Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>) | Improve this Doc View Source Equals(ValueOneOf<T1, T2, T3, T4, T5>) Declaration public bool Equals(ValueOneOf<T1, T2, T3, T4, T5> other) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4, T5> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>) Declaration public TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector, Func<T5, TResult> case5Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector System.Func <T3, TResult> case3Selector System.Func <T4, TResult> case4Selector System.Func <T5, TResult> case5Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2, T3, T4, T5>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>) Operators | Improve this Doc View Source Equality(ValueOneOf<T1, T2, T3, T4, T5>, ValueOneOf<T1, T2, T3, T4, T5>) Equality operator. Declaration public static bool operator ==(ValueOneOf<T1, T2, T3, T4, T5> left, ValueOneOf<T1, T2, T3, T4, T5> right) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4, T5> left Left parameter. ValueOneOf <T1, T2, T3, T4, T5> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to ValueOneOf<T1, T2, T3, T4, T5>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5> Instance of ValueOneOf<T1, T2, T3, T4, T5> for value of type T1 . | Improve this Doc View Source Implicit(T2 to ValueOneOf<T1, T2, T3, T4, T5>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5> Instance of ValueOneOf<T1, T2, T3, T4, T5> for value of type T2 . | Improve this Doc View Source Implicit(T3 to ValueOneOf<T1, T2, T3, T4, T5>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5>(T3 value) Parameters Type Name Description T3 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5> Instance of ValueOneOf<T1, T2, T3, T4, T5> for value of type T3 . | Improve this Doc View Source Implicit(T4 to ValueOneOf<T1, T2, T3, T4, T5>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5>(T4 value) Parameters Type Name Description T4 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5> Instance of ValueOneOf<T1, T2, T3, T4, T5> for value of type T4 . | Improve this Doc View Source Implicit(T5 to ValueOneOf<T1, T2, T3, T4, T5>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5>(T5 value) Parameters Type Name Description T5 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5> Instance of ValueOneOf<T1, T2, T3, T4, T5> for value of type T5 . | Improve this Doc View Source Inequality(ValueOneOf<T1, T2, T3, T4, T5>, ValueOneOf<T1, T2, T3, T4, T5>) Unequality operator. Declaration public static bool operator !=(ValueOneOf<T1, T2, T3, T4, T5> left, ValueOneOf<T1, T2, T3, T4, T5> right) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4, T5> left Left parameter. ValueOneOf <T1, T2, T3, T4, T5> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Threading.ConcurrentLazyDictionary-2.html": {
    "href": "api/main/CodeJam.Threading.ConcurrentLazyDictionary-2.html",
    "title": "Class ConcurrentLazyDictionary<TKey, TValue> | CodeJam",
    "keywords": "Class ConcurrentLazyDictionary<TKey, TValue> Dictionary with lazy values initialization. Inheritance System.Object ConcurrentLazyDictionary<TKey, TValue> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Threading Assembly : CodeJam.dll Syntax public class ConcurrentLazyDictionary<TKey, TValue> : ILazyDictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters Name Description TKey TValue Remarks Thread safe. Constructors | Improve this Doc View Source ConcurrentLazyDictionary(Func<TKey, TValue>) Initialize instance. Declaration public ConcurrentLazyDictionary(Func<TKey, TValue> valueFactory) Parameters Type Name Description System.Func <TKey, TValue> valueFactory Function to create value on demand. | Improve this Doc View Source ConcurrentLazyDictionary(Func<TKey, TValue>, IEqualityComparer<TKey>) Initialize instance. Declaration public ConcurrentLazyDictionary(Func<TKey, TValue> valueFactory, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Func <TKey, TValue> valueFactory Function to create value on demand. System.Collections.Generic.IEqualityComparer <TKey> comparer Key comparer. Properties | Improve this Doc View Source Item[TKey] Gets the element that has the specified key in the read-only dictionary. Declaration public TValue this[TKey key] { get; } Parameters Type Name Description TKey key The key to locate. Property Value Type Description TValue The element that has the specified key in the read-only dictionary. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Item[TKey] Exceptions Type Condition System.ArgumentNullException key is null. System.Collections.Generic.KeyNotFoundException The property is retrieved and key is not found. | Improve this Doc View Source Keys Gets an enumerable collection that contains the keys in the read-only dictionary. Declaration public IEnumerable<TKey> Keys { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TKey> An enumerable collection that contains the keys in the read-only dictionary. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys | Improve this Doc View Source Values Gets an enumerable collection that contains the values in the read-only dictionary. Declaration public IEnumerable<TValue> Values { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TValue> An enumerable collection that contains the values in the read-only dictionary. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values Methods | Improve this Doc View Source Clear() Clears all created values Declaration public void Clear() Implements ILazyDictionary<TKey, TValue>.Clear() | Improve this Doc View Source ContainsKey(TKey) Determines whether the read-only dictionary contains an element that has the specified key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key to locate. Returns Type Description System.Boolean true if the read-only dictionary contains an element that has the specified key; otherwise, false. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey) Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc View Source TryGetValue(TKey, out TValue) Gets the value that is associated with the specified key. Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key The key to locate. TValue value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the object that implements the System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> interface contains an element that has the specified key; otherwise, false. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, TValue) Exceptions Type Condition System.ArgumentNullException key is null. Explicit Interface Implementations | Improve this Doc View Source IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() Declaration IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair <TKey, TValue>> Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() | Improve this Doc View Source IReadOnlyCollection<KeyValuePair<TKey, TValue>>.Count Declaration int IReadOnlyCollection<KeyValuePair<TKey, TValue>>.Count { get; } Returns Type Description System.Int32 Implements System.Collections.Generic.IReadOnlyCollection<T>.Count | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator() Extension Methods DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey, TValue) DictionaryExtensions.GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>) DictionaryExtensions.GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, TResult) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue>) DictionaryExtensions.GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, Func<TKey, TResult>) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, TSource) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, TAccumulate) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, TResult) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, Func<TSource>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, Func<TResult>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.WithIndex<T>(IEnumerable<T>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, Func<T, T, TResult>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.CombineWithNext<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhile<T>(IEnumerable<T>, Func<T, T, Boolean>) EnumerableExtensions.Page<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Slice<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TakeLast<T>(IEnumerable<T>, Int32) EnumerableExtensions.Split<T>(IEnumerable<T>, Int32) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.Union<T>(IEnumerable<T>, T[]) EnumerableExtensions.Concat<T>(IEnumerable<T>, T) EnumerableExtensions.Concat<T>(IEnumerable<T>, T[]) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T[]) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>, IEqualityComparer<T>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.OrderBy<TSource>(IEnumerable<TSource>) EnumerableExtensions.OrderByDescending<TSource>(IEnumerable<TSource>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T, Func<T, Boolean>) EnumerableExtensions.AsList<T>(IEnumerable<T>) EnumerableExtensions.AsArray<T>(IEnumerable<T>) EnumerableExtensions.ToStrings<T>(IEnumerable<T>) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) CompositeRangeExtensions.ToCompositeRange<T, TKey>(IEnumerable<TKey>, Func<TKey, T>, Func<TKey, T>) CompositeRangeExtensions.ToCompositeRange<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.Join<T>(IEnumerable<T>, String) StringExtensions.Join<T>(IEnumerable<T>) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Int32, Action<T>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Action<T>, String)"
  },
  "api/main/CodeJam.ValueOneOf-8.html": {
    "href": "api/main/CodeJam.ValueOneOf-8.html",
    "title": "Struct ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> | CodeJam",
    "keywords": "Struct ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> Value type tagged union for 8 types. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam Assembly : CodeJam.dll Syntax public struct ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> : IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>, IEquatable<ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 T5 Type of case 5 T6 Type of case 6 T7 Type of case 7 T8 Type of case 8 Properties | Improve this Doc View Source IsCase1 Declaration public bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase2 | Improve this Doc View Source IsCase3 Declaration public bool IsCase3 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase3 | Improve this Doc View Source IsCase4 Declaration public bool IsCase4 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase4 | Improve this Doc View Source IsCase5 Declaration public bool IsCase5 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase5 | Improve this Doc View Source IsCase6 Declaration public bool IsCase6 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase6 | Improve this Doc View Source IsCase7 Declaration public bool IsCase7 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase7 | Improve this Doc View Source IsCase8 Declaration public bool IsCase8 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.IsCase8 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T1 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T2 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T3) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T3 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T3 value) Parameters Type Name Description T3 value Value of type T3 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T4) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T4 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T4 value) Parameters Type Name Description T4 value Value of type T4 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T5) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T5 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T5 value) Parameters Type Name Description T5 value Value of type T5 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T6) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T6 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T6 value) Parameters Type Name Description T6 value Value of type T6 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T7) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T7 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T7 value) Parameters Type Name Description T7 value Value of type T7 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Create(T8) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T8 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> Create(T8 value) Parameters Type Name Description T8 value Value of type T8 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> . | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>, Action<T8>) Declaration public void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action, Action<T5> case5Action, Action<T6> case6Action, Action<T7> case7Action, Action<T8> case8Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action System.Action <T3> case3Action System.Action <T4> case4Action System.Action <T5> case5Action System.Action <T6> case6Action System.Action <T7> case7Action System.Action <T8> case8Action Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>, Action<T8>) | Improve this Doc View Source Equals(ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Declaration public bool Equals(ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> other) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>, Func<T7, TResult>, Func<T8, TResult>) Declaration public TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector, Func<T5, TResult> case5Selector, Func<T6, TResult> case6Selector, Func<T7, TResult> case7Selector, Func<T8, TResult> case8Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector System.Func <T3, TResult> case3Selector System.Func <T4, TResult> case4Selector System.Func <T5, TResult> case5Selector System.Func <T6, TResult> case6Selector System.Func <T7, TResult> case7Selector System.Func <T8, TResult> case8Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2, T3, T4, T5, T6, T7, T8>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>, Func<T7, TResult>, Func<T8, TResult>) Operators | Improve this Doc View Source Equality(ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>, ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Equality operator. Declaration public static bool operator ==(ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> left, ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> right) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> left Left parameter. ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T1 . | Improve this Doc View Source Implicit(T2 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T2 . | Improve this Doc View Source Implicit(T3 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T3 value) Parameters Type Name Description T3 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T3 . | Improve this Doc View Source Implicit(T4 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T4 value) Parameters Type Name Description T4 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T4 . | Improve this Doc View Source Implicit(T5 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T5 value) Parameters Type Name Description T5 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T5 . | Improve this Doc View Source Implicit(T6 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T6 value) Parameters Type Name Description T6 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T6 . | Improve this Doc View Source Implicit(T7 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T7 value) Parameters Type Name Description T7 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T7 . | Improve this Doc View Source Implicit(T8 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>(T8 value) Parameters Type Name Description T8 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> for value of type T8 . | Improve this Doc View Source Inequality(ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>, ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8>) Unequality operator. Declaration public static bool operator !=(ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> left, ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> right) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> left Left parameter. ValueOneOf <T1, T2, T3, T4, T5, T6, T7, T8> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.ValueOneOf-7.html": {
    "href": "api/main/CodeJam.ValueOneOf-7.html",
    "title": "Struct ValueOneOf<T1, T2, T3, T4, T5, T6, T7> | CodeJam",
    "keywords": "Struct ValueOneOf<T1, T2, T3, T4, T5, T6, T7> Value type tagged union for 7 types. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam Assembly : CodeJam.dll Syntax public struct ValueOneOf<T1, T2, T3, T4, T5, T6, T7> : IOneOf<T1, T2, T3, T4, T5, T6, T7>, IEquatable<ValueOneOf<T1, T2, T3, T4, T5, T6, T7>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 T5 Type of case 5 T6 Type of case 6 T7 Type of case 7 Properties | Improve this Doc View Source IsCase1 Declaration public bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase2 | Improve this Doc View Source IsCase3 Declaration public bool IsCase3 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase3 | Improve this Doc View Source IsCase4 Declaration public bool IsCase4 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase4 | Improve this Doc View Source IsCase5 Declaration public bool IsCase5 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase5 | Improve this Doc View Source IsCase6 Declaration public bool IsCase6 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase6 | Improve this Doc View Source IsCase7 Declaration public bool IsCase7 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase7 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T1 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T2 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Create(T3) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T3 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7> Create(T3 value) Parameters Type Name Description T3 value Value of type T3 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Create(T4) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T4 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7> Create(T4 value) Parameters Type Name Description T4 value Value of type T4 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Create(T5) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T5 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7> Create(T5 value) Parameters Type Name Description T5 value Value of type T5 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Create(T6) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T6 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7> Create(T6 value) Parameters Type Name Description T6 value Value of type T6 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Create(T7) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T7 . Declaration public static ValueOneOf<T1, T2, T3, T4, T5, T6, T7> Create(T7 value) Parameters Type Name Description T7 value Value of type T7 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Value of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>) Declaration public void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action, Action<T5> case5Action, Action<T6> case6Action, Action<T7> case7Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action System.Action <T3> case3Action System.Action <T4> case4Action System.Action <T5> case5Action System.Action <T6> case6Action System.Action <T7> case7Action Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>) | Improve this Doc View Source Equals(ValueOneOf<T1, T2, T3, T4, T5, T6, T7>) Declaration public bool Equals(ValueOneOf<T1, T2, T3, T4, T5, T6, T7> other) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>, Func<T7, TResult>) Declaration public TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector, Func<T5, TResult> case5Selector, Func<T6, TResult> case6Selector, Func<T7, TResult> case7Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector System.Func <T3, TResult> case3Selector System.Func <T4, TResult> case4Selector System.Func <T5, TResult> case5Selector System.Func <T6, TResult> case6Selector System.Func <T7, TResult> case7Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>, Func<T7, TResult>) Operators | Improve this Doc View Source Equality(ValueOneOf<T1, T2, T3, T4, T5, T6, T7>, ValueOneOf<T1, T2, T3, T4, T5, T6, T7>) Equality operator. Declaration public static bool operator ==(ValueOneOf<T1, T2, T3, T4, T5, T6, T7> left, ValueOneOf<T1, T2, T3, T4, T5, T6, T7> right) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> left Left parameter. ValueOneOf <T1, T2, T3, T4, T5, T6, T7> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T1 . | Improve this Doc View Source Implicit(T2 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T2 . | Improve this Doc View Source Implicit(T3 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7>(T3 value) Parameters Type Name Description T3 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T3 . | Improve this Doc View Source Implicit(T4 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7>(T4 value) Parameters Type Name Description T4 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T4 . | Improve this Doc View Source Implicit(T5 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7>(T5 value) Parameters Type Name Description T5 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T5 . | Improve this Doc View Source Implicit(T6 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7>(T6 value) Parameters Type Name Description T6 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T6 . | Improve this Doc View Source Implicit(T7 to ValueOneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4, T5, T6, T7>(T7 value) Parameters Type Name Description T7 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> Instance of ValueOneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T7 . | Improve this Doc View Source Inequality(ValueOneOf<T1, T2, T3, T4, T5, T6, T7>, ValueOneOf<T1, T2, T3, T4, T5, T6, T7>) Unequality operator. Declaration public static bool operator !=(ValueOneOf<T1, T2, T3, T4, T5, T6, T7> left, ValueOneOf<T1, T2, T3, T4, T5, T6, T7> right) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4, T5, T6, T7> left Left parameter. ValueOneOf <T1, T2, T3, T4, T5, T6, T7> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Threading.InterlockedOperations.html": {
    "href": "api/main/CodeJam.Threading.InterlockedOperations.html",
    "title": "Class InterlockedOperations | CodeJam",
    "keywords": "Class InterlockedOperations Provides a helper class for initializing a values in a thread-safe manner. Inheritance System.Object InterlockedOperations Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Threading Assembly : CodeJam.dll Syntax public static class InterlockedOperations Methods | Improve this Doc View Source Initialize(ref Double, Double) Initialize the value referenced by target in a thread-safe manner. The value is changed to value only if the current value is default(double). Declaration public static double Initialize(ref double target, double value) Parameters Type Name Description System.Double target Reference to the target location. System.Double value The value to use if the target is equal to default(double). Returns Type Description System.Double The new value referenced by target . Note that this is nearly always more useful than the usual return from System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double) because it saves another read to target . | Improve this Doc View Source Initialize(ref Double, Double, Double) Initialize the value referenced by target in a thread-safe manner. The value is changed to initializedValue only if the current value is uninitializedValue . Declaration public static double Initialize(ref double target, double initializedValue, double uninitializedValue) Parameters Type Name Description System.Double target Reference to the target location. System.Double initializedValue The value to use if the target is currently uninitialized. System.Double uninitializedValue The uninitialized value. Returns Type Description System.Double The new value referenced by target . Note that this is nearly always more useful than the usual return from System.Threading.Interlocked.CompareExchange(System.Double@,System.Double,System.Double) because it saves another read to target . | Improve this Doc View Source Initialize(ref Int32, Int32) Initialize the value referenced by target in a thread-safe manner. The value is changed to value only if the current value is default(int). Declaration public static int Initialize(ref int target, int value) Parameters Type Name Description System.Int32 target Reference to the target location. System.Int32 value The value to use if the target is equal to default(int). Returns Type Description System.Int32 The new value referenced by target . Note that this is nearly always more useful than the usual return from System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32) because it saves another read to target . | Improve this Doc View Source Initialize(ref Int32, Int32, Int32) Initialize the value referenced by target in a thread-safe manner. The value is changed to initializedValue only if the current value is uninitializedValue . Declaration public static int Initialize(ref int target, int initializedValue, int uninitializedValue) Parameters Type Name Description System.Int32 target Reference to the target location. System.Int32 initializedValue The value to use if the target is currently uninitialized. System.Int32 uninitializedValue The uninitialized value. Returns Type Description System.Int32 The new value referenced by target . Note that this is nearly always more useful than the usual return from System.Threading.Interlocked.CompareExchange(System.Int32@,System.Int32,System.Int32) because it saves another read to target . | Improve this Doc View Source Initialize(ref Int64, Int64) Initialize the value referenced by target in a thread-safe manner. The value is changed to value only if the current value is default(long). Declaration public static long Initialize(ref long target, long value) Parameters Type Name Description System.Int64 target Reference to the target location. System.Int64 value The value to use if the target is equal to default(long). Returns Type Description System.Int64 The new value referenced by target . Note that this is nearly always more useful than the usual return from System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64) because it saves another read to target . | Improve this Doc View Source Initialize(ref Int64, Int64, Int64) Initialize the value referenced by target in a thread-safe manner. The value is changed to initializedValue only if the current value is uninitializedValue . Declaration public static long Initialize(ref long target, long initializedValue, long uninitializedValue) Parameters Type Name Description System.Int64 target Reference to the target location. System.Int64 initializedValue The value to use if the target is currently uninitialized. System.Int64 uninitializedValue The uninitialized value. Returns Type Description System.Int64 The new value referenced by target . Note that this is nearly always more useful than the usual return from System.Threading.Interlocked.CompareExchange(System.Int64@,System.Int64,System.Int64) because it saves another read to target . | Improve this Doc View Source Initialize(ref Single, Single) Initialize the value referenced by target in a thread-safe manner. The value is changed to value only if the current value is default(float). Declaration public static float Initialize(ref float target, float value) Parameters Type Name Description System.Single target Reference to the target location. System.Single value The value to use if the target is equal to default(float). Returns Type Description System.Single The new value referenced by target . Note that this is nearly always more useful than the usual return from System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single) because it saves another read to target . | Improve this Doc View Source Initialize(ref Single, Single, Single) Initialize the value referenced by target in a thread-safe manner. The value is changed to initializedValue only if the current value is uninitializedValue . Declaration public static float Initialize(ref float target, float initializedValue, float uninitializedValue) Parameters Type Name Description System.Single target Reference to the target location. System.Single initializedValue The value to use if the target is currently uninitialized. System.Single uninitializedValue The uninitialized value. Returns Type Description System.Single The new value referenced by target . Note that this is nearly always more useful than the usual return from System.Threading.Interlocked.CompareExchange(System.Single@,System.Single,System.Single) because it saves another read to target . | Improve this Doc View Source Initialize<T>(ref T, T) Initialize the value referenced by target in a thread-safe manner. The value is changed to value only if the current value is default(T). Declaration public static T Initialize<T>(ref T target, T value)where T : class Parameters Type Name Description T target Reference to the target location. T value The value to use if the target is equal to default(T). Returns Type Description T The new value referenced by target . Note that this is nearly always more useful than the usual return from System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0) because it saves another read to target . Type Parameters Name Description T Type of value. | Improve this Doc View Source Initialize<T>(ref T, T, T) Initialize the value referenced by target in a thread-safe manner. The value is changed to initializedValue only if the current value is uninitializedValue . Declaration public static T Initialize<T>(ref T target, T initializedValue, T uninitializedValue)where T : class Parameters Type Name Description T target Reference to the target location. T initializedValue The value to use if the target is currently uninitialized. T uninitializedValue The uninitialized value. Returns Type Description T The new value referenced by target . Note that this is nearly always more useful than the usual return from System.Threading.Interlocked.CompareExchange``1(``0@,``0,``0) because it saves another read to target . Type Parameters Name Description T Type of value. | Improve this Doc View Source Update(ref Double, Double, Func<Double, Double, Double>) Implements lock-free update pattern implementation based on compare-and-swap loop Declaration public static double Update(ref double value, double newValue, Func<double, double, double> updateCallback) Parameters Type Name Description System.Double value Value to change. System.Double newValue Precalculated new value. System.Func < System.Double , System.Double , System.Double > updateCallback Function to calculate new value. Returns Type Description System.Double New value. Remarks Uses the same approach that used by c# compiler in event subscription methods | Improve this Doc View Source Update(ref Double, Func<Double, Double>) Implements lock-free update pattern implementation based on compare-and-swap loop Declaration public static double Update(ref double value, Func<double, double> updateCallback) Parameters Type Name Description System.Double value Value to change. System.Func < System.Double , System.Double > updateCallback Function to calculate new value. Returns Type Description System.Double New value. Remarks Uses the same approach that used by c# compiler in event subscription methods | Improve this Doc View Source Update(ref Int32, Func<Int32, Int32>) Implements lock-free update pattern implementation based on compare-and-swap loop Declaration public static int Update(ref int value, Func<int, int> updateCallback) Parameters Type Name Description System.Int32 value Value to change. System.Func < System.Int32 , System.Int32 > updateCallback Function to calculate new value. Returns Type Description System.Int32 New value. Remarks Uses the same approach that used by c# compiler in event subscription methods | Improve this Doc View Source Update(ref Int32, Int32, Func<Int32, Int32, Int32>) Implements lock-free update pattern implementation based on compare-and-swap loop Declaration public static int Update(ref int value, int newValue, Func<int, int, int> updateCallback) Parameters Type Name Description System.Int32 value Value to change. System.Int32 newValue Precalculated new value. System.Func < System.Int32 , System.Int32 , System.Int32 > updateCallback Function to calculate new value. Returns Type Description System.Int32 New value. Remarks Uses the same approach that used by c# compiler in event subscription methods | Improve this Doc View Source Update(ref Int64, Func<Int64, Int64>) Implements lock-free update pattern implementation based on compare-and-swap loop Declaration public static long Update(ref long value, Func<long, long> updateCallback) Parameters Type Name Description System.Int64 value Value to change. System.Func < System.Int64 , System.Int64 > updateCallback Function to calculate new value. Returns Type Description System.Int64 New value. Remarks Uses the same approach that used by c# compiler in event subscription methods | Improve this Doc View Source Update(ref Int64, Int64, Func<Int64, Int64, Int64>) Implements lock-free update pattern implementation based on compare-and-swap loop Declaration public static long Update(ref long value, long newValue, Func<long, long, long> updateCallback) Parameters Type Name Description System.Int64 value Value to change. System.Int64 newValue Precalculated new value. System.Func < System.Int64 , System.Int64 , System.Int64 > updateCallback Function to calculate new value. Returns Type Description System.Int64 New value. Remarks Uses the same approach that used by c# compiler in event subscription methods | Improve this Doc View Source Update(ref Single, Func<Single, Single>) Implements lock-free update pattern implementation based on compare-and-swap loop Declaration public static float Update(ref float value, Func<float, float> updateCallback) Parameters Type Name Description System.Single value Value to change. System.Func < System.Single , System.Single > updateCallback Function to calculate new value. Returns Type Description System.Single New value. Remarks Uses the same approach that used by c# compiler in event subscription methods | Improve this Doc View Source Update(ref Single, Single, Func<Single, Single, Single>) Implements lock-free update pattern implementation based on compare-and-swap loop Declaration public static float Update(ref float value, float newValue, Func<float, float, float> updateCallback) Parameters Type Name Description System.Single value Value to change. System.Single newValue Precalculated new value. System.Func < System.Single , System.Single , System.Single > updateCallback Function to calculate new value. Returns Type Description System.Single New value. Remarks Uses the same approach that used by c# compiler in event subscription methods | Improve this Doc View Source Update<T>(ref T, T, Func<T, T, T>) Implements lock-free update pattern implementation based on compare-and-swap loop Declaration public static T Update<T>(ref T value, T newValue, Func<T, T, T> updateCallback)where T : class Parameters Type Name Description T value Value to change. T newValue Precalculated new value. System.Func <T, T, T> updateCallback Function to calculate new value. Returns Type Description T New value. Type Parameters Name Description T Remarks Uses the same approach that used by c# compiler in event subscription methods | Improve this Doc View Source Update<T>(ref T, Func<T, T>) Implements lock-free update pattern implementation based on compare-and-swap loop Declaration public static T Update<T>(ref T value, Func<T, T> updateCallback)where T : class Parameters Type Name Description T value Value to change. System.Func <T, T> updateCallback Function to calculate new value. Returns Type Description T New value. Type Parameters Name Description T Remarks Uses the same approach that used by c# compiler in event subscription methods"
  },
  "api/main/CodeJam.Threading.ExecSyncConcurrentLazyDictionary-2.html": {
    "href": "api/main/CodeJam.Threading.ExecSyncConcurrentLazyDictionary-2.html",
    "title": "Class ExecSyncConcurrentLazyDictionary<TKey, TValue> | CodeJam",
    "keywords": "Class ExecSyncConcurrentLazyDictionary<TKey, TValue> Dictionary with lazy values initialization. Inheritance System.Object ExecSyncConcurrentLazyDictionary<TKey, TValue> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Threading Assembly : CodeJam.dll Syntax public class ExecSyncConcurrentLazyDictionary<TKey, TValue> : ILazyDictionary<TKey, TValue>, IReadOnlyDictionary<TKey, TValue>, IReadOnlyCollection<KeyValuePair<TKey, TValue>>, IEnumerable<KeyValuePair<TKey, TValue>>, IEnumerable Type Parameters Name Description TKey TValue Remarks Thread safe. Constructors | Improve this Doc View Source ExecSyncConcurrentLazyDictionary(Func<TKey, TValue>) Initialize instance. Declaration public ExecSyncConcurrentLazyDictionary(Func<TKey, TValue> valueFactory) Parameters Type Name Description System.Func <TKey, TValue> valueFactory Function to create value on demand. | Improve this Doc View Source ExecSyncConcurrentLazyDictionary(Func<TKey, TValue>, IEqualityComparer<TKey>) Initialize instance. Declaration public ExecSyncConcurrentLazyDictionary(Func<TKey, TValue> valueFactory, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Func <TKey, TValue> valueFactory Function to create value on demand. System.Collections.Generic.IEqualityComparer <TKey> comparer Key comparer. Properties | Improve this Doc View Source Item[TKey] Gets the element that has the specified key in the read-only dictionary. Declaration public TValue this[TKey key] { get; } Parameters Type Name Description TKey key The key to locate. Property Value Type Description TValue The element that has the specified key in the read-only dictionary. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Item[TKey] Exceptions Type Condition System.ArgumentNullException key is null. System.Collections.Generic.KeyNotFoundException The property is retrieved and key is not found. | Improve this Doc View Source Keys Gets an enumerable collection that contains the keys in the read-only dictionary. Declaration public IEnumerable<TKey> Keys { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TKey> An enumerable collection that contains the keys in the read-only dictionary. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Keys | Improve this Doc View Source Values Gets an enumerable collection that contains the values in the read-only dictionary. Declaration public IEnumerable<TValue> Values { get; } Property Value Type Description System.Collections.Generic.IEnumerable <TValue> An enumerable collection that contains the values in the read-only dictionary. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.Values Methods | Improve this Doc View Source Clear() Clears all created values Declaration public void Clear() Implements ILazyDictionary<TKey, TValue>.Clear() | Improve this Doc View Source ContainsKey(TKey) Determines whether the read-only dictionary contains an element that has the specified key. Declaration public bool ContainsKey(TKey key) Parameters Type Name Description TKey key The key to locate. Returns Type Description System.Boolean true if the read-only dictionary contains an element that has the specified key; otherwise, false. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.ContainsKey(TKey) Exceptions Type Condition System.ArgumentNullException key is null. | Improve this Doc View Source TryGetValue(TKey, out TValue) Gets the value that is associated with the specified key. Declaration public bool TryGetValue(TKey key, out TValue value) Parameters Type Name Description TKey key The key to locate. TValue value When this method returns, the value associated with the specified key, if the key is found; otherwise, the default value for the type of the value parameter. This parameter is passed uninitialized. Returns Type Description System.Boolean true if the object that implements the System.Collections.Generic.IReadOnlyDictionary<TKey, TValue> interface contains an element that has the specified key; otherwise, false. Implements System.Collections.Generic.IReadOnlyDictionary<TKey, TValue>.TryGetValue(TKey, TValue) Exceptions Type Condition System.ArgumentNullException key is null. Explicit Interface Implementations | Improve this Doc View Source IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() Declaration IEnumerator<KeyValuePair<TKey, TValue>> IEnumerable<KeyValuePair<TKey, TValue>>.GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < System.Collections.Generic.KeyValuePair <TKey, TValue>> Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() | Improve this Doc View Source IReadOnlyCollection<KeyValuePair<TKey, TValue>>.Count Declaration int IReadOnlyCollection<KeyValuePair<TKey, TValue>>.Count { get; } Returns Type Description System.Int32 Implements System.Collections.Generic.IReadOnlyCollection<T>.Count | Improve this Doc View Source IEnumerable.GetEnumerator() Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator() Extension Methods DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey, TValue) DictionaryExtensions.GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>) DictionaryExtensions.GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, TResult) DictionaryExtensions.GetValueOrDefault<TKey, TValue>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue>) DictionaryExtensions.GetValueOrDefault<TKey, TValue, TResult>(IReadOnlyDictionary<TKey, TValue>, TKey, Func<TKey, TValue, TResult>, Func<TKey, TResult>) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, TSource) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, TAccumulate) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, TResult) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, Func<TSource>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, Func<TResult>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.WithIndex<T>(IEnumerable<T>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, Func<T, T, TResult>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.CombineWithNext<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhile<T>(IEnumerable<T>, Func<T, T, Boolean>) EnumerableExtensions.Page<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Slice<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TakeLast<T>(IEnumerable<T>, Int32) EnumerableExtensions.Split<T>(IEnumerable<T>, Int32) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.Union<T>(IEnumerable<T>, T[]) EnumerableExtensions.Concat<T>(IEnumerable<T>, T) EnumerableExtensions.Concat<T>(IEnumerable<T>, T[]) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T[]) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>, IEqualityComparer<T>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.OrderBy<TSource>(IEnumerable<TSource>) EnumerableExtensions.OrderByDescending<TSource>(IEnumerable<TSource>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T, Func<T, Boolean>) EnumerableExtensions.AsList<T>(IEnumerable<T>) EnumerableExtensions.AsArray<T>(IEnumerable<T>) EnumerableExtensions.ToStrings<T>(IEnumerable<T>) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) CompositeRangeExtensions.ToCompositeRange<T, TKey>(IEnumerable<TKey>, Func<TKey, T>, Func<TKey, T>) CompositeRangeExtensions.ToCompositeRange<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.Join<T>(IEnumerable<T>, String) StringExtensions.Join<T>(IEnumerable<T>) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Int32, Action<T>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Action<T>, String)"
  },
  "api/main/CodeJam.Reflection.MemberAccessor.html": {
    "href": "api/main/CodeJam.Reflection.MemberAccessor.html",
    "title": "Class MemberAccessor | CodeJam",
    "keywords": "Class MemberAccessor Provides fast access to a type member. Inheritance System.Object MemberAccessor Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Reflection Assembly : CodeJam.dll Syntax public class MemberAccessor Properties | Improve this Doc View Source Getter Member getter function. Declaration public Func<object, object> Getter { get; } Property Value Type Description System.Func < System.Object , System.Object > | Improve this Doc View Source GetterExpression Getter expression of the member. Declaration public LambdaExpression GetterExpression { get; } Property Value Type Description System.Linq.Expressions.LambdaExpression | Improve this Doc View Source HasGetter True, if the member has getter. Declaration public bool HasGetter { get; } Property Value Type Description System.Boolean | Improve this Doc View Source HasSetter True, if the member has setter. Declaration public bool HasSetter { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsComplex True, if the member is complex. Declaration public bool IsComplex { get; } Property Value Type Description System.Boolean | Improve this Doc View Source MemberInfo Member MemberInfo . Declaration public MemberInfo MemberInfo { get; } Property Value Type Description System.Reflection.MemberInfo | Improve this Doc View Source Name Member name. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source Setter Member setter action. Declaration public Action<object, object> Setter { get; } Property Value Type Description System.Action < System.Object , System.Object > | Improve this Doc View Source SetterExpression Setter expression of the member. Declaration public LambdaExpression SetterExpression { get; } Property Value Type Description System.Linq.Expressions.LambdaExpression | Improve this Doc View Source Type Member Type . Declaration public Type Type { get; } Property Value Type Description System.Type | Improve this Doc View Source TypeAccessor Parent TypeAccessor . Declaration public TypeAccessor TypeAccessor { get; } Property Value Type Description TypeAccessor Methods | Improve this Doc View Source GetValue(Object) Gets member value for provided object. Declaration public object GetValue(object o) Parameters Type Name Description System.Object o Object to access. Returns Type Description System.Object Member value. | Improve this Doc View Source SetValue(Object, Object) Sets member value for provided object. Declaration public void SetValue(object o, object value) Parameters Type Name Description System.Object o Object to access. System.Object value Value to set. Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Reflection.InfoOf.html": {
    "href": "api/main/CodeJam.Reflection.InfoOf.html",
    "title": "Class InfoOf | CodeJam",
    "keywords": "Class InfoOf Provides a helper class to get the property, field, ctor or method from an expression. Inheritance System.Object InfoOf Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Reflection Assembly : CodeJam.dll Syntax public static class InfoOf Methods | Improve this Doc View Source Constructor<T>() Returns the constructor. Declaration public static ConstructorInfo Constructor<T>()where T : new () Returns Type Description System.Reflection.ConstructorInfo The System.Reflection.ConstructorInfo instance. Type Parameters Name Description T | Improve this Doc View Source Constructor<T>(Expression<Func<T>>) Returns the constructor. Declaration public static ConstructorInfo Constructor<T>(Expression<Func<T>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T>> expression The expression to analyze. Returns Type Description System.Reflection.ConstructorInfo The System.Reflection.ConstructorInfo instance. Type Parameters Name Description T | Improve this Doc View Source Field<T>(Expression<Func<T, Object>>) Returns the field. Declaration public static FieldInfo Field<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression The expression to analyze. Returns Type Description System.Reflection.FieldInfo The System.Reflection.FieldInfo instance. Type Parameters Name Description T | Improve this Doc View Source Field<TValue>(Expression<Func<TValue>>) Returns the field. Declaration public static FieldInfo Field<TValue>(Expression<Func<TValue>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TValue>> expression The expression to analyze. Returns Type Description System.Reflection.FieldInfo The System.Reflection.FieldInfo instance. Type Parameters Name Description TValue | Improve this Doc View Source Field<T, TValue>(Expression<Func<T, TValue>>) Returns the field. Declaration public static FieldInfo Field<T, TValue>(Expression<Func<T, TValue>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, TValue>> expression The expression to analyze. Returns Type Description System.Reflection.FieldInfo The System.Reflection.FieldInfo instance. Type Parameters Name Description T TValue | Improve this Doc View Source Member<T>(Expression<Func<T, Object>>) Returns the System.Reflection.MemberInfo . Declaration public static MemberInfo Member<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression The expression to analyze. Returns Type Description System.Reflection.MemberInfo The System.Reflection.MemberInfo instance. Type Parameters Name Description T | Improve this Doc View Source Member<TValue>(Expression<Func<TValue>>) Returns the System.Reflection.MemberInfo . Declaration public static MemberInfo Member<TValue>(Expression<Func<TValue>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TValue>> expression The expression to analyze. Returns Type Description System.Reflection.MemberInfo The System.Reflection.MemberInfo instance. Type Parameters Name Description TValue | Improve this Doc View Source Member<T, TValue>(Expression<Func<T, TValue>>) Returns the System.Reflection.MemberInfo . Declaration public static MemberInfo Member<T, TValue>(Expression<Func<T, TValue>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, TValue>> expression The expression to analyze. Returns Type Description System.Reflection.MemberInfo The System.Reflection.MemberInfo instance. Type Parameters Name Description T TValue | Improve this Doc View Source Method(Expression<Action>) Returns the method. Declaration public static MethodInfo Method(Expression<Action> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action > expression The expression to analyze. Returns Type Description System.Reflection.MethodInfo The System.Reflection.MethodInfo instance. | Improve this Doc View Source Method<T>(Expression<Action<T>>) Returns the method. Declaration public static MethodInfo Method<T>(Expression<Action<T>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Action <T>> expression The expression to analyze. Returns Type Description System.Reflection.MethodInfo The System.Reflection.MethodInfo instance. Type Parameters Name Description T | Improve this Doc View Source Method<T>(Expression<Func<T, Object>>) Returns the method. Declaration public static MethodInfo Method<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression The expression to analyze. Returns Type Description System.Reflection.MethodInfo The System.Reflection.MethodInfo instance. Type Parameters Name Description T | Improve this Doc View Source Method<T>(Expression<Func<T>>) Returns the method. Declaration public static MethodInfo Method<T>(Expression<Func<T>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T>> expression The expression to analyze. Returns Type Description System.Reflection.MethodInfo The System.Reflection.MethodInfo instance. Type Parameters Name Description T | Improve this Doc View Source Method<T, TResult>(Expression<Func<T, TResult>>) Returns the method. Declaration public static MethodInfo Method<T, TResult>(Expression<Func<T, TResult>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, TResult>> expression The expression to analyze. Returns Type Description System.Reflection.MethodInfo The System.Reflection.MethodInfo instance. Type Parameters Name Description T TResult | Improve this Doc View Source Property<T>(Expression<Func<T, Object>>) Returns the property. Declaration public static PropertyInfo Property<T>(Expression<Func<T, object>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >> expression The expression to analyze. Returns Type Description System.Reflection.PropertyInfo The System.Reflection.PropertyInfo instance. Type Parameters Name Description T | Improve this Doc View Source Property<TValue>(Expression<Func<TValue>>) Returns the property. Declaration public static PropertyInfo Property<TValue>(Expression<Func<TValue>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <TValue>> expression The expression to analyze. Returns Type Description System.Reflection.PropertyInfo The System.Reflection.PropertyInfo instance. Type Parameters Name Description TValue | Improve this Doc View Source Property<T, TValue>(Expression<Func<T, TValue>>) Returns the property. Declaration public static PropertyInfo Property<T, TValue>(Expression<Func<T, TValue>> expression) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, TValue>> expression The expression to analyze. Returns Type Description System.Reflection.PropertyInfo The System.Reflection.PropertyInfo instance. Type Parameters Name Description T TValue"
  },
  "api/main/CodeJam.Ranges.IRange-1.html": {
    "href": "api/main/CodeJam.Ranges.IRange-1.html",
    "title": "Interface IRange<T> | CodeJam",
    "keywords": "Interface IRange<T> Common interface for different range implementations Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax public interface IRange<T> Type Parameters Name Description T The type of the value. Should implement System.IComparable<T> or System.IComparable . Properties | Improve this Doc View Source From Boundary From. Limits the values from the left. Declaration RangeBoundaryFrom<T> From { get; } Property Value Type Description RangeBoundaryFrom <T> Boundary From. | Improve this Doc View Source IsEmpty The range is empty, ∅. Declaration bool IsEmpty { get; } Property Value Type Description System.Boolean true if the range is empty; otherwise, false . | Improve this Doc View Source IsNotEmpty The range is NOT empty, ≠ ∅ Declaration bool IsNotEmpty { get; } Property Value Type Description System.Boolean true if the range is not empty; otherwise, false . | Improve this Doc View Source To Boundary To. Limits the values from the right. Declaration RangeBoundaryTo<T> To { get; } Property Value Type Description RangeBoundaryTo <T> Boundary To. Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Threading.AsyncLock.html": {
    "href": "api/main/CodeJam.Threading.AsyncLock.html",
    "title": "Class AsyncLock | CodeJam",
    "keywords": "Class AsyncLock Lock, that can be used with async/await code. Inheritance System.Object AsyncLock Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Threading Assembly : CodeJam.dll Syntax public class AsyncLock Methods | Improve this Doc View Source AcquireAsync() Acquires async lock. Declaration public Task<IDisposable> AcquireAsync() Returns Type Description System.Threading.Tasks.Task < System.IDisposable > A task that returns System.IDisposable to release the lock. | Improve this Doc View Source AcquireAsync(Int32) Acquires async lock. Declaration public Task<IDisposable> AcquireAsync(int timeout) Parameters Type Name Description System.Int32 timeout A number of milliseconds that represents the timeout to wait if lock already acquired, a -1 to wait indefinitely, or a 0 to return immediately. Returns Type Description System.Threading.Tasks.Task < System.IDisposable > A task that returns System.IDisposable to release the lock. Exceptions Type Condition System.TimeoutException The timeout has expired. | Improve this Doc View Source AcquireAsync(Int32, CancellationToken) Acquires async lock. Declaration public Task<IDisposable> AcquireAsync(int timeout, CancellationToken cancellation) Parameters Type Name Description System.Int32 timeout A number of milliseconds that represents the timeout to wait if lock already acquired, a -1 to wait indefinitely, or a 0 to return immediately. System.Threading.CancellationToken cancellation The CancellationToken token to observe. Returns Type Description System.Threading.Tasks.Task < System.IDisposable > A task that returns System.IDisposable to release the lock. Exceptions Type Condition System.OperationCanceledException The token has had cancellation requested. System.TimeoutException The timeout has expired. | Improve this Doc View Source AcquireAsync(CancellationToken) Acquires async lock. Declaration public Task<IDisposable> AcquireAsync(CancellationToken cancellation) Parameters Type Name Description System.Threading.CancellationToken cancellation The CancellationToken token to observe. Returns Type Description System.Threading.Tasks.Task < System.IDisposable > A task that returns System.IDisposable to release the lock. Exceptions Type Condition System.OperationCanceledException The token has had cancellation requested. | Improve this Doc View Source AcquireAsync(TimeSpan) Acquires async lock. Declaration public Task<IDisposable> AcquireAsync(TimeSpan timeout) Parameters Type Name Description System.TimeSpan timeout A System.TimeSpan that represents the timeout to wait if lock already acquired, a System.TimeSpan that represents -1 milliseconds to wait indefinitely, or a System.TimeSpan that represents 0 milliseconds to return immediately. Returns Type Description System.Threading.Tasks.Task < System.IDisposable > A task that returns System.IDisposable to release the lock. Exceptions Type Condition System.TimeoutException The timeout has expired. | Improve this Doc View Source AcquireAsync(TimeSpan, CancellationToken) Acquires async lock. Declaration public Task<IDisposable> AcquireAsync(TimeSpan timeout, CancellationToken cancellation) Parameters Type Name Description System.TimeSpan timeout A System.TimeSpan that represents the timeout to wait if lock already acquired, a System.TimeSpan that represents -1 milliseconds to wait indefinitely, or a System.TimeSpan that represents 0 milliseconds to return immediately. System.Threading.CancellationToken cancellation The CancellationToken token to observe. Returns Type Description System.Threading.Tasks.Task < System.IDisposable > A task that returns System.IDisposable to release the lock. Exceptions Type Condition System.OperationCanceledException The token has had cancellation requested. System.TimeoutException The timeout has expired. Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Strings.html": {
    "href": "api/main/CodeJam.Strings.html",
    "title": "Namespace CodeJam.Strings | CodeJam",
    "keywords": "Namespace CodeJam.Strings Classes CharExtensions System.Char structure extensions. NaturalOrderStringComparer String comparisons using a \"natural order\" algorithm. StringExtensions System.String class extensions. Enums StringOrigin String functions relative parameters origin"
  },
  "api/main/CodeJam.Ranges.html": {
    "href": "api/main/CodeJam.Ranges.html",
    "title": "Namespace CodeJam.Ranges | CodeJam",
    "keywords": "Namespace CodeJam.Ranges Classes CompositeRange Helper methods for the CompositeRange<T> . CompositeRangeExtensions Extension methods for CompositeRange<T> . Range Helper methods for the Range<T> . RangeExtensions Extension methods for Range<T> . Structs CompositeRange<T> Describes a composite range that contains some subranges. CompositeRange<T, TKey> Describes a range of the values. Range<T> Describes a range of the values. Range<T, TKey> Describes a range of the values with a key attached. RangeBoundaryFrom<T> The From boundary of the range. RangeBoundaryTo<T> The To boundary of the range. RangeIntersection<T> Describes an intersection of multiple ranges. RangeIntersection<T, TKey> Describes an intersection of multiple ranges. Interfaces ICompositeRange<T> Common interface for different composite range implementations IRange<T> Common interface for different range implementations IRangeFactory<T, TRange> Common factory interface to enable 'derived' range creation. Use case example: preserve the key of the range on range intersection. Enums RangeBoundaryFromKind The kind of From range boundary. RangeBoundaryToKind The kind of To range boundary."
  },
  "api/main/CodeJam.Ranges.RangeIntersection-2.html": {
    "href": "api/main/CodeJam.Ranges.RangeIntersection-2.html",
    "title": "Struct RangeIntersection<T, TKey> | CodeJam",
    "keywords": "Struct RangeIntersection<T, TKey> Describes an intersection of multiple ranges. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax public struct RangeIntersection<T, TKey> : IFormattable Type Parameters Name Description T The type of the range values. TKey The type of the range key Properties | Improve this Doc View Source IntersectionRange The common part for all ranges in intersection. Declaration public Range<T> IntersectionRange { get; } Property Value Type Description Range <T> The common part for all ranges in intersection. | Improve this Doc View Source IsEmpty Gets a value indicating whether the intersection does not contain any ranges. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if the intersection does not contain any ranges; otherwise, false . | Improve this Doc View Source IsNotEmpty Gets a value indicating whether the intersection contains any ranges. Declaration public bool IsNotEmpty { get; } Property Value Type Description System.Boolean true if the intersection contains any ranges; otherwise, false . | Improve this Doc View Source Ranges The ranges in the intersection, if any. Declaration public IReadOnlyList<Range<T, TKey>> Ranges { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Range <T, TKey>> The ranges in the intersection, if any. Methods | Improve this Doc View Source ToString() Returns string representation of the range intersection. Declaration public override string ToString() Returns Type Description System.String The string representation of the range intersection. Overrides System.ValueType.ToString() | Improve this Doc View Source ToString(IFormatProvider) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format string. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String, IFormatProvider) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format string. System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. Implements System.IFormattable.ToString(System.String, System.IFormatProvider) Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.ToInvariantString<T>(T) StringExtensions.ToInvariantString<T>(T, String) See Also System.IFormattable"
  },
  "api/main/CodeJam.Ranges.CompositeRange-2.html": {
    "href": "api/main/CodeJam.Ranges.CompositeRange-2.html",
    "title": "Struct CompositeRange<T, TKey> | CodeJam",
    "keywords": "Struct CompositeRange<T, TKey> Describes a range of the values. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax [Serializable] public struct CompositeRange<T, TKey> : IEquatable<CompositeRange<T, TKey>>, IFormattable, ICompositeRange<T> Type Parameters Name Description T The type of the value. Should implement System.IComparable<T> or System.IComparable . TKey The type of the range key Constructors | Improve this Doc View Source CompositeRange(Range<T, TKey>) Creates instance of CompositeRange<T> . Declaration public CompositeRange(Range<T, TKey> range) Parameters Type Name Description Range <T, TKey> range Contained range. | Improve this Doc View Source CompositeRange(IEnumerable<Range<T, TKey>>) Creates instance of CompositeRange<T> . Declaration public CompositeRange(IEnumerable<Range<T, TKey>> ranges) Parameters Type Name Description System.Collections.Generic.IEnumerable < Range <T, TKey>> ranges Contained ranges. Fields | Improve this Doc View Source Empty Empty range, ∅ Declaration public static readonly CompositeRange<T, TKey> Empty Field Value Type Description CompositeRange <T, TKey> | Improve this Doc View Source Infinite Infinite range, (-∞..+∞) Declaration public static readonly CompositeRange<T, TKey> Infinite Field Value Type Description CompositeRange <T, TKey> Properties | Improve this Doc View Source ContainingRange Range that contains all subranges. Declaration public Range<T> ContainingRange { get; } Property Value Type Description Range <T> The containing range. Implements ICompositeRange<T>.ContainingRange | Improve this Doc View Source IsEmpty The composite range is empty, ∅. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if the range is empty; otherwise, false . Implements ICompositeRange<T>.IsEmpty | Improve this Doc View Source IsMerged The composite range cannot be simplified anymore. Subranges do not intersect and start one exactly after another. Declaration public bool IsMerged { get; } Property Value Type Description System.Boolean true if all subranges are merged already; otherwise, false . | Improve this Doc View Source IsNotEmpty The composite range is NOT empty, ≠ ∅ Declaration public bool IsNotEmpty { get; } Property Value Type Description System.Boolean true if the range is not empty; otherwise, false . Implements ICompositeRange<T>.IsNotEmpty | Improve this Doc View Source SubRanges Collection of subranges. Declaration public ReadOnlyCollection<Range<T, TKey>> SubRanges { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < Range <T, TKey>> The collection of subranges. Methods | Improve this Doc View Source Equals(CompositeRange<T, TKey>) Indicates whether the current range is equal to another. Declaration public bool Equals(CompositeRange<T, TKey> other) Parameters Type Name Description CompositeRange <T, TKey> other A range to compare with this. Returns Type Description System.Boolean True if the current range is equal to the other parameter; otherwise, false. Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Indicates whether the current range and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with this. Returns Type Description System.Boolean True if obj and the current range are the same type and represent the same value; otherwise, false. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for the current range. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Merge() Returns simplified composite range. Adjacent ranges with same keys will be merged. Declaration public CompositeRange<T, TKey> Merge() Returns Type Description CompositeRange <T, TKey> Simplified composite range. | Improve this Doc View Source ToString() Returns string representation of the range. Declaration public override string ToString() Returns Type Description System.String The string representation of the range. Overrides System.ValueType.ToString() | Improve this Doc View Source ToString(IFormatProvider) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format string. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String, IFormatProvider) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format string. System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. Implements System.IFormattable.ToString(System.String, System.IFormatProvider) Operators | Improve this Doc View Source Equality(CompositeRange<T, TKey>, CompositeRange<T, TKey>) Implements the operator ==. Declaration public static bool operator ==(CompositeRange<T, TKey> range1, CompositeRange<T, TKey> range2) Parameters Type Name Description CompositeRange <T, TKey> range1 The range1. CompositeRange <T, TKey> range2 The range2. Returns Type Description System.Boolean True , if ranges are equal. | Improve this Doc View Source Inequality(CompositeRange<T, TKey>, CompositeRange<T, TKey>) Implements the operator !=. Declaration public static bool operator !=(CompositeRange<T, TKey> range1, CompositeRange<T, TKey> range2) Parameters Type Name Description CompositeRange <T, TKey> range1 The range1. CompositeRange <T, TKey> range2 The range2. Returns Type Description System.Boolean True , if ranges are not equal. Explicit Interface Implementations | Improve this Doc View Source ICompositeRange<T>.GetMergedRanges() Returns a sequence of merged subranges. Should be used for operations over the ranges. Declaration IEnumerable<Range<T>> ICompositeRange<T>.GetMergedRanges() Returns Type Description System.Collections.Generic.IEnumerable < Range <T>> A sequence of merged subranges Implements ICompositeRange<T>.GetMergedRanges() Extension Methods NullableHelper.AsNullable<T>(T) CompositeRangeExtensions.WithKeys<T, TKey, TKey2>(CompositeRange<T, TKey>, TKey2) CompositeRangeExtensions.WithKeys<T, TKey, TKey2>(CompositeRange<T, TKey>, Func<TKey, TKey2>) CompositeRangeExtensions.WithoutKeys<T, TKey>(CompositeRange<T, TKey>) CompositeRangeExtensions.GetComplementation<T, TKey>(CompositeRange<T, TKey>) CompositeRangeExtensions.MakeInclusive<T, TKey>(CompositeRange<T, TKey>, Func<T, T>, Func<T, T>) CompositeRangeExtensions.MakeExclusive<T, TKey>(CompositeRange<T, TKey>, Func<T, T>, Func<T, T>) CompositeRangeExtensions.WithValues<T, TKey, T2>(CompositeRange<T, TKey>, Func<T, T2>) CompositeRangeExtensions.WithValues<T, TKey, T2>(CompositeRange<T, TKey>, Func<T, T2>, Func<T, T2>) CompositeRangeExtensions.GetIntersections<T, TKey>(CompositeRange<T, TKey>) CompositeRangeExtensions.GetIntersection<T, TKey>(CompositeRange<T, TKey>, T) CompositeRangeExtensions.GetIntersection<T, TKey>(CompositeRange<T, TKey>, T, T) CompositeRangeExtensions.GetIntersection<T, TKey>(CompositeRange<T, TKey>, Range<T>) CompositeRangeExtensions.GetIntersection<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>) CompositeRangeExtensions.Contains<T, TKey>(CompositeRange<T, TKey>, T) CompositeRangeExtensions.Contains<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryFrom<T>) CompositeRangeExtensions.Contains<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryTo<T>) CompositeRangeExtensions.Contains<T, TKey>(CompositeRange<T, TKey>, T, T) CompositeRangeExtensions.Contains<T, TKey>(CompositeRange<T, TKey>, Range<T>) CompositeRangeExtensions.Contains<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>) CompositeRangeExtensions.Contains<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange) CompositeRangeExtensions.HasIntersection<T, TKey>(CompositeRange<T, TKey>, T, T) CompositeRangeExtensions.HasIntersection<T, TKey>(CompositeRange<T, TKey>, Range<T>) CompositeRangeExtensions.HasIntersection<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>) CompositeRangeExtensions.HasIntersection<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange) CompositeRangeExtensions.Union<T, TKey>(CompositeRange<T, TKey>, Range<T, TKey>) CompositeRangeExtensions.Union<T, TKey>(CompositeRange<T, TKey>, CompositeRange<T, TKey>) CompositeRangeExtensions.ExtendFrom<T, TKey>(CompositeRange<T, TKey>, T) CompositeRangeExtensions.ExtendFrom<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryFrom<T>) CompositeRangeExtensions.ExtendTo<T, TKey>(CompositeRange<T, TKey>, T) CompositeRangeExtensions.ExtendTo<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryTo<T>) CompositeRangeExtensions.Intersect<T, TKey>(CompositeRange<T, TKey>, T, T) CompositeRangeExtensions.Intersect<T, TKey>(CompositeRange<T, TKey>, Range<T>) CompositeRangeExtensions.Intersect<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>) CompositeRangeExtensions.Intersect<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange) CompositeRangeExtensions.TrimFrom<T, TKey>(CompositeRange<T, TKey>, T) CompositeRangeExtensions.TrimFrom<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryFrom<T>) CompositeRangeExtensions.TrimTo<T, TKey>(CompositeRange<T, TKey>, T) CompositeRangeExtensions.TrimTo<T, TKey>(CompositeRange<T, TKey>, RangeBoundaryTo<T>) CompositeRangeExtensions.Except<T, TKey>(CompositeRange<T, TKey>, T, T) CompositeRangeExtensions.Except<T, TKey>(CompositeRange<T, TKey>, Range<T>) CompositeRangeExtensions.Except<T, TKey, TKey2>(CompositeRange<T, TKey>, Range<T, TKey2>) CompositeRangeExtensions.Except<T, TKey, TCompositeRange>(CompositeRange<T, TKey>, TCompositeRange) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.ToInvariantString<T>(T) StringExtensions.ToInvariantString<T>(T, String)"
  },
  "api/main/CodeJam.Ranges.CompositeRange-1.html": {
    "href": "api/main/CodeJam.Ranges.CompositeRange-1.html",
    "title": "Struct CompositeRange<T> | CodeJam",
    "keywords": "Struct CompositeRange<T> Describes a composite range that contains some subranges. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax [Serializable] public struct CompositeRange<T> : IEquatable<CompositeRange<T>>, IFormattable, ICompositeRange<T> Type Parameters Name Description T The type of the value. Should implement System.IComparable<T> or System.IComparable . Constructors | Improve this Doc View Source CompositeRange(Range<T>) Creates instance of CompositeRange<T> . Declaration public CompositeRange(Range<T> range) Parameters Type Name Description Range <T> range Contained range. | Improve this Doc View Source CompositeRange(IEnumerable<Range<T>>) Creates instance of CompositeRange<T> . Declaration public CompositeRange(IEnumerable<Range<T>> ranges) Parameters Type Name Description System.Collections.Generic.IEnumerable < Range <T>> ranges Contained ranges. Fields | Improve this Doc View Source Empty Empty range, ∅ Declaration public static readonly CompositeRange<T> Empty Field Value Type Description CompositeRange <T> | Improve this Doc View Source Infinite Infinite range, (-∞..+∞) Declaration public static readonly CompositeRange<T> Infinite Field Value Type Description CompositeRange <T> Properties | Improve this Doc View Source ContainingRange Range that contains all subranges. Declaration public Range<T> ContainingRange { get; } Property Value Type Description Range <T> The containing range. Implements ICompositeRange<T>.ContainingRange | Improve this Doc View Source IsEmpty The composite range is empty, ∅. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if the range is empty; otherwise, false . Implements ICompositeRange<T>.IsEmpty | Improve this Doc View Source IsMerged The composite range cannot be simplified anymore. Subranges do not intersect and start one exactly after another. Declaration public bool IsMerged { get; } Property Value Type Description System.Boolean true if all subranges are merged already; otherwise, false . | Improve this Doc View Source IsNotEmpty The composite range is NOT empty, ≠ ∅ Declaration public bool IsNotEmpty { get; } Property Value Type Description System.Boolean true if the range is not empty; otherwise, false . Implements ICompositeRange<T>.IsNotEmpty | Improve this Doc View Source SubRanges Collection of subranges. Declaration public ReadOnlyCollection<Range<T>> SubRanges { get; } Property Value Type Description System.Collections.ObjectModel.ReadOnlyCollection < Range <T>> The collection of subranges. Methods | Improve this Doc View Source Equals(CompositeRange<T>) Indicates whether the current range is equal to another. Declaration public bool Equals(CompositeRange<T> other) Parameters Type Name Description CompositeRange <T> other A range to compare with this. Returns Type Description System.Boolean True if the current range is equal to the other parameter; otherwise, false. Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Indicates whether the current range and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with this. Returns Type Description System.Boolean True if obj and the current range are the same type and represent the same value; otherwise, false. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for the current range. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source Merge() Returns simplified composite range. Adjacent ranges with same keys will be merged. Declaration public CompositeRange<T> Merge() Returns Type Description CompositeRange <T> Simplified composite range. | Improve this Doc View Source ToString() Returns string representation of the range. Declaration public override string ToString() Returns Type Description System.String The string representation of the range. Overrides System.ValueType.ToString() | Improve this Doc View Source ToString(IFormatProvider) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format string. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String, IFormatProvider) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format string. System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. Implements System.IFormattable.ToString(System.String, System.IFormatProvider) Operators | Improve this Doc View Source Equality(CompositeRange<T>, CompositeRange<T>) Implements the operator ==. Declaration public static bool operator ==(CompositeRange<T> range1, CompositeRange<T> range2) Parameters Type Name Description CompositeRange <T> range1 The range1. CompositeRange <T> range2 The range2. Returns Type Description System.Boolean True , if ranges are equal. | Improve this Doc View Source Inequality(CompositeRange<T>, CompositeRange<T>) Implements the operator !=. Declaration public static bool operator !=(CompositeRange<T> range1, CompositeRange<T> range2) Parameters Type Name Description CompositeRange <T> range1 The range1. CompositeRange <T> range2 The range2. Returns Type Description System.Boolean True , if ranges are not equal. Explicit Interface Implementations | Improve this Doc View Source ICompositeRange<T>.GetMergedRanges() Returns a sequence of merged subranges. Should be used for operations over the ranges. Declaration IEnumerable<Range<T>> ICompositeRange<T>.GetMergedRanges() Returns Type Description System.Collections.Generic.IEnumerable < Range <T>> A sequence of merged subranges Implements ICompositeRange<T>.GetMergedRanges() Extension Methods NullableHelper.AsNullable<T>(T) CompositeRangeExtensions.WithKeys<T, TKey2>(CompositeRange<T>, TKey2) CompositeRangeExtensions.GetComplementation<T>(CompositeRange<T>) CompositeRangeExtensions.MakeInclusive<T>(CompositeRange<T>, Func<T, T>, Func<T, T>) CompositeRangeExtensions.MakeExclusive<T>(CompositeRange<T>, Func<T, T>, Func<T, T>) CompositeRangeExtensions.WithValues<T, T2>(CompositeRange<T>, Func<T, T2>) CompositeRangeExtensions.WithValues<T, T2>(CompositeRange<T>, Func<T, T2>, Func<T, T2>) CompositeRangeExtensions.GetIntersections<T>(CompositeRange<T>) CompositeRangeExtensions.GetIntersection<T>(CompositeRange<T>, T) CompositeRangeExtensions.GetIntersection<T>(CompositeRange<T>, T, T) CompositeRangeExtensions.GetIntersection<T>(CompositeRange<T>, Range<T>) CompositeRangeExtensions.GetIntersection<T, TKey2>(CompositeRange<T>, Range<T, TKey2>) CompositeRangeExtensions.Contains<T>(CompositeRange<T>, T) CompositeRangeExtensions.Contains<T>(CompositeRange<T>, RangeBoundaryFrom<T>) CompositeRangeExtensions.Contains<T>(CompositeRange<T>, RangeBoundaryTo<T>) CompositeRangeExtensions.Contains<T>(CompositeRange<T>, T, T) CompositeRangeExtensions.Contains<T>(CompositeRange<T>, Range<T>) CompositeRangeExtensions.Contains<T, TKey2>(CompositeRange<T>, Range<T, TKey2>) CompositeRangeExtensions.Contains<T, TCompositeRange>(CompositeRange<T>, TCompositeRange) CompositeRangeExtensions.HasIntersection<T>(CompositeRange<T>, T, T) CompositeRangeExtensions.HasIntersection<T>(CompositeRange<T>, Range<T>) CompositeRangeExtensions.HasIntersection<T, TKey2>(CompositeRange<T>, Range<T, TKey2>) CompositeRangeExtensions.HasIntersection<T, TCompositeRange>(CompositeRange<T>, TCompositeRange) CompositeRangeExtensions.Union<T>(CompositeRange<T>, Range<T>) CompositeRangeExtensions.Union<T>(CompositeRange<T>, CompositeRange<T>) CompositeRangeExtensions.ExtendFrom<T>(CompositeRange<T>, T) CompositeRangeExtensions.ExtendFrom<T>(CompositeRange<T>, RangeBoundaryFrom<T>) CompositeRangeExtensions.ExtendTo<T>(CompositeRange<T>, T) CompositeRangeExtensions.ExtendTo<T>(CompositeRange<T>, RangeBoundaryTo<T>) CompositeRangeExtensions.Intersect<T>(CompositeRange<T>, T, T) CompositeRangeExtensions.Intersect<T>(CompositeRange<T>, Range<T>) CompositeRangeExtensions.Intersect<T, TKey2>(CompositeRange<T>, Range<T, TKey2>) CompositeRangeExtensions.Intersect<T, TCompositeRange>(CompositeRange<T>, TCompositeRange) CompositeRangeExtensions.TrimFrom<T>(CompositeRange<T>, T) CompositeRangeExtensions.TrimFrom<T>(CompositeRange<T>, RangeBoundaryFrom<T>) CompositeRangeExtensions.TrimTo<T>(CompositeRange<T>, T) CompositeRangeExtensions.TrimTo<T>(CompositeRange<T>, RangeBoundaryTo<T>) CompositeRangeExtensions.Except<T>(CompositeRange<T>, T, T) CompositeRangeExtensions.Except<T>(CompositeRange<T>, Range<T>) CompositeRangeExtensions.Except<T, TKey2>(CompositeRange<T>, Range<T, TKey2>) CompositeRangeExtensions.Except<T, TCompositeRange>(CompositeRange<T>, TCompositeRange) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.ToInvariantString<T>(T) StringExtensions.ToInvariantString<T>(T, String)"
  },
  "api/main/CodeJam.IOption-1.html": {
    "href": "api/main/CodeJam.IOption-1.html",
    "title": "Interface IOption<T> | CodeJam",
    "keywords": "Interface IOption<T> Option<T> and ValueOption<T> common interface. Namespace : CodeJam Assembly : CodeJam.dll Syntax public interface IOption<out T> Type Parameters Name Description T Type of optional value Properties | Improve this Doc View Source HasValue Gets a value indicating whether the current object has a value. Declaration bool HasValue { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Value Gets the value of the current object. Declaration T Value { get; } Property Value Type Description T Extension Methods Option.Do<T>(IOption<T>, Action<IOption<T>>, Action) Option.GetValueOrDefault<T, TResult>(IOption<T>, Func<IOption<T>, TResult>, Func<TResult>) Option.GetValueOrDefault<T>(IOption<T>, T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.IOneOf-8.html": {
    "href": "api/main/CodeJam.IOneOf-8.html",
    "title": "Interface IOneOf<T1, T2, T3, T4, T5, T6, T7, T8> | CodeJam",
    "keywords": "Interface IOneOf<T1, T2, T3, T4, T5, T6, T7, T8> Common interface for OneOf<T1, T2, T3, T4, T5, T6, T7, T8> and ValueOneOf<T1, T2, T3, T4, T5, T6, T7, T8> . Namespace : CodeJam Assembly : CodeJam.dll Syntax public interface IOneOf<T1, T2, T3, T4, T5, T6, T7, T8> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 T5 Type of case 5 T6 Type of case 6 T7 Type of case 7 T8 Type of case 8 Properties | Improve this Doc View Source IsCase1 Returns true if class contains value of type T1 . Declaration bool IsCase1 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase2 Returns true if class contains value of type T2 . Declaration bool IsCase2 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase3 Returns true if class contains value of type T3 . Declaration bool IsCase3 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase4 Returns true if class contains value of type T4 . Declaration bool IsCase4 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase5 Returns true if class contains value of type T5 . Declaration bool IsCase5 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase6 Returns true if class contains value of type T6 . Declaration bool IsCase6 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase7 Returns true if class contains value of type T7 . Declaration bool IsCase7 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase8 Returns true if class contains value of type T8 . Declaration bool IsCase8 { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>, Action<T8>) Calls action for actual type argument. Declaration void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action, Action<T5> case5Action, Action<T6> case6Action, Action<T7> case7Action, Action<T8> case8Action) Parameters Type Name Description System.Action <T1> case1Action Action for T1 System.Action <T2> case2Action Action for T2 System.Action <T3> case3Action Action for T3 System.Action <T4> case4Action Action for T4 System.Action <T5> case5Action Action for T5 System.Action <T6> case6Action Action for T6 System.Action <T7> case7Action Action for T7 System.Action <T8> case8Action Action for T8 | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>, Func<T7, TResult>, Func<T8, TResult>) Calls func for actual type argument and returns calculated value. Declaration TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector, Func<T5, TResult> case5Selector, Func<T6, TResult> case6Selector, Func<T7, TResult> case7Selector, Func<T8, TResult> case8Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector Calculation function for T1 System.Func <T2, TResult> case2Selector Calculation function for T2 System.Func <T3, TResult> case3Selector Calculation function for T3 System.Func <T4, TResult> case4Selector Calculation function for T4 System.Func <T5, TResult> case5Selector Calculation function for T5 System.Func <T6, TResult> case6Selector Calculation function for T6 System.Func <T7, TResult> case7Selector Calculation function for T7 System.Func <T8, TResult> case8Selector Calculation function for T8 Returns Type Description TResult Calculated value. Type Parameters Name Description TResult Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.IO.DebugIoCode.html": {
    "href": "api/main/CodeJam.IO.DebugIoCode.html",
    "title": "Class DebugIoCode | CodeJam",
    "keywords": "Class DebugIoCode IO assertions class. Inheritance System.Object DebugIoCode Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.IO Assembly : CodeJam.dll Syntax public static class DebugIoCode Methods | Improve this Doc View Source DirectoryExists(String, String) Asserts that specified directory does exist. Declaration [Conditional(\"DEBUG\")] public static void DirectoryExists(string directoryPath, string argName) Parameters Type Name Description System.String directoryPath Path to the directory. System.String argName Name of the argument. | Improve this Doc View Source FileExists(String, String) Asserts that specified file does exist. Declaration [Conditional(\"DEBUG\")] public static void FileExists(string filePath, string argName) Parameters Type Name Description System.String filePath Path to the file. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedAbsolutePath(String, String) Asserts that specified path is well-formed full path. Declaration [Conditional(\"DEBUG\")] public static void IsWellFormedAbsolutePath(string path, string argName) Parameters Type Name Description System.String path The path. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedContainerPath(String, String) Asserts that specified path is well formed and ends with directory or volume separator chars. Declaration [Conditional(\"DEBUG\")] public static void IsWellFormedContainerPath(string path, string argName) Parameters Type Name Description System.String path The path. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedPath(String, String) Asserts that specified path is either absolute or relative not rooted path. Declaration [Conditional(\"DEBUG\")] public static void IsWellFormedPath(string path, string argName) Parameters Type Name Description System.String path The path. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedRelativePath(String, String) Asserts that specified path is well-formed full path. Declaration [Conditional(\"DEBUG\")] public static void IsWellFormedRelativePath(string path, string argName) Parameters Type Name Description System.String path The path. System.String argName Name of the argument. | Improve this Doc View Source IsWellFormedSimpleName(String, String) Asserts that specified path is well-formed simple name. Declaration [Conditional(\"DEBUG\")] public static void IsWellFormedSimpleName(string path, string argName) Parameters Type Name Description System.String path The path. System.String argName Name of the argument. | Improve this Doc View Source PathIsFree(String) Asserts that specified path is not a path to existent file or a directory. Declaration [Conditional(\"DEBUG\")] public static void PathIsFree(string path) Parameters Type Name Description System.String path The path."
  },
  "api/main/CodeJam.HGlobalScope.html": {
    "href": "api/main/CodeJam.HGlobalScope.html",
    "title": "Class HGlobalScope | CodeJam",
    "keywords": "Class HGlobalScope Wraps System.Runtime.InteropServices.Marshal.AllocHGlobal(System.IntPtr) and System.Runtime.InteropServices.Marshal.FreeHGlobal(System.IntPtr) . Inheritance System.Object System.Runtime.ConstrainedExecution.CriticalFinalizerObject HGlobalScope HGlobalScope<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax [SecurityCritical] public class HGlobalScope : CriticalFinalizerObject, IDisposable Properties | Improve this Doc View Source Data Pointer to data. Declaration public IntPtr Data { get; } Property Value Type Description System.IntPtr | Improve this Doc View Source Length Length Declaration public int Length { get; } Property Value Type Description System.Int32 Methods | Improve this Doc View Source Dispose() Dispose method to free all resources. Declaration public void Dispose() Implements System.IDisposable.Dispose() | Improve this Doc View Source Finalize() Finalizer. Declaration protected void Finalize() Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Disposable.html": {
    "href": "api/main/CodeJam.Disposable.html",
    "title": "Class Disposable | CodeJam",
    "keywords": "Class Disposable Helper methods for System.IDisposable Inheritance System.Object Disposable Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class Disposable Fields | Improve this Doc View Source Empty System.IDisposable instance without any code in System.IDisposable.Dispose() . Declaration public static readonly Disposable.EmptyDisposable Empty Field Value Type Description Disposable.EmptyDisposable Methods | Improve this Doc View Source Create(Action) Creates System.IDisposable instance that calls disposeAction on disposing. Declaration public static IDisposable Create(Action disposeAction) Parameters Type Name Description System.Action disposeAction The dispose action. Returns Type Description System.IDisposable Instance of System.IDisposable that calls disposeAction on disposing. | Improve this Doc View Source Merge(IEnumerable<IDisposable>) Combine multiple System.IDisposable instances into single one. Declaration public static IDisposable Merge(this IEnumerable<IDisposable> disposables) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.IDisposable > disposables The disposables. Returns Type Description System.IDisposable Instance of System.IDisposable that will dispose the specified disposables. | Improve this Doc View Source Merge(IDisposable[]) Combine multiple System.IDisposable instances into single one. Declaration public static IDisposable Merge(params IDisposable[] disposables) Parameters Type Name Description System.IDisposable [] disposables The disposables. Returns Type Description System.IDisposable Instance of System.IDisposable that will dispose the specified disposables."
  },
  "api/main/CodeJam.Disposable.EmptyDisposable.html": {
    "href": "api/main/CodeJam.Disposable.EmptyDisposable.html",
    "title": "Struct Disposable.EmptyDisposable | CodeJam",
    "keywords": "Struct Disposable.EmptyDisposable The System.IDisposable implementation with no action on Dispose() Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam Assembly : CodeJam.dll Syntax public struct EmptyDisposable : IDisposable Methods | Improve this Doc View Source Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. Declaration public void Dispose() Implements System.IDisposable.Dispose() Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Dates.DateTimeRangeExtensions.html": {
    "href": "api/main/CodeJam.Dates.DateTimeRangeExtensions.html",
    "title": "Class DateTimeRangeExtensions | CodeJam",
    "keywords": "Class DateTimeRangeExtensions Helper methods for date manipulations Inheritance System.Object DateTimeRangeExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Dates Assembly : CodeJam.dll Syntax public static class DateTimeRangeExtensions Methods | Improve this Doc View Source CountOfDays(Range<DateTime>) Returns count of days between two dates. Declaration public static int CountOfDays(this Range<DateTime> range) Parameters Type Name Description Range < System.DateTime > range The date range. Returns Type Description System.Int32 Count of days between two dates. | Improve this Doc View Source CountOfDays(Range<DateTimeOffset>) Returns count of days between two dates. Declaration public static int CountOfDays(this Range<DateTimeOffset> range) Parameters Type Name Description Range < System.DateTimeOffset > range The date range. Returns Type Description System.Int32 Count of days between two dates. | Improve this Doc View Source CountOfMonths(Range<DateTime>) Returns count of month between two dates. Declaration public static int CountOfMonths(this Range<DateTime> range) Parameters Type Name Description Range < System.DateTime > range The date range. Returns Type Description System.Int32 Count of month between two dates. | Improve this Doc View Source CountOfMonths(Range<DateTimeOffset>) Returns count of month between two dates. Declaration public static int CountOfMonths(this Range<DateTimeOffset> range) Parameters Type Name Description Range < System.DateTimeOffset > range The date range. Returns Type Description System.Int32 Count of month between two dates. | Improve this Doc View Source DaysBetween(Range<DateTime>) Returns first days in range. Declaration public static IEnumerable<DateTime> DaysBetween(this Range<DateTime> range) Parameters Type Name Description Range < System.DateTime > range The date range. Returns Type Description System.Collections.Generic.IEnumerable < System.DateTime > First days of months in range | Improve this Doc View Source DaysBetween(Range<DateTimeOffset>) Returns first days in range. Declaration public static IEnumerable<DateTimeOffset> DaysBetween(this Range<DateTimeOffset> range) Parameters Type Name Description Range < System.DateTimeOffset > range The date range. Returns Type Description System.Collections.Generic.IEnumerable < System.DateTimeOffset > First days of months in range | Improve this Doc View Source DifferenceInDays(Range<DateTime>) Returns delta between two dates measured in days. Declaration public static int DifferenceInDays(this Range<DateTime> range) Parameters Type Name Description Range < System.DateTime > range The date range. Returns Type Description System.Int32 Delta between two dates measured in days. | Improve this Doc View Source DifferenceInDays(Range<DateTimeOffset>) Returns delta between two dates measured in days. Declaration public static int DifferenceInDays(this Range<DateTimeOffset> range) Parameters Type Name Description Range < System.DateTimeOffset > range The date range. Returns Type Description System.Int32 Delta between two dates measured in days. | Improve this Doc View Source DifferenceInMonths(Range<DateTime>) Returns delta between two dates measured in months. Declaration public static int DifferenceInMonths(this Range<DateTime> range) Parameters Type Name Description Range < System.DateTime > range The date range. Returns Type Description System.Int32 Delta between two dates measured in months. | Improve this Doc View Source DifferenceInMonths(Range<DateTimeOffset>) Returns delta between two dates measured in months. Declaration public static int DifferenceInMonths(this Range<DateTimeOffset> range) Parameters Type Name Description Range < System.DateTimeOffset > range The date range. Returns Type Description System.Int32 Delta between two dates measured in months. | Improve this Doc View Source GetFromStartOfYearRange(DateTime) Gets date range from start of the year to the current date. Declaration public static Range<DateTime> GetFromStartOfYearRange(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description Range < System.DateTime > Date range. | Improve this Doc View Source GetFromStartOfYearRange(DateTimeOffset) Gets date range from start of the year to the current date. Declaration public static Range<DateTimeOffset> GetFromStartOfYearRange(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description Range < System.DateTimeOffset > Date range. | Improve this Doc View Source GetMonthRange(DateTime) Returns date range for month. Declaration public static Range<DateTime> GetMonthRange(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description Range < System.DateTime > Date range for month | Improve this Doc View Source GetMonthRange(DateTimeOffset) Returns date range for month. Declaration public static Range<DateTimeOffset> GetMonthRange(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description Range < System.DateTimeOffset > Date range for month | Improve this Doc View Source GetToEndOfYearRange(DateTime) Gets date range from start of the year to the current date. Declaration public static Range<DateTime> GetToEndOfYearRange(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description Range < System.DateTime > Date range. | Improve this Doc View Source GetToEndOfYearRange(DateTimeOffset) Gets date range from start of the year to the current date. Declaration public static Range<DateTimeOffset> GetToEndOfYearRange(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description Range < System.DateTimeOffset > Date range. | Improve this Doc View Source GetYearRange(DateTime) Returns date range for year. Declaration public static Range<DateTime> GetYearRange(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description Range < System.DateTime > Date range for year | Improve this Doc View Source GetYearRange(DateTimeOffset) Returns date range for year. Declaration public static Range<DateTimeOffset> GetYearRange(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description Range < System.DateTimeOffset > Date range for year | Improve this Doc View Source MakeExclusive(Range<DateTime>) Replaces inclusive boundaries with exclusive ones. Declaration public static Range<DateTime> MakeExclusive(this Range<DateTime> range) Parameters Type Name Description Range < System.DateTime > range The date range. Returns Type Description Range < System.DateTime > A range with inclusive boundaries. | Improve this Doc View Source MakeExclusive(Range<DateTimeOffset>) Replaces inclusive boundaries with exclusive ones. Declaration public static Range<DateTimeOffset> MakeExclusive(this Range<DateTimeOffset> range) Parameters Type Name Description Range < System.DateTimeOffset > range The date range. Returns Type Description Range < System.DateTimeOffset > A range with inclusive boundaries. | Improve this Doc View Source MakeInclusive(Range<DateTime>) Replaces exclusive boundaries with inclusive ones. Declaration public static Range<DateTime> MakeInclusive(this Range<DateTime> range) Parameters Type Name Description Range < System.DateTime > range The date range. Returns Type Description Range < System.DateTime > A range with inclusive boundaries. | Improve this Doc View Source MakeInclusive(Range<DateTimeOffset>) Replaces exclusive boundaries with inclusive ones. Declaration public static Range<DateTimeOffset> MakeInclusive(this Range<DateTimeOffset> range) Parameters Type Name Description Range < System.DateTimeOffset > range The date range. Returns Type Description Range < System.DateTimeOffset > A range with inclusive boundaries. | Improve this Doc View Source MonthsBetween(Range<DateTime>) Returns first days of months in range. Declaration public static IEnumerable<DateTime> MonthsBetween(this Range<DateTime> range) Parameters Type Name Description Range < System.DateTime > range The date range. Returns Type Description System.Collections.Generic.IEnumerable < System.DateTime > First days of months in range | Improve this Doc View Source MonthsBetween(Range<DateTimeOffset>) Returns first days of months in range. Declaration public static IEnumerable<DateTimeOffset> MonthsBetween(this Range<DateTimeOffset> range) Parameters Type Name Description Range < System.DateTimeOffset > range The date range. Returns Type Description System.Collections.Generic.IEnumerable < System.DateTimeOffset > First days of months in range | Improve this Doc View Source SplitByMonths(Range<DateTime>) Splits the range by months. Declaration public static IEnumerable<Range<DateTime>> SplitByMonths(this Range<DateTime> range) Parameters Type Name Description Range < System.DateTime > range The date range. Returns Type Description System.Collections.Generic.IEnumerable < Range < System.DateTime >> Ranges splitted by first day of months in range. | Improve this Doc View Source SplitByMonths(Range<DateTimeOffset>) Splits the range by months. Declaration public static IEnumerable<Range<DateTimeOffset>> SplitByMonths(this Range<DateTimeOffset> range) Parameters Type Name Description Range < System.DateTimeOffset > range The date range. Returns Type Description System.Collections.Generic.IEnumerable < Range < System.DateTimeOffset >> Ranges splitted by first day of months in range. | Improve this Doc View Source SplitByYears(Range<DateTime>) Splits the range by years. Declaration public static IEnumerable<Range<DateTime>> SplitByYears(this Range<DateTime> range) Parameters Type Name Description Range < System.DateTime > range The date range. Returns Type Description System.Collections.Generic.IEnumerable < Range < System.DateTime >> Ranges splitted by first day of years in range. | Improve this Doc View Source SplitByYears(Range<DateTimeOffset>) Splits the range by years. Declaration public static IEnumerable<Range<DateTimeOffset>> SplitByYears(this Range<DateTimeOffset> range) Parameters Type Name Description Range < System.DateTimeOffset > range The date range. Returns Type Description System.Collections.Generic.IEnumerable < Range < System.DateTimeOffset >> Ranges splitted by first day of years in range. | Improve this Doc View Source YearsBetween(Range<DateTime>) Returns first days of years in range. Declaration public static IEnumerable<DateTime> YearsBetween(this Range<DateTime> range) Parameters Type Name Description Range < System.DateTime > range The date range. Returns Type Description System.Collections.Generic.IEnumerable < System.DateTime > First days of years in range | Improve this Doc View Source YearsBetween(Range<DateTimeOffset>) Returns first days of years in range. Declaration public static IEnumerable<DateTimeOffset> YearsBetween(this Range<DateTimeOffset> range) Parameters Type Name Description Range < System.DateTimeOffset > range The date range. Returns Type Description System.Collections.Generic.IEnumerable < System.DateTimeOffset > First days of years in range"
  },
  "api/main/CodeJam.Collections.KeyEqualityComparer.html": {
    "href": "api/main/CodeJam.Collections.KeyEqualityComparer.html",
    "title": "Class KeyEqualityComparer | CodeJam",
    "keywords": "Class KeyEqualityComparer Provides static methods for creating KeyEqualityComparer<T, TKey> . Inheritance System.Object KeyEqualityComparer Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public static class KeyEqualityComparer Methods | Improve this Doc View Source Create<T, TKey>(Func<T, TKey>) Creates a KeyEqualityComparer<T, TKey> . Declaration public static KeyEqualityComparer<T, TKey> Create<T, TKey>(Func<T, TKey> keySelector) Parameters Type Name Description System.Func <T, TKey> keySelector The function to extract the key for each element. Returns Type Description KeyEqualityComparer <T, TKey> A KeyEqualityComparer<T, TKey> . Type Parameters Name Description T The type of the comparing elements. TKey The type of the key. | Improve this Doc View Source Create<T, TKey>(Func<T, TKey>, IEqualityComparer<TKey>) Creates a KeyEqualityComparer<T, TKey> . Declaration public static KeyEqualityComparer<T, TKey> Create<T, TKey>(Func<T, TKey> keySelector, IEqualityComparer<TKey> comparer) Parameters Type Name Description System.Func <T, TKey> keySelector The function to extract the key for each element. System.Collections.Generic.IEqualityComparer <TKey> comparer The equality comparer to use to compare the keys. Returns Type Description KeyEqualityComparer <T, TKey> A KeyEqualityComparer<T, TKey> . Type Parameters Name Description T The type of the comparing elements. TKey The type of the key."
  },
  "api/main/CodeJam.Collections.ComparerBuilder-1.html": {
    "href": "api/main/CodeJam.Collections.ComparerBuilder-1.html",
    "title": "Class ComparerBuilder<T> | CodeJam",
    "keywords": "Class ComparerBuilder<T> Builds comparer functions and comparers. Inheritance System.Object ComparerBuilder<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public static class ComparerBuilder<T> Type Parameters Name Description T The type of objects to compare. Methods | Improve this Doc View Source GetEqualityComparer() Returns implementations of the System.Collections.Generic.IEqualityComparer<T> generic interface based on object public members equality. Declaration public static IEqualityComparer<T> GetEqualityComparer() Returns Type Description System.Collections.Generic.IEqualityComparer <T> Instance of System.Collections.Generic.IEqualityComparer<T> . | Improve this Doc View Source GetEqualityComparer(Func<TypeAccessor<T>, IEnumerable<MemberAccessor>>) Returns implementations of the System.Collections.Generic.IEqualityComparer<T> generic interface based on provided object public members equality. Declaration public static IEqualityComparer<T> GetEqualityComparer(Func<TypeAccessor<T>, IEnumerable<MemberAccessor>> membersToCompare) Parameters Type Name Description System.Func < TypeAccessor <T>, System.Collections.Generic.IEnumerable < MemberAccessor >> membersToCompare A function that returns members to compare. Returns Type Description System.Collections.Generic.IEqualityComparer <T> Instance of System.Collections.Generic.IEqualityComparer<T> . | Improve this Doc View Source GetEqualityComparer(Expression<Func<T, Object>>[]) Returns implementations of the System.Collections.Generic.IEqualityComparer<T> generic interface based on provided object public members equality. Declaration public static IEqualityComparer<T> GetEqualityComparer(params Expression<Func<T, object>>[] membersToCompare) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >>[] membersToCompare Members to compare. Returns Type Description System.Collections.Generic.IEqualityComparer <T> Instance of System.Collections.Generic.IEqualityComparer<T> . | Improve this Doc View Source GetEqualsFunc() Returns GetEqualsFunc function for type T to compare. Declaration public static Func<T, T, bool> GetEqualsFunc() Returns Type Description System.Func <T, T, System.Boolean > GetEqualsFunc function. | Improve this Doc View Source GetEqualsFunc(IEnumerable<MemberAccessor>) Returns GetEqualsFunc function for provided members for type T to compare. Declaration public static Func<T, T, bool> GetEqualsFunc(IEnumerable<MemberAccessor> members) Parameters Type Name Description System.Collections.Generic.IEnumerable < MemberAccessor > members Members to compare. Returns Type Description System.Func <T, T, System.Boolean > GetEqualsFunc function. | Improve this Doc View Source GetEqualsFunc(Expression<Func<T, Object>>[]) Returns GetEqualsFunc function for provided members for type T to compare. Declaration public static Func<T, T, bool> GetEqualsFunc(params Expression<Func<T, object>>[] members) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >>[] members Members to compare. Returns Type Description System.Func <T, T, System.Boolean > GetEqualsFunc function. | Improve this Doc View Source GetGetHashCodeFunc() Returns GetHashCode function for type T to compare. Declaration public static Func<T, int> GetGetHashCodeFunc() Returns Type Description System.Func <T, System.Int32 > GetHashCode function. | Improve this Doc View Source GetGetHashCodeFunc(IEnumerable<MemberAccessor>) Returns GetHashCode function for provided members for type T to compare. Declaration public static Func<T, int> GetGetHashCodeFunc(IEnumerable<MemberAccessor> members) Parameters Type Name Description System.Collections.Generic.IEnumerable < MemberAccessor > members Members to compare. Returns Type Description System.Func <T, System.Int32 > GetHashCode function. | Improve this Doc View Source GetGetHashCodeFunc(Expression<Func<T, Object>>[]) Returns GetHashCode function for provided members for type T to compare. Declaration public static Func<T, int> GetGetHashCodeFunc(params Expression<Func<T, object>>[] members) Parameters Type Name Description System.Linq.Expressions.Expression < System.Func <T, System.Object >>[] members Members to compare. Returns Type Description System.Func <T, System.Int32 > GetHashCode function."
  },
  "api/main/CodeJam.Xml.XNodeExtensions.html": {
    "href": "api/main/CodeJam.Xml.XNodeExtensions.html",
    "title": "Class XNodeExtensions | CodeJam",
    "keywords": "Class XNodeExtensions Extensions for XLinq. Inheritance System.Object XNodeExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Xml Assembly : CodeJam.dll Syntax public static class XNodeExtensions Methods | Improve this Doc View Source AttributeValueOrDefault(XElement, XName, String) Returns string value of optional attribute. Declaration public static string AttributeValueOrDefault(this XElement element, XName attrName, string defaultValue) Parameters Type Name Description System.Xml.Linq.XElement element Element with attribute System.Xml.Linq.XName attrName Attribute name. System.String defaultValue Default value. Returns Type Description System.String Parsed value or defaultValue if attribute does not exist. Exceptions Type Condition System.ArgumentNullException element or attrName is null. | Improve this Doc View Source AttributeValueOrDefault<T>(XElement, XName, Func<String, T>, T) Returns value of optional attribute. Declaration public static T AttributeValueOrDefault<T>(this XElement element, XName attrName, Func<string, T> parser, T defaultValue) Parameters Type Name Description System.Xml.Linq.XElement element Element with attribute System.Xml.Linq.XName attrName Attribute name. System.Func < System.String , T> parser Value parser T defaultValue Default value. Returns Type Description T Parsed value or defaultValue if attribute not exists. Type Parameters Name Description T Type of value Exceptions Type Condition System.ArgumentNullException element or attrName or parser is null. | Improve this Doc View Source ElementAltValueOrDefault<T>(XElement, Func<XElement, T>, T, XName[]) Returns value of optional element. Declaration public static T ElementAltValueOrDefault<T>(this XElement parent, Func<XElement, T> valueSelector, T defaultValue, params XName[] names) Parameters Type Name Description System.Xml.Linq.XElement parent Parent element. System.Func < System.Xml.Linq.XElement , T> valueSelector Function to select element value T defaultValue Default value. System.Xml.Linq.XName [] names Array of possible element names. Returns Type Description T Selected element value or defaultValue if element does not exist. Type Parameters Name Description T Type of value Exceptions Type Condition System.ArgumentNullException parent or valueSelector or names is null. | Improve this Doc View Source ElementValueOrDefault(XElement, XName, String) Returns string value of optional element. Declaration public static string ElementValueOrDefault(this XElement parent, XName name, string defaultValue) Parameters Type Name Description System.Xml.Linq.XElement parent Parent element. System.Xml.Linq.XName name Element name. System.String defaultValue Default value. Returns Type Description System.String Selected element value or defaultValue if element does not exist Exceptions Type Condition System.ArgumentNullException parent or name is null. | Improve this Doc View Source ElementValueOrDefault<T>(XElement, XName, Func<String, T>, T) Returns value of optional element. Declaration public static T ElementValueOrDefault<T>(this XElement parent, XName name, Func<string, T> valueSelector, T defaultValue) Parameters Type Name Description System.Xml.Linq.XElement parent Parent element. System.Xml.Linq.XName name Element name. System.Func < System.String , T> valueSelector Function to parse element value T defaultValue Default value. Returns Type Description T Selected element value or defaultValue if element does not exist Type Parameters Name Description T Exceptions Type Condition System.ArgumentNullException parent or name or valueSelector is null. | Improve this Doc View Source ElementValueOrDefault<T>(XElement, XName, Func<XElement, T>, T) Returns value of optional element. Declaration public static T ElementValueOrDefault<T>(this XElement parent, XName name, Func<XElement, T> valueSelector, T defaultValue) Parameters Type Name Description System.Xml.Linq.XElement parent Parent element. System.Xml.Linq.XName name Element name. System.Func < System.Xml.Linq.XElement , T> valueSelector Function to select element value T defaultValue Default value. Returns Type Description T Selected element value or defaultValue if element does not exist Type Parameters Name Description T Type of value Exceptions Type Condition System.ArgumentNullException parent or valueSelector is null. | Improve this Doc View Source RequiredAttribute(XElement, XName) Returns attribute with name name , or throws an exception if attribute does not exists. Declaration public static XAttribute RequiredAttribute(this XElement element, XName name) Parameters Type Name Description System.Xml.Linq.XElement element The System.Xml.Linq.XElement . System.Xml.Linq.XName name Name of the attribute. Returns Type Description System.Xml.Linq.XAttribute Attribute with specified name. Exceptions Type Condition System.ArgumentNullException element or name is null. System.Xml.XmlException Attribute with specified name not found. | Improve this Doc View Source RequiredElement(XElement, XName) Returns child element with name name , or throws an exception if element does not exists. Declaration public static XElement RequiredElement(this XElement parent, XName name) Parameters Type Name Description System.Xml.Linq.XElement parent Parent element. System.Xml.Linq.XName name Name of the element. Returns Type Description System.Xml.Linq.XElement First element with specified name. Exceptions Type Condition System.ArgumentNullException parent or name is null. System.Xml.XmlException Element with specified name does not exists. | Improve this Doc View Source RequiredElement(XElement, XName[]) Returns child element with one of names in names , or throws an exception if element does not exists. Declaration public static XElement RequiredElement(this XElement parent, params XName[] names) Parameters Type Name Description System.Xml.Linq.XElement parent Parent element. System.Xml.Linq.XName [] names Possible names of the element. Returns Type Description System.Xml.Linq.XElement First element that match one of specified names. Exceptions Type Condition System.ArgumentNullException parent or names is null. System.Xml.XmlException Element with one of specified names does not exists. | Improve this Doc View Source RequiredRoot(XDocument) Returns document root, or throw an exception, if root is null. Declaration public static XElement RequiredRoot(this XDocument document) Parameters Type Name Description System.Xml.Linq.XDocument document The document. Returns Type Description System.Xml.Linq.XElement Document root Exceptions Type Condition System.ArgumentNullException document is null System.Xml.XmlException Document has no root. | Improve this Doc View Source RequiredRoot(XDocument, XName) Returns document root, or throws an exception, if root is null or has another name. Declaration public static XElement RequiredRoot(this XDocument document, XName rootName) Parameters Type Name Description System.Xml.Linq.XDocument document The document. System.Xml.Linq.XName rootName Name of the root tag Returns Type Description System.Xml.Linq.XElement Document root Exceptions Type Condition System.ArgumentNullException document is null System.Xml.XmlException Document has no root with specified name."
  },
  "api/main/CodeJam.Threading.html": {
    "href": "api/main/CodeJam.Threading.html",
    "title": "Namespace CodeJam.Threading | CodeJam",
    "keywords": "Namespace CodeJam.Threading Classes AsyncLock Lock, that can be used with async/await code. AsyncOperationHelper Extension and utility methods for System.ComponentModel.AsyncOperationManager and System.ComponentModel.AsyncOperation ConcurrentLazyDictionary<TKey, TValue> Dictionary with lazy values initialization. ExecSyncConcurrentLazyDictionary<TKey, TValue> Dictionary with lazy values initialization. InterlockedOperations Provides a helper class for initializing a values in a thread-safe manner. ParallelExtensions Parallel extensions. ReaderWriterLockSlimExtensions Represents the extension methods for System.Threading.ReaderWriterLockSlim . TaskHelper Helper methods for System.Threading.Tasks.Task and System.Threading.Tasks.Task<TResult> ."
  },
  "api/main/CodeJam.Threading.TaskHelper.html": {
    "href": "api/main/CodeJam.Threading.TaskHelper.html",
    "title": "Class TaskHelper | CodeJam",
    "keywords": "Class TaskHelper Helper methods for System.Threading.Tasks.Task and System.Threading.Tasks.Task<TResult> . Inheritance System.Object TaskHelper Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Threading Assembly : CodeJam.dll Syntax public static class TaskHelper Methods | Improve this Doc View Source WaitAll(IEnumerable<Task>) Waits for all of the provided System.Threading.Tasks.Task objects to complete execution. Declaration public static void WaitAll(this IEnumerable<Task> tasks) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Threading.Tasks.Task > tasks System.Threading.Tasks.Task instances on which to wait. | Improve this Doc View Source WaitAll(IEnumerable<Task>, Int32) Waits for all of the provided System.Threading.Tasks.Task objects to complete execution within a specified number of milliseconds or until the wait is cancelled. Declaration public static bool WaitAll(this IEnumerable<Task> tasks, int timeout) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Threading.Tasks.Task > tasks System.Threading.Tasks.Task instances on which to wait. System.Int32 timeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. Returns Type Description System.Boolean true if all of the System.Threading.Tasks.Task instances completed execution within the allotted time; otherwise, false . | Improve this Doc View Source WaitAll(IEnumerable<Task>, Int32, CancellationToken) Waits for all of the provided System.Threading.Tasks.Task objects to complete execution within a specified number of milliseconds or until the wait is cancelled. Declaration public static bool WaitAll(this IEnumerable<Task> tasks, int timeout, CancellationToken cancellation) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Threading.Tasks.Task > tasks System.Threading.Tasks.Task instances on which to wait. System.Int32 timeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. System.Threading.CancellationToken cancellation A System.Threading.CancellationToken to observe while waiting for the tasks to complete. Returns Type Description System.Boolean true if all of the System.Threading.Tasks.Task instances completed execution within the allotted time; otherwise, false . | Improve this Doc View Source WaitAll(IEnumerable<Task>, CancellationToken) Waits for all of the provided System.Threading.Tasks.Task objects to complete execution within a specified number of milliseconds or until the wait is cancelled. Declaration public static void WaitAll(this IEnumerable<Task> tasks, CancellationToken cancellation) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Threading.Tasks.Task > tasks System.Threading.Tasks.Task instances on which to wait. System.Threading.CancellationToken cancellation A System.Threading.CancellationToken to observe while waiting for the tasks to complete. | Improve this Doc View Source WaitAll(IEnumerable<Task>, TimeSpan) Waits for all of the provided System.Threading.Tasks.Task objects to complete execution within a specified System.TimeSpan or until the wait is cancelled. Declaration public static bool WaitAll(this IEnumerable<Task> tasks, TimeSpan timeout) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Threading.Tasks.Task > tasks System.Threading.Tasks.Task instances on which to wait. System.TimeSpan timeout A System.TimeSpan to wait, or System.TimeSpan that represents -1 milliseconds to wait indefinitely. Returns Type Description System.Boolean true if all of the System.Threading.Tasks.Task instances completed execution within the allotted time; otherwise, false . | Improve this Doc View Source WaitAll(IEnumerable<Task>, TimeSpan, CancellationToken) Waits for all of the provided System.Threading.Tasks.Task objects to complete execution within a specified System.TimeSpan or until the wait is cancelled. Declaration public static bool WaitAll(this IEnumerable<Task> tasks, TimeSpan timeout, CancellationToken cancellation) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Threading.Tasks.Task > tasks System.Threading.Tasks.Task instances on which to wait. System.TimeSpan timeout A System.TimeSpan to wait, or System.TimeSpan that represents -1 milliseconds to wait indefinitely. System.Threading.CancellationToken cancellation A System.Threading.CancellationToken to observe while waiting for the tasks to complete. Returns Type Description System.Boolean true if all of the System.Threading.Tasks.Task instances completed execution within the allotted time; otherwise, false . | Improve this Doc View Source WaitAll(Task[]) Waits for all of the provided System.Threading.Tasks.Task objects to complete execution. Declaration public static void WaitAll(this Task[] tasks) Parameters Type Name Description System.Threading.Tasks.Task [] tasks System.Threading.Tasks.Task instances on which to wait. | Improve this Doc View Source WaitAll(Task[], Int32) Waits for all of the provided System.Threading.Tasks.Task objects to complete execution within a specified number of milliseconds or until the wait is cancelled. Declaration public static bool WaitAll(this Task[] tasks, int timeout) Parameters Type Name Description System.Threading.Tasks.Task [] tasks System.Threading.Tasks.Task instances on which to wait. System.Int32 timeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. Returns Type Description System.Boolean true if all of the System.Threading.Tasks.Task instances completed execution within the allotted time; otherwise, false . | Improve this Doc View Source WaitAll(Task[], Int32, CancellationToken) Waits for all of the provided System.Threading.Tasks.Task objects to complete execution within a specified number of milliseconds or until the wait is cancelled. Declaration public static bool WaitAll(this Task[] tasks, int timeout, CancellationToken cancellation) Parameters Type Name Description System.Threading.Tasks.Task [] tasks System.Threading.Tasks.Task instances on which to wait. System.Int32 timeout The number of milliseconds to wait, or System.Threading.Timeout.Infinite (-1) to wait indefinitely. System.Threading.CancellationToken cancellation A System.Threading.CancellationToken to observe while waiting for the tasks to complete. Returns Type Description System.Boolean true if all of the System.Threading.Tasks.Task instances completed execution within the allotted time; otherwise, false . | Improve this Doc View Source WaitAll(Task[], CancellationToken) Waits for all of the provided System.Threading.Tasks.Task objects to complete execution within a specified number of milliseconds or until the wait is cancelled. Declaration public static void WaitAll(this Task[] tasks, CancellationToken cancellation) Parameters Type Name Description System.Threading.Tasks.Task [] tasks System.Threading.Tasks.Task instances on which to wait. System.Threading.CancellationToken cancellation A System.Threading.CancellationToken to observe while waiting for the tasks to complete. | Improve this Doc View Source WaitAll(Task[], TimeSpan) Waits for all of the provided System.Threading.Tasks.Task objects to complete execution within a specified System.TimeSpan or until the wait is cancelled. Declaration public static bool WaitAll(this Task[] tasks, TimeSpan timeout) Parameters Type Name Description System.Threading.Tasks.Task [] tasks System.Threading.Tasks.Task instances on which to wait. System.TimeSpan timeout A System.TimeSpan to wait, or System.TimeSpan that represents -1 milliseconds to wait indefinitely. Returns Type Description System.Boolean true if all of the System.Threading.Tasks.Task instances completed execution within the allotted time; otherwise, false . | Improve this Doc View Source WaitAll(Task[], TimeSpan, CancellationToken) Waits for all of the provided System.Threading.Tasks.Task objects to complete execution within a specified System.TimeSpan or until the wait is cancelled. Declaration public static bool WaitAll(this Task[] tasks, TimeSpan timeout, CancellationToken cancellation) Parameters Type Name Description System.Threading.Tasks.Task [] tasks System.Threading.Tasks.Task instances on which to wait. System.TimeSpan timeout A System.TimeSpan to wait, or System.TimeSpan that represents -1 milliseconds to wait indefinitely. System.Threading.CancellationToken cancellation A System.Threading.CancellationToken to observe while waiting for the tasks to complete. Returns Type Description System.Boolean true if all of the System.Threading.Tasks.Task instances completed execution within the allotted time; otherwise, false . | Improve this Doc View Source WhenAll(IEnumerable<Task>) Creates a task that will complete when all of the System.Threading.Tasks.Task objects in an enumerable collection have completed. Declaration public static Task WhenAll(this IEnumerable<Task> tasks) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Threading.Tasks.Task > tasks The tasks to wait on for completion. Returns Type Description System.Threading.Tasks.Task A task that represents the completion of all of the supplied tasks. | Improve this Doc View Source WhenAll(Task[]) Creates a task that will complete when all of the System.Threading.Tasks.Task objects in an enumerable collection have completed. Declaration public static Task WhenAll(this Task[] tasks) Parameters Type Name Description System.Threading.Tasks.Task [] tasks The tasks to wait on for completion. Returns Type Description System.Threading.Tasks.Task A task that represents the completion of all of the supplied tasks. | Improve this Doc View Source WhenAll<TResult>(IEnumerable<Task<TResult>>) Creates a task that will complete when all of the System.Threading.Tasks.Task<TResult> objects in an enumerable collection have completed. Declaration public static Task<TResult[]> WhenAll<TResult>(this IEnumerable<Task<TResult>> tasks) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Threading.Tasks.Task <TResult>> tasks The tasks to wait on for completion. Returns Type Description System.Threading.Tasks.Task <TResult[]> A task that represents the completion of all of the supplied tasks. Type Parameters Name Description TResult The type of the completed task. | Improve this Doc View Source WhenAll<TResult>(Task<TResult>[]) Creates a task that will complete when all of the System.Threading.Tasks.Task<TResult> objects in an enumerable collection have completed. Declaration public static Task<TResult[]> WhenAll<TResult>(this Task<TResult>[] tasks) Parameters Type Name Description System.Threading.Tasks.Task <TResult>[] tasks The tasks to wait on for completion. Returns Type Description System.Threading.Tasks.Task <TResult[]> A task that represents the completion of all of the supplied tasks. Type Parameters Name Description TResult The type of the completed task. | Improve this Doc View Source WhenAny(IEnumerable<Task>) Creates a task that will complete when any of the supplied tasks have completed. Declaration public static Task<Task> WhenAny(this IEnumerable<Task> tasks) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Threading.Tasks.Task > tasks The tasks to wait on for completion. Returns Type Description System.Threading.Tasks.Task < System.Threading.Tasks.Task > A task that represents the completion of one of the supplied tasks. The return task's Result is the task that completed. | Improve this Doc View Source WhenAny(Task[]) Creates a task that will complete when any of the supplied tasks have completed. Declaration public static Task<Task> WhenAny(this Task[] tasks) Parameters Type Name Description System.Threading.Tasks.Task [] tasks The tasks to wait on for completion. Returns Type Description System.Threading.Tasks.Task < System.Threading.Tasks.Task > A task that represents the completion of one of the supplied tasks. The return task's Result is the task that completed. | Improve this Doc View Source WhenAny<TResult>(IEnumerable<Task<TResult>>) Creates a task that will complete when any of the supplied tasks have completed. Declaration public static Task<Task<TResult>> WhenAny<TResult>(this IEnumerable<Task<TResult>> tasks) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.Threading.Tasks.Task <TResult>> tasks The tasks to wait on for completion. Returns Type Description System.Threading.Tasks.Task < System.Threading.Tasks.Task <TResult>> A task that represents the completion of one of the supplied tasks. The return task's Result is the task that completed. Type Parameters Name Description TResult The type of the completed task. | Improve this Doc View Source WhenAny<TResult>(Task<TResult>[]) Creates a task that will complete when any of the supplied tasks have completed. Declaration public static Task<Task<TResult>> WhenAny<TResult>(this Task<TResult>[] tasks) Parameters Type Name Description System.Threading.Tasks.Task <TResult>[] tasks The tasks to wait on for completion. Returns Type Description System.Threading.Tasks.Task < System.Threading.Tasks.Task <TResult>> A task that represents the completion of one of the supplied tasks. The return task's Result is the task that completed. Type Parameters Name Description TResult The type of the completed task."
  },
  "api/main/CodeJam.Reflection.TypeAccessor-1.html": {
    "href": "api/main/CodeJam.Reflection.TypeAccessor-1.html",
    "title": "Class TypeAccessor<T> | CodeJam",
    "keywords": "Class TypeAccessor<T> Provides fast access to type and its members. Inheritance System.Object TypeAccessor TypeAccessor<T> Inherited Members TypeAccessor.AddMember(MemberAccessor) TypeAccessor.Members TypeAccessor.Item[String] TypeAccessor.Item[Int32] TypeAccessor.GetAccessor(Type) TypeAccessor.GetAccessor<T>() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Reflection Assembly : CodeJam.dll Syntax public class TypeAccessor<T> : TypeAccessor Type Parameters Name Description T Properties | Improve this Doc View Source CreateInstanceExpression Returns create instance expression. Declaration public static Expression<Func<T>> CreateInstanceExpression { get; } Property Value Type Description System.Linq.Expressions.Expression < System.Func <T>> | Improve this Doc View Source Type Type to access. Declaration public override Type Type { get; } Property Value Type Description System.Type Overrides TypeAccessor.Type Methods | Improve this Doc View Source Create() Creates an instance of TypeAccessor . Declaration public T Create() Returns Type Description T Instance of TypeAccessor . | Improve this Doc View Source CreateInstance() Creates an instance of TypeAccessor . Declaration public override object CreateInstance() Returns Type Description System.Object Instance of TypeAccessor . Overrides TypeAccessor.CreateInstance() | Improve this Doc View Source GetAccessor() Creates an instance of TypeAccessor<T> . Declaration public static TypeAccessor<T> GetAccessor() Returns Type Description TypeAccessor <T> Instance of TypeAccessor<T> . Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Reflection.ReflectionExtensions.html": {
    "href": "api/main/CodeJam.Reflection.ReflectionExtensions.html",
    "title": "Class ReflectionExtensions | CodeJam",
    "keywords": "Class ReflectionExtensions Reflection extension methods. Inheritance System.Object ReflectionExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Reflection Assembly : CodeJam.dll Syntax public static class ReflectionExtensions Methods | Improve this Doc View Source CreateInstance(Type, ParamInfo[]) Creates instance of type with specified parameters . Declaration public static object CreateInstance(this Type type, params ParamInfo[] parameters) Parameters Type Name Description System.Type type Type to create instance. ParamInfo [] parameters Constructor parameters Returns Type Description System.Object Instance of type Exceptions Type Condition System.ArgumentNullException type is null System.ArgumentException No suitable constructors found | Improve this Doc View Source GetDefaultConstructor(Type, Boolean) Returns default constructor. Declaration public static ConstructorInfo GetDefaultConstructor(this Type type, bool exceptionIfNotExists = false) Parameters Type Name Description System.Type type A System.Type instance. System.Boolean exceptionIfNotExists if true, throws an exception if type does not exists default constructor. Otherwise returns null. Returns Type Description System.Reflection.ConstructorInfo Returns System.Reflection.ConstructorInfo or null. | Improve this Doc View Source GetDelegateParams(Type) Returns delegate parameter infos. Declaration public static ParameterInfo[] GetDelegateParams(Type delegateType) Parameters Type Name Description System.Type delegateType Type of delegate Returns Type Description System.Reflection.ParameterInfo [] Array of System.Reflection.ParameterInfo . | Improve this Doc View Source GetItemType(Type) Gets a value indicating whether the current Type encompasses or refers to another type; that is, whether the provided Type is an array, a pointer, or is passed by reference. Declaration public static Type GetItemType(this Type type) Parameters Type Name Description System.Type type Type to get item type. Returns Type Description System.Type Returns item type or null. | Improve this Doc View Source GetMemberType(MemberInfo) Gets the type of this member. Declaration public static Type GetMemberType(this MemberInfo memberInfo) Parameters Type Name Description System.Reflection.MemberInfo memberInfo A System.Reflection.MemberInfo instance. Returns Type Description System.Type | Improve this Doc View Source GetMetadataAttributes<TAttribute>(ICustomAttributeProvider) Performs search for metadata attributes. The search is performed in the following order: member attributes, base implementation attributes (if the attributeProvider is member of the type) type attributes, base type attributes (if the attributeProvider is type or member of the type) container type attributes (if the type is nested type) assembly attributes. Declaration public static IEnumerable<TAttribute> GetMetadataAttributes<TAttribute>(this ICustomAttributeProvider attributeProvider)where TAttribute : class Parameters Type Name Description System.Reflection.ICustomAttributeProvider attributeProvider Metadata attribute source. Returns Type Description System.Collections.Generic.IEnumerable <TAttribute> Metadata attributes. Type Parameters Name Description TAttribute Type of the attribute or type of the interface implemented by the attributes. Remarks Search logic for each level matches to the System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) method (inherit = true ). including checks of System.AttributeUsageAttribute . Ordering of attributes at each level is undefined and depends on runtime implementation. | Improve this Doc View Source GetMetadataAttributes<TAttribute>(ICustomAttributeProvider, Boolean) Performs search for metadata attributes. If the thisLevelOnly is true , the search is performed in the following order: member attributes, base implementation attributes (if the attributeProvider is member of the type) type attributes, base type attributes (if the attributeProvider is type or member of the type) container type attributes (if the type is nested type) assembly attributes. Declaration public static IEnumerable<TAttribute> GetMetadataAttributes<TAttribute>(this ICustomAttributeProvider attributeProvider, bool thisLevelOnly)where TAttribute : class Parameters Type Name Description System.Reflection.ICustomAttributeProvider attributeProvider Metadata attribute source. System.Boolean thisLevelOnly Do not check containers for the attributes. Returns Type Description System.Collections.Generic.IEnumerable <TAttribute> Metadata attributes. Type Parameters Name Description TAttribute Type of the attribute or type of the interface implemented by the attributes. Remarks Search logic for each level matches to the System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) method (inherit = true ). including checks of System.AttributeUsageAttribute . Ordering of attributes at each level is undefined and depends on runtime implementation. | Improve this Doc View Source GetModulePath(Module) Returns path to the module file. Declaration public static string GetModulePath(this Module module) Parameters Type Name Description System.Reflection.Module module Assembly. Returns Type Description System.String Path to module . | Improve this Doc View Source GetShortAssemblyQualifiedName(Type) Gets the short form of assembly qualified type name (without assembly version or assembly key). Declaration public static string GetShortAssemblyQualifiedName(this Type type) Parameters Type Name Description System.Type type The type to get the name for. Returns Type Description System.String The short form of assembly qualified type name. Examples // result is \"CodeJam.Reflection.ReflectionExtensions, CodeJam\"; var shortNameWithAssembly = typeof(ReflectionExtensions).GetShortAssemblyQualifiedName(); | Improve this Doc View Source IsAnonymous(Type) Checks if type is an anonymous type. Declaration public static bool IsAnonymous(this Type type) Parameters Type Name Description System.Type type Type to check. Returns Type Description System.Boolean True, if type is an anonymous type. | Improve this Doc View Source IsInstantiable(Type) Gets a value indicating whether the type can be instantiated. Declaration public static bool IsInstantiable(this Type type) Parameters Type Name Description System.Type type The System.Type to test. Returns Type Description System.Boolean A value indicating whether the type can be instantiated. | Improve this Doc View Source IsInteger(Type) Checks if type is integer type. Declaration public static bool IsInteger(this Type type) Parameters Type Name Description System.Type type Type to check. Returns Type Description System.Boolean True, if type is integer type. | Improve this Doc View Source IsNullable(Type) Gets a value indicating whether the type is Nullable<> type. Declaration public static bool IsNullable(this Type type) Parameters Type Name Description System.Type type The System.Type to test. Returns Type Description System.Boolean A value indicating whether the type is Nullable<>. | Improve this Doc View Source IsNullableEnum(Type) Checks if type is nullable enum type. Declaration public static bool IsNullableEnum(this Type type) Parameters Type Name Description System.Type type Type to check. Returns Type Description System.Boolean True, if type is nullable enum type. | Improve this Doc View Source IsNullableInteger(Type) Checks if type is nullable integer type. Declaration public static bool IsNullableInteger(this Type type) Parameters Type Name Description System.Type type Type to check. Returns Type Description System.Boolean True, if type is nullable integer type. | Improve this Doc View Source IsNullableNumeric(Type) Checks if type is nullable numeric type. Declaration public static bool IsNullableNumeric(this Type type) Parameters Type Name Description System.Type type Type to check. Returns Type Description System.Boolean True, if type is nullable numeric. | Improve this Doc View Source IsNumeric(Type) Checks if type is numeric type. Declaration public static bool IsNumeric(this Type type) Parameters Type Name Description System.Type type Type to check. Returns Type Description System.Boolean True, if type is numeric. | Improve this Doc View Source IsStatic(Type) Gets a value indicating whether the type is declared static. Declaration public static bool IsStatic(this Type type) Parameters Type Name Description System.Type type The System.Type to test. Returns Type Description System.Boolean A value indicating whether the type is declared static. | Improve this Doc View Source IsSubClass(Type, Type) Determines whether the type derives from the specified check . Declaration public static bool IsSubClass(this Type type, Type check) Parameters Type Name Description System.Type type The type to test. System.Type check The type to compare with. Returns Type Description System.Boolean true if the type derives from check ; otherwise, false. Remarks This method also returns false if type and the check are equal. | Improve this Doc View Source ToEnumUnderlying(Type) Returns the underlying type argument of the specified enum type. Declaration public static Type ToEnumUnderlying(this Type type) Parameters Type Name Description System.Type type A System.Type instance. Returns Type Description System.Type | Improve this Doc View Source ToNullableUnderlying(Type) Returns the underlying type argument of the specified nullable type. Declaration public static Type ToNullableUnderlying(this Type type) Parameters Type Name Description System.Type type A System.Type instance. Returns Type Description System.Type | Improve this Doc View Source ToUnderlying(Type) Returns the underlying type argument of the specified type. Declaration public static Type ToUnderlying(this Type type) Parameters Type Name Description System.Type type A System.Type instance. Returns Type Description System.Type | Improve this Doc View Source TryGetMetadataAttribute<TAttribute>(ICustomAttributeProvider) Performs search for metadata attribute. The search is performed in the following order member attributes, base implementation attributes (if the attributeProvider is member of the type) type attributes, base type attributes (if the attributeProvider is type or member of the type) container type attributes (if the type is nested type) assembly attributes. Declaration public static TAttribute TryGetMetadataAttribute<TAttribute>(this ICustomAttributeProvider attributeProvider)where TAttribute : class Parameters Type Name Description System.Reflection.ICustomAttributeProvider attributeProvider Metadata attribute source. Returns Type Description TAttribute First attribute found. Type Parameters Name Description TAttribute Type of the attribute or type of the interface implemented by the attributes. Remarks Search logic for each level matches to the System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) method (inherit = true ). including checks of System.AttributeUsageAttribute . Ordering of attributes at each level is undefined and depends on runtime implementation. | Improve this Doc View Source TryGetMetadataAttribute<TAttribute>(ICustomAttributeProvider, Boolean) Performs search for metadata attribute. If the thisLevelOnly is true , the search is performed in the following order: member attributes, base implementation attributes (if the attributeProvider is member of the type) type attributes, base type attributes (if the attributeProvider is type or member of the type) container type attributes (if the type is nested type) assembly attributes. Declaration public static TAttribute TryGetMetadataAttribute<TAttribute>(this ICustomAttributeProvider attributeProvider, bool thisLevelOnly)where TAttribute : class Parameters Type Name Description System.Reflection.ICustomAttributeProvider attributeProvider Metadata attribute source. System.Boolean thisLevelOnly Do not check containers for the attributes. Returns Type Description TAttribute First attribute found. Type Parameters Name Description TAttribute Type of the attribute or type of the interface implemented by the attributes. Remarks Search logic for each level matches to the System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) method (inherit = true ). including checks of System.AttributeUsageAttribute . Ordering of attributes at each level is undefined and depends on runtime implementation."
  },
  "api/main/CodeJam.Ranges.RangeBoundaryFromKind.html": {
    "href": "api/main/CodeJam.Ranges.RangeBoundaryFromKind.html",
    "title": "Enum RangeBoundaryFromKind | CodeJam",
    "keywords": "Enum RangeBoundaryFromKind The kind of From range boundary. Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax public enum RangeBoundaryFromKind : byte Fields Name Description Empty Empty, '∅'. Exclusive Greater than value, '(a,??', x > a. Inclusive Greater than or equal to, '[a,??', x >= a. Infinite Negative infinity, '(-∞,??', no From limit. Extension Methods EnumHelper.IsFlagSet<RangeBoundaryFromKind>(RangeBoundaryFromKind) EnumHelper.IsAnyFlagUnset<RangeBoundaryFromKind>(RangeBoundaryFromKind) EnumHelper.IsAnyFlagSet<RangeBoundaryFromKind>(RangeBoundaryFromKind) EnumHelper.IsFlagUnset<RangeBoundaryFromKind>(RangeBoundaryFromKind) EnumHelper.SetFlag<RangeBoundaryFromKind>(RangeBoundaryFromKind) EnumHelper.ClearFlag<RangeBoundaryFromKind>(RangeBoundaryFromKind) EnumHelper.SetFlag<RangeBoundaryFromKind>(RangeBoundaryFromKind, Boolean) NullableHelper.AsNullable<RangeBoundaryFromKind>() RangeExtensions.Contains<T, RangeBoundaryFromKind>(Range<T>) RangeExtensions.StartsAfter<T, RangeBoundaryFromKind>(Range<T>) RangeExtensions.EndsBefore<T, RangeBoundaryFromKind>(Range<T>) RangeExtensions.Contains<T, TKey, RangeBoundaryFromKind>(Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, RangeBoundaryFromKind>(Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, RangeBoundaryFromKind>(Range<T, TKey>) StringExtensions.ToInvariantString<RangeBoundaryFromKind>() StringExtensions.ToInvariantString<RangeBoundaryFromKind>(String)"
  },
  "api/main/CodeJam.Ranges.RangeBoundaryFrom-1.html": {
    "href": "api/main/CodeJam.Ranges.RangeBoundaryFrom-1.html",
    "title": "Struct RangeBoundaryFrom<T> | CodeJam",
    "keywords": "Struct RangeBoundaryFrom<T> The From boundary of the range. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax [Serializable] public struct RangeBoundaryFrom<T> : IEquatable<RangeBoundaryFrom<T>>, IComparable<RangeBoundaryFrom<T>>, IComparable<RangeBoundaryTo<T>>, IComparable<T>, IComparable, IFormattable Type Parameters Name Description T The type of the value. Should implement System.IComparable<T> or System.IComparable . Remarks Heavy tuned to be as fast as it is possible. The order of borders is the following: '∅' < '-∞' < 'a)' < '[a' == 'a]' < '(a' < '+∞'. Constructors | Improve this Doc View Source RangeBoundaryFrom(T, RangeBoundaryFromKind) Creates a new range boundary. Declaration public RangeBoundaryFrom(T value, RangeBoundaryFromKind boundaryKind) Parameters Type Name Description T value The value of the boundary. Infinite (or empty) boundaries should use default(T) or NegativeInfinity(T) (if the type has one) as the value. RangeBoundaryFromKind boundaryKind The kind of the boundary. Fields | Improve this Doc View Source Empty Empty range boundary, ∅. Declaration public static readonly RangeBoundaryFrom<T> Empty Field Value Type Description RangeBoundaryFrom <T> | Improve this Doc View Source NegativeInfinity Negative infinity, -∞. Declaration public static readonly RangeBoundaryFrom<T> NegativeInfinity Field Value Type Description RangeBoundaryFrom <T> Properties | Improve this Doc View Source HasValue The boundary has a value. Declaration public bool HasValue { get; } Property Value Type Description System.Boolean true if the boundary has a value; otherwise, false . | Improve this Doc View Source IsEmpty The boundary == ∅. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if the boundary is empty; otherwise, false . | Improve this Doc View Source IsExclusiveBoundary The boundary does not include the value. Declaration public bool IsExclusiveBoundary { get; } Property Value Type Description System.Boolean true if the boundary is exclusive boundary; otherwise, false . | Improve this Doc View Source IsInclusiveBoundary The boundary includes the value. Declaration public bool IsInclusiveBoundary { get; } Property Value Type Description System.Boolean true if the boundary is inclusive boundary; otherwise, false . | Improve this Doc View Source IsNegativeInfinity The boundary == -∞. Declaration public bool IsNegativeInfinity { get; } Property Value Type Description System.Boolean true if the boundary is negative infinity; otherwise, false . | Improve this Doc View Source IsNotEmpty The boundary != ∅. Declaration public bool IsNotEmpty { get; } Property Value Type Description System.Boolean true if the boundary is not empty; otherwise, false . | Improve this Doc View Source Kind The kind of the boundary. Declaration public RangeBoundaryFromKind Kind { get; } Property Value Type Description RangeBoundaryFromKind The kind of the boundary. | Improve this Doc View Source Value The value of the boundary. Declaration public T Value { get; } Property Value Type Description T The value of the boundary of System.InvalidOperationException if HasValue equals to false . Exceptions Type Condition System.InvalidOperationException Thrown if HasValue equals to false . Methods | Improve this Doc View Source CompareTo(T) Compares the current boundary with the value of another From boundary. Following order is used: '∅' < '-∞' < 'a)' < '[a' == 'a]' < '(a' < '+∞'. Declaration public int CompareTo(T other) Parameters Type Name Description T other Boundary value to compare with this. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has the following meanings: Less than zero This object is less than the other parameter. Zero This object is equal to other . Greater than zero This object is greater than other . Implements System.IComparable<T>.CompareTo(T) | Improve this Doc View Source CompareTo(RangeBoundaryFrom<T>) Compares the current boundary with another one. Following order is used: '∅' < '-∞' < 'a)' < '[a' == 'a]' < '(a' < '+∞'. Declaration public int CompareTo(RangeBoundaryFrom<T> other) Parameters Type Name Description RangeBoundaryFrom <T> other Boundary to compare with this. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has the following meanings: Less than zero This object is less than the other parameter. Zero This object is equal to other . Greater than zero This object is greater than other . Implements System.IComparable<T>.CompareTo(T) | Improve this Doc View Source CompareTo(RangeBoundaryTo<T>) Compares the current boundary with another one. Following order is used: '∅' < '-∞' < 'a)' < '[a' == 'a]' < '(a' < '+∞'. Declaration public int CompareTo(RangeBoundaryTo<T> other) Parameters Type Name Description RangeBoundaryTo <T> other Boundary to compare with this. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has the following meanings: Less than zero This object is less than the other parameter. Zero This object is equal to other . Greater than zero This object is greater than other . Implements System.IComparable<T>.CompareTo(T) | Improve this Doc View Source Equals(RangeBoundaryFrom<T>) Indicates whether the current boundary is equal to another. Declaration public bool Equals(RangeBoundaryFrom<T> other) Parameters Type Name Description RangeBoundaryFrom <T> other The boundary to compare with this. Returns Type Description System.Boolean True if the current boundary is equal to the other parameter; otherwise, false. Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Indicates whether the current boundary and a specified object are equal. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The object to compare with this. Returns Type Description System.Boolean True if obj and the current boundary are the same type and represent the same value; otherwise, false. Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetComplementation() Returns complementation for the boundary. The conversions are: 'a]' -> '(a' '[a' -> 'a)' 'a)' -> '[a' '(a' -> 'a]' Empty or infinite boundaries will throw. Check the HasValue before calling the method. Declaration public RangeBoundaryTo<T> GetComplementation() Returns Type Description RangeBoundaryTo <T> Complementation for the boundary. | Improve this Doc View Source GetHashCode() Returns the hash code for the current boundary. Declaration public override int GetHashCode() Returns Type Description System.Int32 A 32-bit signed integer that is the hash code for this instance. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source GetValueOrDefault() The value of the boundary or the default(T) if HasValue property equals to false . Declaration public T GetValueOrDefault() Returns Type Description T he value of the boundary or default(T). | Improve this Doc View Source GetValueOrDefault(T) The value of the boundary or the defaultValue if HasValue property equals to false . Declaration public T GetValueOrDefault(T defaultValue) Parameters Type Name Description T defaultValue The default value. Returns Type Description T Value of the boundary or defaultValue . | Improve this Doc View Source IsComplementationFor(RangeBoundaryTo<T>) Checks that the boundary is complementation for specified boundary. Declaration public bool IsComplementationFor(RangeBoundaryTo<T> other) Parameters Type Name Description RangeBoundaryTo <T> other Another boundary. Returns Type Description System.Boolean True , if the boundary is complementation for specified boundary. | Improve this Doc View Source ToExclusive() Creates a new boundary with exclusive boundary kind if the current boundary has a value. The original boundary is returned otherwise. Declaration public RangeBoundaryFrom<T> ToExclusive() Returns Type Description RangeBoundaryFrom <T> Range boundary with exclusive boundary kind or the original one if the boundary has no value. | Improve this Doc View Source ToInclusive() Creates a new boundary with inclusive boundary kind if the current boundary has a value. The original boundary is returned otherwise. Declaration public RangeBoundaryFrom<T> ToInclusive() Returns Type Description RangeBoundaryFrom <T> Range boundary with inclusive boundary kind or the original one if the boundary has no value. | Improve this Doc View Source ToString() Returns string representation of the boundary. Declaration public override string ToString() Returns Type Description System.String The string representation of the boundary. Overrides System.ValueType.ToString() | Improve this Doc View Source ToString(String) Returns string representation of the boundary using the specified format string. If T does not implement System.IFormattable the format string is ignored Declaration public string ToString(string format) Parameters Type Name Description System.String format The format string Returns Type Description System.String The string representation of the boundary. | Improve this Doc View Source ToString(String, IFormatProvider) Returns string representation of the boundary using the specified format string. If T does not implement System.IFormattable the format string is ignored Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format string System.IFormatProvider formatProvider The format provider Returns Type Description System.String The string representation of the boundary. Implements System.IFormattable.ToString(System.String, System.IFormatProvider) | Improve this Doc View Source WithValue(Func<T, T>) Creates a new boundary with updated value (if the current boundary has one). If the boundary has no value the method returns the boundary unchanged. Declaration public RangeBoundaryFrom<T> WithValue(Func<T, T> newValueSelector) Parameters Type Name Description System.Func <T, T> newValueSelector Callback to obtain a new value for the boundary. Used if the boundary has a value. Returns Type Description RangeBoundaryFrom <T> Range boundary with the same kind but with a new value (if the current boundary has one). | Improve this Doc View Source WithValue<T2>(Func<T, T2>) Creates a new boundary with updated value (if the current boundary has one). If the boundary has no value the method returns the boundary unchanged. Declaration public RangeBoundaryFrom<T2> WithValue<T2>(Func<T, T2> newValueSelector) Parameters Type Name Description System.Func <T, T2> newValueSelector Callback to obtain a new value for the boundary. Used if the boundary has a value. Returns Type Description RangeBoundaryFrom <T2> Range boundary with the same kind but with a new value (if the current boundary has one). Type Parameters Name Description T2 The new type of the range value Operators | Improve this Doc View Source Equality(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>) Implements the operator ==. Declaration public static bool operator ==(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 == boundary2. | Improve this Doc View Source GreaterThan(T, RangeBoundaryFrom<T>) Implements the operator >. Declaration public static bool operator>(T boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description T boundary1 The value of the boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 > boundary2. | Improve this Doc View Source GreaterThan(RangeBoundaryFrom<T>, T) Implements the operator >. Declaration public static bool operator>(RangeBoundaryFrom<T> boundary1, T boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. T boundary2 The value of the boundary2. Returns Type Description System.Boolean True , if boundary1 > boundary2. | Improve this Doc View Source GreaterThan(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>) Implements the operator >. Declaration public static bool operator>(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 > boundary2. | Improve this Doc View Source GreaterThan(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Implements the operator >. Declaration public static bool operator>(RangeBoundaryFrom<T> boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 > boundary2. | Improve this Doc View Source GreaterThanOrEqual(T, RangeBoundaryFrom<T>) Implements the operator >=. Declaration public static bool operator >=(T boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description T boundary1 The value of the boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 >= boundary2. | Improve this Doc View Source GreaterThanOrEqual(RangeBoundaryFrom<T>, T) Implements the operator >=. Declaration public static bool operator >=(RangeBoundaryFrom<T> boundary1, T boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. T boundary2 The value of the boundary2. Returns Type Description System.Boolean True , if boundary1 >= boundary2. | Improve this Doc View Source GreaterThanOrEqual(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>) Implements the operator >=. Declaration public static bool operator >=(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 >= boundary2. | Improve this Doc View Source GreaterThanOrEqual(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Implements the operator >=. Declaration public static bool operator >=(RangeBoundaryFrom<T> boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 >= boundary2. | Improve this Doc View Source Inequality(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>) Implements the operator !=. Declaration public static bool operator !=(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 != boundary2. | Improve this Doc View Source LessThan(T, RangeBoundaryFrom<T>) Implements the operator <. Declaration public static bool operator <(T boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description T boundary1 The value of the boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 < boundary2. | Improve this Doc View Source LessThan(RangeBoundaryFrom<T>, T) Implements the operator <. Declaration public static bool operator <(RangeBoundaryFrom<T> boundary1, T boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. T boundary2 The value of the boundary2. Returns Type Description System.Boolean True , if boundary1 < boundary2. | Improve this Doc View Source LessThan(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>) Implements the operator <. Declaration public static bool operator <(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 < boundary2. | Improve this Doc View Source LessThan(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Implements the operator <. Declaration public static bool operator <(RangeBoundaryFrom<T> boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 < boundary2. | Improve this Doc View Source LessThanOrEqual(T, RangeBoundaryFrom<T>) Implements the operator <=. Declaration public static bool operator <=(T boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description T boundary1 The value of the boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 <= boundary2. | Improve this Doc View Source LessThanOrEqual(RangeBoundaryFrom<T>, T) Implements the operator <=. Declaration public static bool operator <=(RangeBoundaryFrom<T> boundary1, T boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. T boundary2 The value of the boundary2. Returns Type Description System.Boolean True , if boundary1 <= boundary2. | Improve this Doc View Source LessThanOrEqual(RangeBoundaryFrom<T>, RangeBoundaryFrom<T>) Implements the operator <=. Declaration public static bool operator <=(RangeBoundaryFrom<T> boundary1, RangeBoundaryFrom<T> boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. RangeBoundaryFrom <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 <= boundary2. | Improve this Doc View Source LessThanOrEqual(RangeBoundaryFrom<T>, RangeBoundaryTo<T>) Implements the operator <=. Declaration public static bool operator <=(RangeBoundaryFrom<T> boundary1, RangeBoundaryTo<T> boundary2) Parameters Type Name Description RangeBoundaryFrom <T> boundary1 The boundary1. RangeBoundaryTo <T> boundary2 The boundary2. Returns Type Description System.Boolean True , if boundary1 <= boundary2. Explicit Interface Implementations | Improve this Doc View Source IComparable.CompareTo(Object) Compares the current boundary with the boundary or with the value of another boundary of the same kind. Following order is used: '∅' < '-∞' < 'a)' < '[a' == 'a]' < '(a' < '+∞'. Declaration int IComparable.CompareTo(object obj) Parameters Type Name Description System.Object obj An object to compare with this object. Returns Type Description System.Int32 A value that indicates the relative order of the objects being compared. The return value has the following meanings: Less than zero This object is less than the obj parameter. Zero This object is equal to obj . Greater than zero This object is greater than obj . Implements System.IComparable.CompareTo(System.Object) Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.ToInvariantString<T>(T) StringExtensions.ToInvariantString<T>(T, String)"
  },
  "api/main/CodeJam.OneOf-4.html": {
    "href": "api/main/CodeJam.OneOf-4.html",
    "title": "Class OneOf<T1, T2, T3, T4> | CodeJam",
    "keywords": "Class OneOf<T1, T2, T3, T4> Tagged union for 4 types. Inheritance System.Object OneOf<T1, T2, T3, T4> Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public abstract class OneOf<T1, T2, T3, T4> : IOneOf<T1, T2, T3, T4>, IEquatable<OneOf<T1, T2, T3, T4>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 Properties | Improve this Doc View Source IsCase1 Declaration public abstract bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public abstract bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4>.IsCase2 | Improve this Doc View Source IsCase3 Declaration public abstract bool IsCase3 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4>.IsCase3 | Improve this Doc View Source IsCase4 Declaration public abstract bool IsCase4 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4>.IsCase4 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2, T3, T4> for value of type T1 . Declaration public static OneOf<T1, T2, T3, T4> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4> Value of OneOf<T1, T2, T3, T4> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2, T3, T4> for value of type T2 . Declaration public static OneOf<T1, T2, T3, T4> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4> Value of OneOf<T1, T2, T3, T4> . | Improve this Doc View Source Create(T3) Creates instance of OneOf<T1, T2, T3, T4> for value of type T3 . Declaration public static OneOf<T1, T2, T3, T4> Create(T3 value) Parameters Type Name Description T3 value Value of type T3 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4> Value of OneOf<T1, T2, T3, T4> . | Improve this Doc View Source Create(T4) Creates instance of OneOf<T1, T2, T3, T4> for value of type T4 . Declaration public static OneOf<T1, T2, T3, T4> Create(T4 value) Parameters Type Name Description T4 value Value of type T4 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4> Value of OneOf<T1, T2, T3, T4> . | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>) Declaration public abstract void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action System.Action <T3> case3Action System.Action <T4> case4Action Implements IOneOf<T1, T2, T3, T4>.Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>) | Improve this Doc View Source Equals(OneOf<T1, T2, T3, T4>) Declaration public abstract bool Equals(OneOf<T1, T2, T3, T4> other) Parameters Type Name Description OneOf <T1, T2, T3, T4> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>) Declaration public abstract TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector System.Func <T3, TResult> case3Selector System.Func <T4, TResult> case4Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2, T3, T4>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>) Operators | Improve this Doc View Source Equality(OneOf<T1, T2, T3, T4>, OneOf<T1, T2, T3, T4>) Equality operator. Declaration public static bool operator ==(OneOf<T1, T2, T3, T4> left, OneOf<T1, T2, T3, T4> right) Parameters Type Name Description OneOf <T1, T2, T3, T4> left Left parameter. OneOf <T1, T2, T3, T4> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to OneOf<T1, T2, T3, T4>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4> Instance of OneOf<T1, T2, T3, T4> for value of type T1 . | Improve this Doc View Source Implicit(T2 to OneOf<T1, T2, T3, T4>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4> Instance of OneOf<T1, T2, T3, T4> for value of type T2 . | Improve this Doc View Source Implicit(T3 to OneOf<T1, T2, T3, T4>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4>(T3 value) Parameters Type Name Description T3 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4> Instance of OneOf<T1, T2, T3, T4> for value of type T3 . | Improve this Doc View Source Implicit(T4 to OneOf<T1, T2, T3, T4>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4>(T4 value) Parameters Type Name Description T4 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4> Instance of OneOf<T1, T2, T3, T4> for value of type T4 . | Improve this Doc View Source Inequality(OneOf<T1, T2, T3, T4>, OneOf<T1, T2, T3, T4>) Unequality operator. Declaration public static bool operator !=(OneOf<T1, T2, T3, T4> left, OneOf<T1, T2, T3, T4> right) Parameters Type Name Description OneOf <T1, T2, T3, T4> left Left parameter. OneOf <T1, T2, T3, T4> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.OneOf-3.html": {
    "href": "api/main/CodeJam.OneOf-3.html",
    "title": "Class OneOf<T1, T2, T3> | CodeJam",
    "keywords": "Class OneOf<T1, T2, T3> Tagged union for 3 types. Inheritance System.Object OneOf<T1, T2, T3> Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public abstract class OneOf<T1, T2, T3> : IOneOf<T1, T2, T3>, IEquatable<OneOf<T1, T2, T3>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 Properties | Improve this Doc View Source IsCase1 Declaration public abstract bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public abstract bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3>.IsCase2 | Improve this Doc View Source IsCase3 Declaration public abstract bool IsCase3 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3>.IsCase3 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2, T3> for value of type T1 . Declaration public static OneOf<T1, T2, T3> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description OneOf <T1, T2, T3> Value of OneOf<T1, T2, T3> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2, T3> for value of type T2 . Declaration public static OneOf<T1, T2, T3> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description OneOf <T1, T2, T3> Value of OneOf<T1, T2, T3> . | Improve this Doc View Source Create(T3) Creates instance of OneOf<T1, T2, T3> for value of type T3 . Declaration public static OneOf<T1, T2, T3> Create(T3 value) Parameters Type Name Description T3 value Value of type T3 to create instance from. Returns Type Description OneOf <T1, T2, T3> Value of OneOf<T1, T2, T3> . | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>) Declaration public abstract void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action System.Action <T3> case3Action Implements IOneOf<T1, T2, T3>.Do(Action<T1>, Action<T2>, Action<T3>) | Improve this Doc View Source Equals(OneOf<T1, T2, T3>) Declaration public abstract bool Equals(OneOf<T1, T2, T3> other) Parameters Type Name Description OneOf <T1, T2, T3> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>) Declaration public abstract TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector System.Func <T3, TResult> case3Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2, T3>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>) Operators | Improve this Doc View Source Equality(OneOf<T1, T2, T3>, OneOf<T1, T2, T3>) Equality operator. Declaration public static bool operator ==(OneOf<T1, T2, T3> left, OneOf<T1, T2, T3> right) Parameters Type Name Description OneOf <T1, T2, T3> left Left parameter. OneOf <T1, T2, T3> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to OneOf<T1, T2, T3>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description OneOf <T1, T2, T3> Instance of OneOf<T1, T2, T3> for value of type T1 . | Improve this Doc View Source Implicit(T2 to OneOf<T1, T2, T3>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description OneOf <T1, T2, T3> Instance of OneOf<T1, T2, T3> for value of type T2 . | Improve this Doc View Source Implicit(T3 to OneOf<T1, T2, T3>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3>(T3 value) Parameters Type Name Description T3 value The parameter. Returns Type Description OneOf <T1, T2, T3> Instance of OneOf<T1, T2, T3> for value of type T3 . | Improve this Doc View Source Inequality(OneOf<T1, T2, T3>, OneOf<T1, T2, T3>) Unequality operator. Declaration public static bool operator !=(OneOf<T1, T2, T3> left, OneOf<T1, T2, T3> right) Parameters Type Name Description OneOf <T1, T2, T3> left Left parameter. OneOf <T1, T2, T3> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.IO.TempData.TempFile.html": {
    "href": "api/main/CodeJam.IO.TempData.TempFile.html",
    "title": "Class TempData.TempFile | CodeJam",
    "keywords": "Class TempData.TempFile Wraps reference on a temp file meant to be deleted on dispose Inheritance System.Object System.Runtime.ConstrainedExecution.CriticalFinalizerObject TempData.TempBase TempData.TempFile Inherited Members TempData.TempBase.DebugAssertValidPath(String) TempData.TempBase.AssertNotDisposed() TempData.TempBase.Path TempData.TempBase.SuppressDelete() TempData.TempBase.Dispose() TempData.TempBase.Dispose(Boolean) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.IO Assembly : CodeJam.dll Syntax public sealed class TempFile : TempData.TempBase, IDisposable Properties | Improve this Doc View Source Info FileInfo object Declaration public FileInfo Info { get; } Property Value Type Description System.IO.FileInfo The FileInfo object. Methods | Improve this Doc View Source DisposePath(String, Boolean) Temp path disposal Declaration protected override void DisposePath(string path, bool disposing) Parameters Type Name Description System.String path The path. System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides TempData.TempBase.DisposePath(String, Boolean) Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) See Also TempData.TempBase"
  },
  "api/main/CodeJam.IO.TempData.TempDirectory.html": {
    "href": "api/main/CodeJam.IO.TempData.TempDirectory.html",
    "title": "Class TempData.TempDirectory | CodeJam",
    "keywords": "Class TempData.TempDirectory Wraps reference on a temp directory meant to be deleted on dispose Inheritance System.Object System.Runtime.ConstrainedExecution.CriticalFinalizerObject TempData.TempBase TempData.TempDirectory Inherited Members TempData.TempBase.DebugAssertValidPath(String) TempData.TempBase.AssertNotDisposed() TempData.TempBase.Path TempData.TempBase.SuppressDelete() TempData.TempBase.Dispose() TempData.TempBase.Dispose(Boolean) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.IO Assembly : CodeJam.dll Syntax public sealed class TempDirectory : TempData.TempBase, IDisposable Properties | Improve this Doc View Source Info DirectoryInfo object Declaration public DirectoryInfo Info { get; } Property Value Type Description System.IO.DirectoryInfo The DirectoryInfo object. Methods | Improve this Doc View Source DisposePath(String, Boolean) Temp path disposal Declaration protected override void DisposePath(string path, bool disposing) Parameters Type Name Description System.String path The path. System.Boolean disposing true to release both managed and unmanaged resources; false to release only unmanaged resources. Overrides TempData.TempBase.DisposePath(String, Boolean) Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.EnumValues.html": {
    "href": "api/main/CodeJam.EnumValues.html",
    "title": "Class EnumValues | CodeJam",
    "keywords": "Class EnumValues Holds information about enum members Inheritance System.Object EnumValues Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public class EnumValues : IReadOnlyCollection<EnumValue>, IEnumerable<EnumValue>, IEnumerable Properties | Improve this Doc View Source Count Gets the count. Declaration public int Count { get; } Property Value Type Description System.Int32 The count. Implements System.Collections.Generic.IReadOnlyCollection<T>.Count | Improve this Doc View Source EnumName Gets the name of the enum. Declaration public string EnumName { get; } Property Value Type Description System.String The name of the enum. | Improve this Doc View Source EnumType Gets the type of the enum. Declaration public Type EnumType { get; } Property Value Type Description System.Type The type of the enum. Methods | Improve this Doc View Source GetByDisplayName(String) Gets enum field by its display name. Declaration public EnumValue GetByDisplayName(string displayName) Parameters Type Name Description System.String displayName Name of the enum field. Returns Type Description EnumValue Enum field with matching display name. | Improve this Doc View Source GetByName(String) Tries to get enum field by its name. Declaration public EnumValue GetByName(string name) Parameters Type Name Description System.String name Name of the enum field. Returns Type Description EnumValue Enum field with matching name. | Improve this Doc View Source GetByName(String, Boolean) Tries to get enum field by its name. Declaration public EnumValue GetByName(string name, bool ignoreCase) Parameters Type Name Description System.String name Name of the enum field. System.Boolean ignoreCase if set to true the casing will be ignored. Returns Type Description EnumValue Enum field with matching name. | Improve this Doc View Source GetByValue(Object) Tries to get enum field by its value. Declaration public EnumValue GetByValue(object value) Parameters Type Name Description System.Object value Value of the enum field. Returns Type Description EnumValue Enum field with matching value. | Improve this Doc View Source GetEnumerator() Gets the enumerator. Declaration public IEnumerator<EnumValue> GetEnumerator() Returns Type Description System.Collections.Generic.IEnumerator < EnumValue > The enumerator Implements System.Collections.Generic.IEnumerable<T>.GetEnumerator() | Improve this Doc View Source IsDefined(String) Determines whether the specified enum name is defined. Declaration public bool IsDefined(string name) Parameters Type Name Description System.String name The name to check. Returns Type Description System.Boolean true if the specified enum name is defined; otherwise, false . | Improve this Doc View Source IsDefined(String, Boolean) Determines whether the specified enum name is defined. Declaration public bool IsDefined(string name, bool ignoreCase) Parameters Type Name Description System.String name The name to check. System.Boolean ignoreCase if set to true the casing will be ignored. Returns Type Description System.Boolean true if the specified enum name is defined; otherwise, false . Explicit Interface Implementations | Improve this Doc View Source IEnumerable.GetEnumerator() Gets the enumerator. Declaration IEnumerator IEnumerable.GetEnumerator() Returns Type Description System.Collections.IEnumerator The enumerator Implements System.Collections.IEnumerable.GetEnumerator() Extension Methods EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, TSource) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, TAccumulate) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, TResult) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, Func<TSource>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, Func<TResult>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.WithIndex<T>(IEnumerable<T>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, Func<T, T, TResult>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.CombineWithNext<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhile<T>(IEnumerable<T>, Func<T, T, Boolean>) EnumerableExtensions.Page<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Slice<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TakeLast<T>(IEnumerable<T>, Int32) EnumerableExtensions.Split<T>(IEnumerable<T>, Int32) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.Union<T>(IEnumerable<T>, T[]) EnumerableExtensions.Concat<T>(IEnumerable<T>, T) EnumerableExtensions.Concat<T>(IEnumerable<T>, T[]) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T[]) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>, IEqualityComparer<T>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.OrderBy<TSource>(IEnumerable<TSource>) EnumerableExtensions.OrderByDescending<TSource>(IEnumerable<TSource>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T, Func<T, Boolean>) EnumerableExtensions.AsList<T>(IEnumerable<T>) EnumerableExtensions.AsArray<T>(IEnumerable<T>) EnumerableExtensions.ToStrings<T>(IEnumerable<T>) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) CompositeRangeExtensions.ToCompositeRange<T, TKey>(IEnumerable<TKey>, Func<TKey, T>, Func<TKey, T>) CompositeRangeExtensions.ToCompositeRange<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.Join<T>(IEnumerable<T>, String) StringExtensions.Join<T>(IEnumerable<T>) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Int32, Action<T>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Action<T>, String)"
  },
  "api/main/CodeJam.EnumValue.html": {
    "href": "api/main/CodeJam.EnumValue.html",
    "title": "Class EnumValue | CodeJam",
    "keywords": "Class EnumValue Enum value information. Inheritance System.Object EnumValue Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public class EnumValue Properties | Improve this Doc View Source Description Enum element description. Declaration public string Description { get; } Property Value Type Description System.String | Improve this Doc View Source DisplayName Gets enum element display name. Declaration public string DisplayName { get; } Property Value Type Description System.String | Improve this Doc View Source Name Gets enum element name. Declaration public string Name { get; } Property Value Type Description System.String | Improve this Doc View Source UnderlyingField Gets enum underlying field. Declaration public FieldInfo UnderlyingField { get; } Property Value Type Description System.Reflection.FieldInfo | Improve this Doc View Source Value Gets enum element value. Declaration public object Value { get; } Property Value Type Description System.Object Methods | Improve this Doc View Source GetDisplayName() Gets enum element display name or enum name if DisplayName is null . Declaration public string GetDisplayName() Returns Type Description System.String Enum element display name or enum name if DisplayName is null . | Improve this Doc View Source ToString() Declaration public override string ToString() Returns Type Description System.String Overrides System.Object.ToString() Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Collections.SuffixTreeBase.Node.html": {
    "href": "api/main/CodeJam.Collections.SuffixTreeBase.Node.html",
    "title": "Struct SuffixTreeBase.Node | CodeJam",
    "keywords": "Struct SuffixTreeBase.Node A suffix tree edge combined with the end node Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax protected struct Node Constructors | Improve this Doc View Source Node(Int32, Int32, Boolean, List<Int32>) Constructs a new node Declaration public Node(int begin, int end, bool terminal, List<int> children = null) Parameters Type Name Description System.Int32 begin An edge start offset System.Int32 end An edge end offset System.Boolean terminal Is the edge terminates the string or not System.Collections.Generic.List < System.Int32 > children A list of child nodes (edges) Properties | Improve this Doc View Source Begin Index of the first character of a substring corresponding to the node Declaration public int Begin { get; } Property Value Type Description System.Int32 | Improve this Doc View Source Children A list of child nodes null for leaf nodes Declaration public List<int> Children { get; } Property Value Type Description System.Collections.Generic.List < System.Int32 > | Improve this Doc View Source End Index after the last character of a substring corresponding to the node Declaration public int End { get; } Property Value Type Description System.Int32 | Improve this Doc View Source IsLeaf Shows whether it is a leaf or an internal node Declaration public bool IsLeaf { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsTerminal Shows whether it is a terminal (ending at a string end) node or not Declaration public bool IsTerminal { get; } Property Value Type Description System.Boolean | Improve this Doc View Source Length Length of the corresponding substring Declaration public int Length { get; } Property Value Type Description System.Int32 Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Collections.OwnedCollectionBase-2.html": {
    "href": "api/main/CodeJam.Collections.OwnedCollectionBase-2.html",
    "title": "Class OwnedCollectionBase<TOwner, TItem> | CodeJam",
    "keywords": "Class OwnedCollectionBase<TOwner, TItem> Base collection type that allows to associate collection items with the owner. Inheritance System.Object System.Collections.ObjectModel.Collection <TItem> OwnedCollectionBase<TOwner, TItem> OwnedCollection<TOwner, TItem> Inherited Members System.Collections.ObjectModel.Collection<TItem>.Add(TItem) System.Collections.ObjectModel.Collection<TItem>.Clear() System.Collections.ObjectModel.Collection<TItem>.CopyTo(TItem[], System.Int32) System.Collections.ObjectModel.Collection<TItem>.Contains(TItem) System.Collections.ObjectModel.Collection<TItem>.GetEnumerator() System.Collections.ObjectModel.Collection<TItem>.IndexOf(TItem) System.Collections.ObjectModel.Collection<TItem>.Insert(System.Int32, TItem) System.Collections.ObjectModel.Collection<TItem>.Remove(TItem) System.Collections.ObjectModel.Collection<TItem>.RemoveAt(System.Int32) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.Collection<TItem>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Add(System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Contains(System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.IndexOf(System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Remove(System.Object) System.Collections.ObjectModel.Collection<TItem>.Count System.Collections.ObjectModel.Collection<TItem>.Items System.Collections.ObjectModel.Collection<TItem>.Item[System.Int32] System.Collections.ObjectModel.Collection<TItem>.System.Collections.Generic.ICollection<TItem>.IsReadOnly System.Collections.ObjectModel.Collection<TItem>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.Collection<TItem>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Item[System.Int32] System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.IsReadOnly System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.IsFixedSize System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public abstract class OwnedCollectionBase<TOwner, TItem> : Collection<TItem>, IList<TItem>, ICollection<TItem>, IList, ICollection, IReadOnlyList<TItem>, IReadOnlyCollection<TItem>, IEnumerable<TItem>, IEnumerable where TOwner : class where TItem : class Type Parameters Name Description TOwner The type of the owner. TItem The type of the item. Constructors | Improve this Doc View Source OwnedCollectionBase(TOwner) Initializes a new instance of the OwnedCollectionBase<TOwner, TItem> class. Declaration protected OwnedCollectionBase(TOwner owner) Parameters Type Name Description TOwner owner The owner for the collection. Properties | Improve this Doc View Source Owner Gets owner for the collection. Declaration protected TOwner Owner { get; } Property Value Type Description TOwner The owner for the collection. Methods | Improve this Doc View Source ClearItems() Removes all elements from the System.Collections.ObjectModel.Collection<T> . Clears owner for the items being removed. Declaration protected override void ClearItems() Overrides System.Collections.ObjectModel.Collection<TItem>.ClearItems() | Improve this Doc View Source GetOwner(TItem) Gets the owner of the item. Declaration protected abstract TOwner GetOwner(TItem item) Parameters Type Name Description TItem item The item. Returns Type Description TOwner Owner of the item. | Improve this Doc View Source InsertItem(Int32, TItem) Inserts an element into the System.Collections.ObjectModel.Collection<T> at the specified index. Sets owner for the items being added. Declaration protected override void InsertItem(int index, TItem item) Parameters Type Name Description System.Int32 index The zero-based index at which item should be inserted. TItem item The object to insert. The value can be null for reference types. Overrides System.Collections.ObjectModel.Collection<TItem>.InsertItem(System.Int32, TItem) | Improve this Doc View Source RemoveItem(Int32) Removes the element at the specified index of the System.Collections.ObjectModel.Collection<T> . Clears owner for the item being removed. Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index The zero-based index of the element to remove. Overrides System.Collections.ObjectModel.Collection<TItem>.RemoveItem(System.Int32) | Improve this Doc View Source SetItem(Int32, TItem) Replaces the element at the specified index. Sets owner for the items being added. Clears owner for the item being removed. Declaration protected override void SetItem(int index, TItem item) Parameters Type Name Description System.Int32 index The zero-based index of the element to replace. TItem item The new value for the element at the specified index. The value can be null for reference types. Overrides System.Collections.ObjectModel.Collection<TItem>.SetItem(System.Int32, TItem) | Improve this Doc View Source SetOwner(TItem, TOwner) Sets the owner of the item. Declaration protected abstract void SetOwner(TItem item, TOwner owner) Parameters Type Name Description TItem item The item. TOwner owner The owner of the item. Extension Methods Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Algorithms.PartitionPoint<T>(IList<T>, Predicate<T>) Algorithms.PartitionPoint<T>(IList<T>, Int32, Predicate<T>) Algorithms.PartitionPoint<T>(IList<T>, Int32, Int32, Predicate<T>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, TSource) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, TAccumulate) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, TResult) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, Func<TSource>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, Func<TResult>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.WithIndex<T>(IEnumerable<T>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, Func<T, T, TResult>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.CombineWithNext<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhile<T>(IEnumerable<T>, Func<T, T, Boolean>) EnumerableExtensions.Page<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Slice<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TakeLast<T>(IEnumerable<T>, Int32) EnumerableExtensions.Split<T>(IEnumerable<T>, Int32) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.Union<T>(IEnumerable<T>, T[]) EnumerableExtensions.Concat<T>(IEnumerable<T>, T) EnumerableExtensions.Concat<T>(IEnumerable<T>, T[]) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T[]) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>, IEqualityComparer<T>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.OrderBy<TSource>(IEnumerable<TSource>) EnumerableExtensions.OrderByDescending<TSource>(IEnumerable<TSource>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T, Func<T, Boolean>) EnumerableExtensions.AsList<T>(IEnumerable<T>) EnumerableExtensions.AsArray<T>(IEnumerable<T>) EnumerableExtensions.ToStrings<T>(IEnumerable<T>) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>) CollectionExtensions.NotNullNorEmpty<T>(ICollection<T>) CollectionExtensions.AddRange<T>(ICollection<T>, T[]) CollectionExtensions.AddRange<T>(ICollection<T>, IList<T>) CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CompositeRangeExtensions.ToCompositeRange<T, TKey>(IEnumerable<TKey>, Func<TKey, T>, Func<TKey, T>) CompositeRangeExtensions.ToCompositeRange<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.Join<T>(IEnumerable<T>, String) StringExtensions.Join<T>(IEnumerable<T>) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Int32, Action<T>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Action<T>, String) See Also System.Collections.ObjectModel.Collection <T>"
  },
  "api/main/CodeJam.OneOf-7.html": {
    "href": "api/main/CodeJam.OneOf-7.html",
    "title": "Class OneOf<T1, T2, T3, T4, T5, T6, T7> | CodeJam",
    "keywords": "Class OneOf<T1, T2, T3, T4, T5, T6, T7> Tagged union for 7 types. Inheritance System.Object OneOf<T1, T2, T3, T4, T5, T6, T7> Inherited Members System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public abstract class OneOf<T1, T2, T3, T4, T5, T6, T7> : IOneOf<T1, T2, T3, T4, T5, T6, T7>, IEquatable<OneOf<T1, T2, T3, T4, T5, T6, T7>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 T5 Type of case 5 T6 Type of case 6 T7 Type of case 7 Properties | Improve this Doc View Source IsCase1 Declaration public abstract bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public abstract bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase2 | Improve this Doc View Source IsCase3 Declaration public abstract bool IsCase3 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase3 | Improve this Doc View Source IsCase4 Declaration public abstract bool IsCase4 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase4 | Improve this Doc View Source IsCase5 Declaration public abstract bool IsCase5 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase5 | Improve this Doc View Source IsCase6 Declaration public abstract bool IsCase6 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase6 | Improve this Doc View Source IsCase7 Declaration public abstract bool IsCase7 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.IsCase7 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T1 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Value of OneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T2 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Value of OneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Create(T3) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T3 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7> Create(T3 value) Parameters Type Name Description T3 value Value of type T3 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Value of OneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Create(T4) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T4 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7> Create(T4 value) Parameters Type Name Description T4 value Value of type T4 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Value of OneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Create(T5) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T5 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7> Create(T5 value) Parameters Type Name Description T5 value Value of type T5 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Value of OneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Create(T6) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T6 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7> Create(T6 value) Parameters Type Name Description T6 value Value of type T6 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Value of OneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Create(T7) Creates instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T7 . Declaration public static OneOf<T1, T2, T3, T4, T5, T6, T7> Create(T7 value) Parameters Type Name Description T7 value Value of type T7 to create instance from. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Value of OneOf<T1, T2, T3, T4, T5, T6, T7> . | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>) Declaration public abstract void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action, Action<T5> case5Action, Action<T6> case6Action, Action<T7> case7Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action System.Action <T3> case3Action System.Action <T4> case4Action System.Action <T5> case5Action System.Action <T6> case6Action System.Action <T7> case7Action Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>, Action<T5>, Action<T6>, Action<T7>) | Improve this Doc View Source Equals(OneOf<T1, T2, T3, T4, T5, T6, T7>) Declaration public abstract bool Equals(OneOf<T1, T2, T3, T4, T5, T6, T7> other) Parameters Type Name Description OneOf <T1, T2, T3, T4, T5, T6, T7> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.Object.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.Object.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>, Func<T7, TResult>) Declaration public abstract TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector, Func<T5, TResult> case5Selector, Func<T6, TResult> case6Selector, Func<T7, TResult> case7Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector System.Func <T3, TResult> case3Selector System.Func <T4, TResult> case4Selector System.Func <T5, TResult> case5Selector System.Func <T6, TResult> case6Selector System.Func <T7, TResult> case7Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2, T3, T4, T5, T6, T7>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>, Func<T5, TResult>, Func<T6, TResult>, Func<T7, TResult>) Operators | Improve this Doc View Source Equality(OneOf<T1, T2, T3, T4, T5, T6, T7>, OneOf<T1, T2, T3, T4, T5, T6, T7>) Equality operator. Declaration public static bool operator ==(OneOf<T1, T2, T3, T4, T5, T6, T7> left, OneOf<T1, T2, T3, T4, T5, T6, T7> right) Parameters Type Name Description OneOf <T1, T2, T3, T4, T5, T6, T7> left Left parameter. OneOf <T1, T2, T3, T4, T5, T6, T7> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to OneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T1 . | Improve this Doc View Source Implicit(T2 to OneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T2 . | Improve this Doc View Source Implicit(T3 to OneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T3 value) Parameters Type Name Description T3 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T3 . | Improve this Doc View Source Implicit(T4 to OneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T4 value) Parameters Type Name Description T4 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T4 . | Improve this Doc View Source Implicit(T5 to OneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T5 value) Parameters Type Name Description T5 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T5 . | Improve this Doc View Source Implicit(T6 to OneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T6 value) Parameters Type Name Description T6 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T6 . | Improve this Doc View Source Implicit(T7 to OneOf<T1, T2, T3, T4, T5, T6, T7>) Implicit cast operator. Declaration public static implicit operator OneOf<T1, T2, T3, T4, T5, T6, T7>(T7 value) Parameters Type Name Description T7 value The parameter. Returns Type Description OneOf <T1, T2, T3, T4, T5, T6, T7> Instance of OneOf<T1, T2, T3, T4, T5, T6, T7> for value of type T7 . | Improve this Doc View Source Inequality(OneOf<T1, T2, T3, T4, T5, T6, T7>, OneOf<T1, T2, T3, T4, T5, T6, T7>) Unequality operator. Declaration public static bool operator !=(OneOf<T1, T2, T3, T4, T5, T6, T7> left, OneOf<T1, T2, T3, T4, T5, T6, T7> right) Parameters Type Name Description OneOf <T1, T2, T3, T4, T5, T6, T7> left Left parameter. OneOf <T1, T2, T3, T4, T5, T6, T7> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.IOneOf-3.html": {
    "href": "api/main/CodeJam.IOneOf-3.html",
    "title": "Interface IOneOf<T1, T2, T3> | CodeJam",
    "keywords": "Interface IOneOf<T1, T2, T3> Common interface for OneOf<T1, T2, T3> and ValueOneOf<T1, T2, T3> . Namespace : CodeJam Assembly : CodeJam.dll Syntax public interface IOneOf<T1, T2, T3> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 Properties | Improve this Doc View Source IsCase1 Returns true if class contains value of type T1 . Declaration bool IsCase1 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase2 Returns true if class contains value of type T2 . Declaration bool IsCase2 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase3 Returns true if class contains value of type T3 . Declaration bool IsCase3 { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>) Calls action for actual type argument. Declaration void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action) Parameters Type Name Description System.Action <T1> case1Action Action for T1 System.Action <T2> case2Action Action for T2 System.Action <T3> case3Action Action for T3 | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>) Calls func for actual type argument and returns calculated value. Declaration TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector Calculation function for T1 System.Func <T2, TResult> case2Selector Calculation function for T2 System.Func <T3, TResult> case3Selector Calculation function for T3 Returns Type Description TResult Calculated value. Type Parameters Name Description TResult Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.IOneOf-2.html": {
    "href": "api/main/CodeJam.IOneOf-2.html",
    "title": "Interface IOneOf<T1, T2> | CodeJam",
    "keywords": "Interface IOneOf<T1, T2> Common interface for OneOf<T1, T2> and ValueOneOf<T1, T2> . Namespace : CodeJam Assembly : CodeJam.dll Syntax public interface IOneOf<T1, T2> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 Properties | Improve this Doc View Source IsCase1 Returns true if class contains value of type T1 . Declaration bool IsCase1 { get; } Property Value Type Description System.Boolean | Improve this Doc View Source IsCase2 Returns true if class contains value of type T2 . Declaration bool IsCase2 { get; } Property Value Type Description System.Boolean Methods | Improve this Doc View Source Do(Action<T1>, Action<T2>) Calls action for actual type argument. Declaration void Do(Action<T1> case1Action, Action<T2> case2Action) Parameters Type Name Description System.Action <T1> case1Action Action for T1 System.Action <T2> case2Action Action for T2 | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>) Calls func for actual type argument and returns calculated value. Declaration TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector Calculation function for T1 System.Func <T2, TResult> case2Selector Calculation function for T2 Returns Type Description TResult Calculated value. Type Parameters Name Description TResult Extension Methods RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Fn-1.html": {
    "href": "api/main/CodeJam.Fn-1.html",
    "title": "Class Fn<T> | CodeJam",
    "keywords": "Class Fn<T> Helper methods for System.Func<TResult> Inheritance System.Object Fn<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class Fn<T> Type Parameters Name Description T Fields | Improve this Doc View Source False The function that returns false. Declaration public static readonly Func<T, bool> False Field Value Type Description System.Func <T, System.Boolean > | Improve this Doc View Source FalsePredicate The function that always returns false. Declaration public static readonly Predicate<T> FalsePredicate Field Value Type Description System.Predicate <T> | Improve this Doc View Source IsNotNull The function that returns true if an object is not null. Declaration public static readonly Func<T, bool> IsNotNull Field Value Type Description System.Func <T, System.Boolean > | Improve this Doc View Source IsNull The function that returns true if an object is null. Declaration public static readonly Func<T, bool> IsNull Field Value Type Description System.Func <T, System.Boolean > | Improve this Doc View Source Self The function that returns the same object which was passed as parameter. Declaration public static readonly Func<T, T> Self Field Value Type Description System.Func <T, T> | Improve this Doc View Source SelfConverter The function that returns the same object which was passed as parameter. Declaration public static readonly Converter<T, T> SelfConverter Field Value Type Description System.Converter <T, T> | Improve this Doc View Source True The function that always returns true. Declaration public static readonly Func<T, bool> True Field Value Type Description System.Func <T, System.Boolean > | Improve this Doc View Source TruePredicate The function that returns true. Declaration public static readonly Predicate<T> TruePredicate Field Value Type Description System.Predicate <T>"
  },
  "api/main/CodeJam.Expressions.html": {
    "href": "api/main/CodeJam.Expressions.html",
    "title": "Namespace CodeJam.Expressions | CodeJam",
    "keywords": "Namespace CodeJam.Expressions Classes Expr Provides helper methods for Action and Func delegates. ExpressionExtensions System.Linq.Expressions.Expression Extensions."
  },
  "api/main/CodeJam.Dates.DateTimeExtensions.html": {
    "href": "api/main/CodeJam.Dates.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | CodeJam",
    "keywords": "Class DateTimeExtensions Helper methods for date manipulations Inheritance System.Object DateTimeExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Dates Assembly : CodeJam.dll Syntax public static class DateTimeExtensions Methods | Improve this Doc View Source AddMonths(DateTime, Int32, Boolean) Returns the date resulting from adding the given number of months to this date. Declaration public static DateTime AddMonths(this DateTime date, int monthOffset, bool useLastDay) Parameters Type Name Description System.DateTime date The date. System.Int32 monthOffset The month offset. System.Boolean useLastDay if set to true , the call preserves last day of the month, 2000/02/28 => 2000/01/31. Returns Type Description System.DateTime Updated date. | Improve this Doc View Source AddMonths(DateTimeOffset, Int32, Boolean) Returns the date resulting from adding the given number of months to this date. Declaration public static DateTimeOffset AddMonths(this DateTimeOffset date, int monthOffset, bool useLastDay) Parameters Type Name Description System.DateTimeOffset date The date. System.Int32 monthOffset The month offset. System.Boolean useLastDay if set to true , the call preserves last day of the month, 2000/02/28 => 2000/01/31. Returns Type Description System.DateTimeOffset Updated date. | Improve this Doc View Source AddYears(DateTime, Int32, Boolean) Returns the date resulting from adding the given number of years to this date. Declaration public static DateTime AddYears(this DateTime date, int yearOffset, bool useLastDay) Parameters Type Name Description System.DateTime date The date. System.Int32 yearOffset The year offset. System.Boolean useLastDay if set to true , the call preserves last day of the month, 2001/02/28 => 2004/02/29. Returns Type Description System.DateTime Updated date. | Improve this Doc View Source AddYears(DateTimeOffset, Int32, Boolean) Returns the date resulting from adding the given number of years to this date. Declaration public static DateTimeOffset AddYears(this DateTimeOffset date, int yearOffset, bool useLastDay) Parameters Type Name Description System.DateTimeOffset date The date. System.Int32 yearOffset The year offset. System.Boolean useLastDay if set to true , the call preserves last day of the month, 2001/02/28 => 2004/02/29. Returns Type Description System.DateTimeOffset Updated date. | Improve this Doc View Source DaysInMonth(DateTime) Returns count of days in month. Declaration public static int DaysInMonth(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.Int32 Count of days in month. | Improve this Doc View Source DaysInMonth(DateTimeOffset) Returns count of days in month. Declaration public static int DaysInMonth(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description System.Int32 Count of days in month. | Improve this Doc View Source DaysInYear(DateTime) Returns count of days in year. Declaration public static int DaysInYear(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.Int32 Count of days in year. | Improve this Doc View Source DaysInYear(DateTimeOffset) Returns count of days in year. Declaration public static int DaysInYear(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description System.Int32 Count of days in year. | Improve this Doc View Source FirstDayOfMonth(DateTime) Returns the first day of month. Declaration public static DateTime FirstDayOfMonth(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.DateTime The first day of month. | Improve this Doc View Source FirstDayOfMonth(DateTimeOffset) Returns the first day of month. Declaration public static DateTimeOffset FirstDayOfMonth(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description System.DateTimeOffset The first day of month. | Improve this Doc View Source FirstDayOfYear(DateTime) Returns the first day of year. Declaration public static DateTime FirstDayOfYear(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.DateTime The first day of year. | Improve this Doc View Source FirstDayOfYear(DateTimeOffset) Returns the first day of year. Declaration public static DateTimeOffset FirstDayOfYear(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description System.DateTimeOffset The first day of year. | Improve this Doc View Source LastDayOfMonth(DateTime) Returns the last day of month. Declaration public static DateTime LastDayOfMonth(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.DateTime The last day of month. | Improve this Doc View Source LastDayOfMonth(DateTimeOffset) Returns the last day of month. Declaration public static DateTimeOffset LastDayOfMonth(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description System.DateTimeOffset The last day of month. | Improve this Doc View Source LastDayOfYear(DateTime) Returns the last day of year. Declaration public static DateTime LastDayOfYear(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.DateTime The last day of year. | Improve this Doc View Source LastDayOfYear(DateTimeOffset) Returns the last day of year. Declaration public static DateTimeOffset LastDayOfYear(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description System.DateTimeOffset The last day of year. | Improve this Doc View Source NextDay(DateTime) Returns next day of the date. Declaration public static DateTime NextDay(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.DateTime Next day. | Improve this Doc View Source NextDay(DateTimeOffset) Returns next day of the date. Declaration public static DateTimeOffset NextDay(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description System.DateTimeOffset Next day. | Improve this Doc View Source NextMonth(DateTime) Returns next month of the date. Declaration public static DateTime NextMonth(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.DateTime Next month. | Improve this Doc View Source NextMonth(DateTimeOffset) Returns next month of the date. Declaration public static DateTimeOffset NextMonth(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description System.DateTimeOffset Next month. | Improve this Doc View Source NextYear(DateTime) Returns next year of the date. Declaration public static DateTime NextYear(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.DateTime Next year. | Improve this Doc View Source NextYear(DateTimeOffset) Returns next year of the date. Declaration public static DateTimeOffset NextYear(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description System.DateTimeOffset Next year. | Improve this Doc View Source PrevDay(DateTime) Returns previous day of the date. Declaration public static DateTime PrevDay(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.DateTime Previous date. | Improve this Doc View Source PrevDay(DateTimeOffset) Returns previous day of the date. Declaration public static DateTimeOffset PrevDay(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description System.DateTimeOffset Previous date. | Improve this Doc View Source PrevMonth(DateTime) Returns previous month of the date. Declaration public static DateTime PrevMonth(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.DateTime Previous month. | Improve this Doc View Source PrevMonth(DateTimeOffset) Returns previous month of the date. Declaration public static DateTimeOffset PrevMonth(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description System.DateTimeOffset Previous month. | Improve this Doc View Source PrevYear(DateTime) Returns previous year of the date. Declaration public static DateTime PrevYear(this DateTime date) Parameters Type Name Description System.DateTime date The date. Returns Type Description System.DateTime Previous year. | Improve this Doc View Source PrevYear(DateTimeOffset) Returns previous year of the date. Declaration public static DateTimeOffset PrevYear(this DateTimeOffset date) Parameters Type Name Description System.DateTimeOffset date The date. Returns Type Description System.DateTimeOffset Previous year. | Improve this Doc View Source WithDay(DateTime, Int32) Updates the day of the date. Declaration public static DateTime WithDay(this DateTime date, int day) Parameters Type Name Description System.DateTime date The date. System.Int32 day The day. Returns Type Description System.DateTime Updated date. | Improve this Doc View Source WithDay(DateTimeOffset, Int32) Updates the day of the date. Declaration public static DateTimeOffset WithDay(this DateTimeOffset date, int day) Parameters Type Name Description System.DateTimeOffset date The date. System.Int32 day The day. Returns Type Description System.DateTimeOffset Updated date. | Improve this Doc View Source WithMonth(DateTime, Int32) Updates the month of the date. Declaration public static DateTime WithMonth(this DateTime date, int month) Parameters Type Name Description System.DateTime date The date. System.Int32 month The month. Returns Type Description System.DateTime Updated date. | Improve this Doc View Source WithMonth(DateTime, Int32, Boolean) Updates the month of the date. Declaration public static DateTime WithMonth(this DateTime date, int month, bool useLastDay) Parameters Type Name Description System.DateTime date The date. System.Int32 month The month. System.Boolean useLastDay if set to true , the call preserves last day of the month, 2000/02/28 => 2000/01/31. Returns Type Description System.DateTime Updated date. | Improve this Doc View Source WithMonth(DateTimeOffset, Int32) Updates the month of the date. Declaration public static DateTimeOffset WithMonth(this DateTimeOffset date, int month) Parameters Type Name Description System.DateTimeOffset date The date. System.Int32 month The month. Returns Type Description System.DateTimeOffset Updated date. | Improve this Doc View Source WithMonth(DateTimeOffset, Int32, Boolean) Updates the month of the date. Declaration public static DateTimeOffset WithMonth(this DateTimeOffset date, int month, bool useLastDay) Parameters Type Name Description System.DateTimeOffset date The date. System.Int32 month The month. System.Boolean useLastDay if set to true , the call preserves last day of the month, 2000/02/28 => 2000/01/31. Returns Type Description System.DateTimeOffset Updated date. | Improve this Doc View Source WithMonthAndDay(DateTime, Int32, Int32) Updates the month and the day of the date. Declaration public static DateTime WithMonthAndDay(this DateTime date, int month, int day) Parameters Type Name Description System.DateTime date The date. System.Int32 month The month. System.Int32 day The day. Returns Type Description System.DateTime Updated date. | Improve this Doc View Source WithMonthAndDay(DateTime, Int32, Int32, Boolean) Updates the month and the day of the date. Declaration public static DateTime WithMonthAndDay(this DateTime date, int month, int day, bool useLastDay) Parameters Type Name Description System.DateTime date The date. System.Int32 month The month. System.Int32 day The day. System.Boolean useLastDay if set to true , the call preserves last day of the month, 2001/02/28 => 2004/02/29. Returns Type Description System.DateTime Updated date. | Improve this Doc View Source WithMonthAndDay(DateTimeOffset, Int32, Int32) Updates the month and the day of the date. Declaration public static DateTimeOffset WithMonthAndDay(this DateTimeOffset date, int month, int day) Parameters Type Name Description System.DateTimeOffset date The date. System.Int32 month The month. System.Int32 day The day. Returns Type Description System.DateTimeOffset Updated date. | Improve this Doc View Source WithMonthAndDay(DateTimeOffset, Int32, Int32, Boolean) Updates the month and the day of the date. Declaration public static DateTimeOffset WithMonthAndDay(this DateTimeOffset date, int month, int day, bool useLastDay) Parameters Type Name Description System.DateTimeOffset date The date. System.Int32 month The month. System.Int32 day The day. System.Boolean useLastDay if set to true , the call preserves last day of the month, 2001/02/28 => 2004/02/29. Returns Type Description System.DateTimeOffset Updated date. | Improve this Doc View Source WithYear(DateTime, Int32) Updates the year of the date. Declaration public static DateTime WithYear(this DateTime date, int year) Parameters Type Name Description System.DateTime date The date. System.Int32 year The year. Returns Type Description System.DateTime Updated date. | Improve this Doc View Source WithYear(DateTime, Int32, Boolean) Updates the year of the date. Declaration public static DateTime WithYear(this DateTime date, int year, bool useLastDay) Parameters Type Name Description System.DateTime date The date. System.Int32 year The year. System.Boolean useLastDay if set to true , the call preserves last day of the month, 2001/02/28 => 2004/02/29. Returns Type Description System.DateTime Updated date. | Improve this Doc View Source WithYear(DateTimeOffset, Int32) Updates the year of the date. Declaration public static DateTimeOffset WithYear(this DateTimeOffset date, int year) Parameters Type Name Description System.DateTimeOffset date The date. System.Int32 year The year. Returns Type Description System.DateTimeOffset Updated date. | Improve this Doc View Source WithYear(DateTimeOffset, Int32, Boolean) Updates the year of the date. Declaration public static DateTimeOffset WithYear(this DateTimeOffset date, int year, bool useLastDay) Parameters Type Name Description System.DateTimeOffset date The date. System.Int32 year The year. System.Boolean useLastDay if set to true , the call preserves last day of the month, 2001/02/28 => 2004/02/29. Returns Type Description System.DateTimeOffset Updated date. | Improve this Doc View Source WithYearAndMonth(DateTime, Int32, Int32) Updates the year and the month of the date. Declaration public static DateTime WithYearAndMonth(this DateTime date, int year, int month) Parameters Type Name Description System.DateTime date The date. System.Int32 year The year. System.Int32 month The month. Returns Type Description System.DateTime Updated date. | Improve this Doc View Source WithYearAndMonth(DateTime, Int32, Int32, Boolean) Updates the month and the year of the date. Declaration public static DateTime WithYearAndMonth(this DateTime date, int year, int month, bool useLastDay) Parameters Type Name Description System.DateTime date The date. System.Int32 year The year. System.Int32 month The month. System.Boolean useLastDay if set to true , the call preserves last day of the month, 2001/02/28 => 2004/02/29. Returns Type Description System.DateTime Updated date. | Improve this Doc View Source WithYearAndMonth(DateTimeOffset, Int32, Int32) Updates the year and the month of the date. Declaration public static DateTimeOffset WithYearAndMonth(this DateTimeOffset date, int year, int month) Parameters Type Name Description System.DateTimeOffset date The date. System.Int32 year The year. System.Int32 month The month. Returns Type Description System.DateTimeOffset Updated date. | Improve this Doc View Source WithYearAndMonth(DateTimeOffset, Int32, Int32, Boolean) Updates the month and the year of the date. Declaration public static DateTimeOffset WithYearAndMonth(this DateTimeOffset date, int year, int month, bool useLastDay) Parameters Type Name Description System.DateTimeOffset date The date. System.Int32 year The year. System.Int32 month The month. System.Boolean useLastDay if set to true , the call preserves last day of the month, 2001/02/28 => 2004/02/29. Returns Type Description System.DateTimeOffset Updated date."
  },
  "api/main/CodeJam.Collections.html": {
    "href": "api/main/CodeJam.Collections.html",
    "title": "Namespace CodeJam.Collections | CodeJam",
    "keywords": "Namespace CodeJam.Collections Classes Array<T> System.Array type extensions. ArrayExtensions System.Array class extensions. CollectionExtensions Various collections extensions. ComparerBuilder<T> Builds comparer functions and comparers. DictionaryExtensions Extensions for System.Collections.Generic.IDictionary<TKey, TValue> EnumerableExtensions Extensions for System.Collections.Generic.IEnumerable<T> KeyEqualityComparer Provides static methods for creating KeyEqualityComparer<T, TKey> . KeyEqualityComparer<T, TKey> An implementation of the System.Collections.Generic.IEqualityComparer<T> interface for compare values by comparing their extracted key values. LazyDictionary Provides static methods for ILazyDictionary<TKey, TValue> . LazyDictionary<TKey, TValue> Dictionary with lazy values initialization. OwnedCollection Factory methods for the owned collections. OwnedCollection<TOwner, TItem> Collection type that allows to associate collection items with the owner. OwnedCollection<TOwner, TKey, TItem> Keyed collection type that allows to associate collection items with the owner. OwnedCollectionBase<TOwner, TItem> Base collection type that allows to associate collection items with the owner. OwnedCollectionBase<TOwner, TKey, TItem> Base keyed collection type that allows to associate collection items with the owner. QueryableExtensions Extensions for System.Linq.IQueryable<T> Sequence Contains methods for sequence creation. SuffixTree Implementation of the suffix tree with Ukkonen's algorithm See http://stackoverflow.com/questions/9452701/ukkonens-suffix-tree-algorithm-in-plain-english/9513423 and http://www.cise.ufl.edu/~sahni/dsaaj/enrich/c16/suffix.htm SuffixTreeBase Base class for suffix tree algorithm implementation. Structs IndexedItem<T> Represents an element associated with its index in a sequence. Suffix Suffix of the SuffixTree SuffixTreeBase.Node A suffix tree edge combined with the end node Interfaces ILazyDictionary<TKey, TValue> Dictionary with lazy values initialization. Enums DictionaryDuplicate Defines behavior for duplicates in lookup source"
  },
  "api/main/CodeJam.Collections.OwnedCollectionBase-3.html": {
    "href": "api/main/CodeJam.Collections.OwnedCollectionBase-3.html",
    "title": "Class OwnedCollectionBase<TOwner, TKey, TItem> | CodeJam",
    "keywords": "Class OwnedCollectionBase<TOwner, TKey, TItem> Base keyed collection type that allows to associate collection items with the owner. Inheritance System.Object System.Collections.ObjectModel.Collection <TItem> System.Collections.ObjectModel.KeyedCollection <TKey, TItem> OwnedCollectionBase<TOwner, TKey, TItem> OwnedCollection<TOwner, TKey, TItem> Inherited Members System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Contains(TKey) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Remove(TKey) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.ChangeItemKey(TItem, TKey) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.ClearItems() System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.GetKeyForItem(TItem) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.InsertItem(System.Int32, TItem) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.RemoveItem(System.Int32) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.SetItem(System.Int32, TItem) System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Comparer System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Item[TKey] System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.Dictionary System.Collections.ObjectModel.Collection<TItem>.Add(TItem) System.Collections.ObjectModel.Collection<TItem>.Clear() System.Collections.ObjectModel.Collection<TItem>.CopyTo(TItem[], System.Int32) System.Collections.ObjectModel.Collection<TItem>.Contains(TItem) System.Collections.ObjectModel.Collection<TItem>.GetEnumerator() System.Collections.ObjectModel.Collection<TItem>.IndexOf(TItem) System.Collections.ObjectModel.Collection<TItem>.Insert(System.Int32, TItem) System.Collections.ObjectModel.Collection<TItem>.Remove(TItem) System.Collections.ObjectModel.Collection<TItem>.RemoveAt(System.Int32) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IEnumerable.GetEnumerator() System.Collections.ObjectModel.Collection<TItem>.System.Collections.ICollection.CopyTo(System.Array, System.Int32) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.get_Item(System.Int32) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.set_Item(System.Int32, System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Add(System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Contains(System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.IndexOf(System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Insert(System.Int32, System.Object) System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Remove(System.Object) System.Collections.ObjectModel.Collection<TItem>.Count System.Collections.ObjectModel.Collection<TItem>.Items System.Collections.ObjectModel.Collection<TItem>.Item[System.Int32] System.Collections.ObjectModel.Collection<TItem>.System.Collections.Generic.ICollection<TItem>.IsReadOnly System.Collections.ObjectModel.Collection<TItem>.System.Collections.ICollection.IsSynchronized System.Collections.ObjectModel.Collection<TItem>.System.Collections.ICollection.SyncRoot System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.Item[System.Int32] System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.IsReadOnly System.Collections.ObjectModel.Collection<TItem>.System.Collections.IList.IsFixedSize System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Collections Assembly : CodeJam.dll Syntax public abstract class OwnedCollectionBase<TOwner, TKey, TItem> : KeyedCollection<TKey, TItem>, IList<TItem>, ICollection<TItem>, IList, ICollection, IReadOnlyList<TItem>, IReadOnlyCollection<TItem>, IEnumerable<TItem>, IEnumerable where TOwner : class where TItem : class Type Parameters Name Description TOwner The type of the owner. TKey The type of the key. TItem The type of the item. Constructors | Improve this Doc View Source OwnedCollectionBase(TOwner) Initializes a new instance of the OwnedCollection<TOwner, TItem> class. Declaration protected OwnedCollectionBase(TOwner owner) Parameters Type Name Description TOwner owner The owner for the collection. Properties | Improve this Doc View Source Owner Gets owner for the collection. Declaration protected TOwner Owner { get; } Property Value Type Description TOwner The owner for the collection. Methods | Improve this Doc View Source ClearItems() Removes all elements from the System.Collections.ObjectModel.Collection<T> . Clears owner for the items being removed. Declaration protected override void ClearItems() Overrides System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.ClearItems() | Improve this Doc View Source GetKey(TItem) Gets a key for the item. Declaration protected abstract TKey GetKey(TItem item) Parameters Type Name Description TItem item The item. Returns Type Description TKey Key for the item. | Improve this Doc View Source GetKeyForItem(TItem) When implemented in a derived class, extracts the key from the specified element. Declaration protected override sealed TKey GetKeyForItem(TItem item) Parameters Type Name Description TItem item The element from which to extract the key. Returns Type Description TKey The key for the specified element. Overrides System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.GetKeyForItem(TItem) | Improve this Doc View Source GetOwner(TItem) Gets the owner of the item. Declaration protected abstract TOwner GetOwner(TItem item) Parameters Type Name Description TItem item The item. Returns Type Description TOwner Owner of the item. | Improve this Doc View Source InsertItem(Int32, TItem) Inserts an element into the System.Collections.ObjectModel.Collection<T> at the specified index. Sets owner for the items being added. Declaration protected override void InsertItem(int index, TItem item) Parameters Type Name Description System.Int32 index The zero-based index at which item should be inserted. TItem item The object to insert. The value can be null for reference types. Overrides System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.InsertItem(System.Int32, TItem) | Improve this Doc View Source RemoveItem(Int32) Removes the element at the specified index of the System.Collections.ObjectModel.Collection<T> . Clears owner for the item being removed. Declaration protected override void RemoveItem(int index) Parameters Type Name Description System.Int32 index The zero-based index of the element to remove. Overrides System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.RemoveItem(System.Int32) | Improve this Doc View Source SetItem(Int32, TItem) Replaces the element at the specified index. Sets owner for the items being added. Clears owner for the item being removed. Declaration protected override void SetItem(int index, TItem item) Parameters Type Name Description System.Int32 index The zero-based index of the element to replace. TItem item The new value for the element at the specified index. The value can be null for reference types. Overrides System.Collections.ObjectModel.KeyedCollection<TKey, TItem>.SetItem(System.Int32, TItem) | Improve this Doc View Source SetOwner(TItem, TOwner) Sets the owner of the item. Declaration protected abstract void SetOwner(TItem item, TOwner owner) Parameters Type Name Description TItem item The item. TOwner owner The owner of the item. Extension Methods Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Algorithms.EqualRange<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Algorithms.PartitionPoint<T>(IList<T>, Predicate<T>) Algorithms.PartitionPoint<T>(IList<T>, Int32, Predicate<T>) Algorithms.PartitionPoint<T>(IList<T>, Int32, Int32, Predicate<T>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Algorithms.LowerBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Func<TElement, TValue, Int32>) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Func<TElement, TValue, Int32>) Algorithms.UpperBound<TElement, TValue>(IList<TElement>, TValue, Int32, Int32, Func<TElement, TValue, Int32>) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, TSource) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, TAccumulate) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, TResult) EnumerableExtensions.AggregateOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, TSource, TSource>, Func<TSource>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate>) EnumerableExtensions.AggregateOrDefault<TSource, TAccumulate, TResult>(IEnumerable<TSource>, TAccumulate, Func<TAccumulate, TSource, TAccumulate>, Func<TAccumulate, TResult>, Func<TResult>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MinOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>) EnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, IComparer<TSource>, TSource) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, T) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>) EnumerableExtensions.MaxOrDefault<TSource, T>(IEnumerable<TSource>, Func<TSource, T>, IComparer<T>, T) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, DictionaryDuplicate) EnumerableExtensions.ToDictionary<T, TKey, TElement>(IEnumerable<T>, Func<T, TKey>, Func<T, TElement>, IEqualityComparer<TKey>, DictionaryDuplicate) EnumerableExtensions.WithIndex<T>(IEnumerable<T>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, Func<T, T, TResult>) EnumerableExtensions.CombineWithPrevious<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.CombineWithNext<T, TResult>(IEnumerable<T>, T, Func<T, T, TResult>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.GroupWhileEquals<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>) EnumerableExtensions.GroupWhileEquals<T, TItem, TKey>(IEnumerable<T>, Func<T, TKey>, Func<T, TItem>, IEqualityComparer<TKey>) EnumerableExtensions.GroupWhile<T>(IEnumerable<T>, Func<T, T, Boolean>) EnumerableExtensions.Page<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Slice<T>(IEnumerable<T>, Int32, Int32) EnumerableExtensions.Flatten<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TakeLast<T>(IEnumerable<T>, Int32) EnumerableExtensions.Split<T>(IEnumerable<T>, Int32) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MinBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MinByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Byte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Byte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Byte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, SByte>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, SByte>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<SByte>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt16>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt16>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt32>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt32>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Int64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Int64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Int64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, UInt64>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<UInt64>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Single>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Single>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Single>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Double>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Double>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Double>>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Decimal>, TSource) EnumerableExtensions.MaxBy<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>) EnumerableExtensions.MaxByOrDefault<TSource>(IEnumerable<TSource>, Func<TSource, Nullable<Decimal>>, TSource) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>) EnumerableExtensions.TopoSort<T, TKey>(IEnumerable<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.TopoSort<T, TKey>(ICollection<T>, Func<T, IEnumerable<T>>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.TopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.TopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>) EnumerableExtensions.GroupTopoSort<T>(IEnumerable<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.GroupTopoSort<T>(ICollection<T>, Func<T, IEnumerable<T>>, IEqualityComparer<T>) EnumerableExtensions.Union<T>(IEnumerable<T>, T[]) EnumerableExtensions.Concat<T>(IEnumerable<T>, T) EnumerableExtensions.Concat<T>(IEnumerable<T>, T[]) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T) EnumerableExtensions.Prepend<T>(IEnumerable<T>, T[]) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>) EnumerableExtensions.ToHashSet<T>(IEnumerable<T>, IEqualityComparer<T>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>) EnumerableExtensions.ToHashSet<T, TKey>(IEnumerable<T>, Func<T, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.OrderBy<TSource>(IEnumerable<TSource>) EnumerableExtensions.OrderByDescending<TSource>(IEnumerable<TSource>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) EnumerableExtensions.UnionBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T) EnumerableExtensions.FirstOrDefault<T>(IEnumerable<T>, T, Func<T, Boolean>) EnumerableExtensions.AsList<T>(IEnumerable<T>) EnumerableExtensions.AsArray<T>(IEnumerable<T>) EnumerableExtensions.ToStrings<T>(IEnumerable<T>) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsFirst<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource) EnumerableExtensions.IsLast<TSource>(IEnumerable<TSource>, TSource, IEqualityComparer<TSource>) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MinBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MinByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, TSource) EnumerableExtensions.MaxBy<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>) EnumerableExtensions.MaxByOrDefault<TSource, TValue>(IEnumerable<TSource>, Func<TSource, TValue>, IComparer<TValue>, TSource) CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>) CollectionExtensions.NotNullNorEmpty<T>(ICollection<T>) CollectionExtensions.AddRange<T>(ICollection<T>, T[]) CollectionExtensions.AddRange<T>(ICollection<T>, IList<T>) CollectionExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) CompositeRangeExtensions.ToCompositeRange<T, TKey>(IEnumerable<TKey>, Func<TKey, T>, Func<TKey, T>) CompositeRangeExtensions.ToCompositeRange<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeFrom<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T>(IEnumerable<TSource>, Func<TSource, T>) CompositeRangeExtensions.ToCompositeRangeTo<TSource, T, TKey>(IEnumerable<TSource>, Func<TSource, T>, Func<TSource, TKey>) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.Join<T>(IEnumerable<T>, String) StringExtensions.Join<T>(IEnumerable<T>) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Int32, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Int32, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<TSource, TTarget>(IEnumerable<TSource>, Func<TSource, TTarget>, Action<TTarget>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Int32, Action<T>, String) ParallelExtensions.RunInParallel<T>(IEnumerable<T>, Action<T>, String) See Also System.Collections.ObjectModel.KeyedCollection <TKey, TItem>"
  },
  "api/main/CodeJam.ValueOneOf-4.html": {
    "href": "api/main/CodeJam.ValueOneOf-4.html",
    "title": "Struct ValueOneOf<T1, T2, T3, T4> | CodeJam",
    "keywords": "Struct ValueOneOf<T1, T2, T3, T4> Value type tagged union for 4 types. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam Assembly : CodeJam.dll Syntax public struct ValueOneOf<T1, T2, T3, T4> : IOneOf<T1, T2, T3, T4>, IEquatable<ValueOneOf<T1, T2, T3, T4>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 T4 Type of case 4 Properties | Improve this Doc View Source IsCase1 Declaration public bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4>.IsCase2 | Improve this Doc View Source IsCase3 Declaration public bool IsCase3 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4>.IsCase3 | Improve this Doc View Source IsCase4 Declaration public bool IsCase4 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3, T4>.IsCase4 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2, T3, T4> for value of type T1 . Declaration public static ValueOneOf<T1, T2, T3, T4> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4> Value of ValueOneOf<T1, T2, T3, T4> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2, T3, T4> for value of type T2 . Declaration public static ValueOneOf<T1, T2, T3, T4> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4> Value of ValueOneOf<T1, T2, T3, T4> . | Improve this Doc View Source Create(T3) Creates instance of OneOf<T1, T2, T3, T4> for value of type T3 . Declaration public static ValueOneOf<T1, T2, T3, T4> Create(T3 value) Parameters Type Name Description T3 value Value of type T3 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4> Value of ValueOneOf<T1, T2, T3, T4> . | Improve this Doc View Source Create(T4) Creates instance of OneOf<T1, T2, T3, T4> for value of type T4 . Declaration public static ValueOneOf<T1, T2, T3, T4> Create(T4 value) Parameters Type Name Description T4 value Value of type T4 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3, T4> Value of ValueOneOf<T1, T2, T3, T4> . | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>) Declaration public void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action, Action<T4> case4Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action System.Action <T3> case3Action System.Action <T4> case4Action Implements IOneOf<T1, T2, T3, T4>.Do(Action<T1>, Action<T2>, Action<T3>, Action<T4>) | Improve this Doc View Source Equals(ValueOneOf<T1, T2, T3, T4>) Declaration public bool Equals(ValueOneOf<T1, T2, T3, T4> other) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>) Declaration public TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector, Func<T4, TResult> case4Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector System.Func <T3, TResult> case3Selector System.Func <T4, TResult> case4Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2, T3, T4>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>, Func<T4, TResult>) Operators | Improve this Doc View Source Equality(ValueOneOf<T1, T2, T3, T4>, ValueOneOf<T1, T2, T3, T4>) Equality operator. Declaration public static bool operator ==(ValueOneOf<T1, T2, T3, T4> left, ValueOneOf<T1, T2, T3, T4> right) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4> left Left parameter. ValueOneOf <T1, T2, T3, T4> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to ValueOneOf<T1, T2, T3, T4>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4> Instance of ValueOneOf<T1, T2, T3, T4> for value of type T1 . | Improve this Doc View Source Implicit(T2 to ValueOneOf<T1, T2, T3, T4>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4> Instance of ValueOneOf<T1, T2, T3, T4> for value of type T2 . | Improve this Doc View Source Implicit(T3 to ValueOneOf<T1, T2, T3, T4>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4>(T3 value) Parameters Type Name Description T3 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4> Instance of ValueOneOf<T1, T2, T3, T4> for value of type T3 . | Improve this Doc View Source Implicit(T4 to ValueOneOf<T1, T2, T3, T4>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3, T4>(T4 value) Parameters Type Name Description T4 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3, T4> Instance of ValueOneOf<T1, T2, T3, T4> for value of type T4 . | Improve this Doc View Source Inequality(ValueOneOf<T1, T2, T3, T4>, ValueOneOf<T1, T2, T3, T4>) Unequality operator. Declaration public static bool operator !=(ValueOneOf<T1, T2, T3, T4> left, ValueOneOf<T1, T2, T3, T4> right) Parameters Type Name Description ValueOneOf <T1, T2, T3, T4> left Left parameter. ValueOneOf <T1, T2, T3, T4> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.ValueOneOf-3.html": {
    "href": "api/main/CodeJam.ValueOneOf-3.html",
    "title": "Struct ValueOneOf<T1, T2, T3> | CodeJam",
    "keywords": "Struct ValueOneOf<T1, T2, T3> Value type tagged union for 3 types. Inherited Members System.ValueType.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam Assembly : CodeJam.dll Syntax public struct ValueOneOf<T1, T2, T3> : IOneOf<T1, T2, T3>, IEquatable<ValueOneOf<T1, T2, T3>> Type Parameters Name Description T1 Type of case 1 T2 Type of case 2 T3 Type of case 3 Properties | Improve this Doc View Source IsCase1 Declaration public bool IsCase1 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3>.IsCase1 | Improve this Doc View Source IsCase2 Declaration public bool IsCase2 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3>.IsCase2 | Improve this Doc View Source IsCase3 Declaration public bool IsCase3 { get; } Property Value Type Description System.Boolean Implements IOneOf<T1, T2, T3>.IsCase3 Methods | Improve this Doc View Source Create(T1) Creates instance of OneOf<T1, T2, T3> for value of type T1 . Declaration public static ValueOneOf<T1, T2, T3> Create(T1 value) Parameters Type Name Description T1 value Value of type T1 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3> Value of ValueOneOf<T1, T2, T3> . | Improve this Doc View Source Create(T2) Creates instance of OneOf<T1, T2, T3> for value of type T2 . Declaration public static ValueOneOf<T1, T2, T3> Create(T2 value) Parameters Type Name Description T2 value Value of type T2 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3> Value of ValueOneOf<T1, T2, T3> . | Improve this Doc View Source Create(T3) Creates instance of OneOf<T1, T2, T3> for value of type T3 . Declaration public static ValueOneOf<T1, T2, T3> Create(T3 value) Parameters Type Name Description T3 value Value of type T3 to create instance from. Returns Type Description ValueOneOf <T1, T2, T3> Value of ValueOneOf<T1, T2, T3> . | Improve this Doc View Source Do(Action<T1>, Action<T2>, Action<T3>) Declaration public void Do(Action<T1> case1Action, Action<T2> case2Action, Action<T3> case3Action) Parameters Type Name Description System.Action <T1> case1Action System.Action <T2> case2Action System.Action <T3> case3Action Implements IOneOf<T1, T2, T3>.Do(Action<T1>, Action<T2>, Action<T3>) | Improve this Doc View Source Equals(ValueOneOf<T1, T2, T3>) Declaration public bool Equals(ValueOneOf<T1, T2, T3> other) Parameters Type Name Description ValueOneOf <T1, T2, T3> other Returns Type Description System.Boolean Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj Returns Type Description System.Boolean Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Declaration public override int GetHashCode() Returns Type Description System.Int32 Overrides System.ValueType.GetHashCode() | Improve this Doc View Source GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>) Declaration public TResult GetValue<TResult>(Func<T1, TResult> case1Selector, Func<T2, TResult> case2Selector, Func<T3, TResult> case3Selector) Parameters Type Name Description System.Func <T1, TResult> case1Selector System.Func <T2, TResult> case2Selector System.Func <T3, TResult> case3Selector Returns Type Description TResult Type Parameters Name Description TResult Implements IOneOf<T1, T2, T3>.GetValue<TResult>(Func<T1, TResult>, Func<T2, TResult>, Func<T3, TResult>) Operators | Improve this Doc View Source Equality(ValueOneOf<T1, T2, T3>, ValueOneOf<T1, T2, T3>) Equality operator. Declaration public static bool operator ==(ValueOneOf<T1, T2, T3> left, ValueOneOf<T1, T2, T3> right) Parameters Type Name Description ValueOneOf <T1, T2, T3> left Left parameter. ValueOneOf <T1, T2, T3> right Right parameter Returns Type Description System.Boolean true if left equals to right | Improve this Doc View Source Implicit(T1 to ValueOneOf<T1, T2, T3>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3>(T1 value) Parameters Type Name Description T1 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3> Instance of ValueOneOf<T1, T2, T3> for value of type T1 . | Improve this Doc View Source Implicit(T2 to ValueOneOf<T1, T2, T3>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3>(T2 value) Parameters Type Name Description T2 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3> Instance of ValueOneOf<T1, T2, T3> for value of type T2 . | Improve this Doc View Source Implicit(T3 to ValueOneOf<T1, T2, T3>) Implicit cast operator. Declaration public static implicit operator ValueOneOf<T1, T2, T3>(T3 value) Parameters Type Name Description T3 value The parameter. Returns Type Description ValueOneOf <T1, T2, T3> Instance of ValueOneOf<T1, T2, T3> for value of type T3 . | Improve this Doc View Source Inequality(ValueOneOf<T1, T2, T3>, ValueOneOf<T1, T2, T3>) Unequality operator. Declaration public static bool operator !=(ValueOneOf<T1, T2, T3> left, ValueOneOf<T1, T2, T3> right) Parameters Type Name Description ValueOneOf <T1, T2, T3> left Left parameter. ValueOneOf <T1, T2, T3> right Right parameter Returns Type Description System.Boolean true if left not equals to right Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>)"
  },
  "api/main/CodeJam.Strings.StringOrigin.html": {
    "href": "api/main/CodeJam.Strings.StringOrigin.html",
    "title": "Enum StringOrigin | CodeJam",
    "keywords": "Enum StringOrigin String functions relative parameters origin Namespace : CodeJam.Strings Assembly : CodeJam.dll Syntax public enum StringOrigin Fields Name Description Begin Relative to string begin. End Relative to string end. Extension Methods EnumHelper.IsFlagSet<StringOrigin>(StringOrigin) EnumHelper.IsAnyFlagUnset<StringOrigin>(StringOrigin) EnumHelper.IsAnyFlagSet<StringOrigin>(StringOrigin) EnumHelper.IsFlagUnset<StringOrigin>(StringOrigin) EnumHelper.SetFlag<StringOrigin>(StringOrigin) EnumHelper.ClearFlag<StringOrigin>(StringOrigin) EnumHelper.SetFlag<StringOrigin>(StringOrigin, Boolean) NullableHelper.AsNullable<StringOrigin>() RangeExtensions.Contains<T, StringOrigin>(Range<T>) RangeExtensions.StartsAfter<T, StringOrigin>(Range<T>) RangeExtensions.EndsBefore<T, StringOrigin>(Range<T>) RangeExtensions.Contains<T, TKey, StringOrigin>(Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, StringOrigin>(Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, StringOrigin>(Range<T, TKey>) StringExtensions.ToInvariantString<StringOrigin>() StringExtensions.ToInvariantString<StringOrigin>(String)"
  },
  "api/main/CodeJam.Strings.StringExtensions.html": {
    "href": "api/main/CodeJam.Strings.StringExtensions.html",
    "title": "Class StringExtensions | CodeJam",
    "keywords": "Class StringExtensions System.String class extensions. Inheritance System.Object StringExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Strings Assembly : CodeJam.dll Syntax public static class StringExtensions Methods | Improve this Doc View Source FormatWith(String, Object) Replaces one or more format items in a specified string with the string representation of a specified object. Declaration public static string FormatWith(this string format, object arg) Parameters Type Name Description System.String format A composite format string. System.Object arg The object to format. Returns Type Description System.String A copy of format in which any format items are replaced by the string representation of arg . | Improve this Doc View Source FormatWith(String, Object, Object) Replaces the format items in a specified string with the string representation of two specified objects. Declaration public static string FormatWith(this string format, object arg0, object arg1) Parameters Type Name Description System.String format A composite format string. System.Object arg0 The first object to format. System.Object arg1 The second object to format. Returns Type Description System.String A copy of format in which format items are replaced by the string representations of arg0 and arg1 . | Improve this Doc View Source FormatWith(String, Object, Object, Object) Replaces the format items in a specified string with the string representation of three specified objects. Declaration public static string FormatWith(this string format, object arg0, object arg1, object arg2) Parameters Type Name Description System.String format A composite format string. System.Object arg0 The first object to format. System.Object arg1 The second object to format. System.Object arg2 The third object to format. Returns Type Description System.String A copy of format in which the format items have been replaced by the string representations of arg0 , arg1 , and arg2 . | Improve this Doc View Source FormatWith(String, Object[]) Replaces the format items in a specified string with the string representations of corresponding objects in a specified array. Declaration public static string FormatWith(this string format, params object[] args) Parameters Type Name Description System.String format A composite format string. System.Object [] args An object array that contains zero or more objects to format. Returns Type Description System.String A copy of format in which the format items have been replaced by the string representation of the corresponding objects in args | Improve this Doc View Source FromBase64(String) Converts the specified string, which encodes binary data as base-64 digits, to an equivalent byte array. Declaration public static byte[] FromBase64(this string str) Parameters Type Name Description System.String str The string to convert. Returns Type Description System.Byte [] An array of bytes that is equivalent to str . | Improve this Doc View Source IsControl(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a control. Declaration public static bool IsControl(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a control character; otherwise, false . | Improve this Doc View Source IsDigit(String) Indicates whether all characters in a specified string is categorized as a digit. Declaration public static bool IsDigit(this string str) Parameters Type Name Description System.String str A string Returns Type Description System.Boolean true if all character in str is a digit; otherwise, false . | Improve this Doc View Source IsDigit(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a digit. Declaration public static bool IsDigit(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a digit character; otherwise, false . | Improve this Doc View Source IsHighSurrogate(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a highsurrogate. Declaration public static bool IsHighSurrogate(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a highsurrogate character; otherwise, false . | Improve this Doc View Source IsLetter(String) Indicates whether all characters in a specified string is categorized as a letter. Declaration public static bool IsLetter(this string str) Parameters Type Name Description System.String str A string Returns Type Description System.Boolean true if all character in str is a letter; otherwise, false . | Improve this Doc View Source IsLetter(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a letter. Declaration public static bool IsLetter(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a letter character; otherwise, false . | Improve this Doc View Source IsLetterOrDigit(String) Indicates whether all characters in a specified string is categorized as a letterordigit. Declaration public static bool IsLetterOrDigit(this string str) Parameters Type Name Description System.String str A string Returns Type Description System.Boolean true if all character in str is a letterordigit; otherwise, false . | Improve this Doc View Source IsLetterOrDigit(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a letterordigit. Declaration public static bool IsLetterOrDigit(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a letterordigit character; otherwise, false . | Improve this Doc View Source IsLower(String) Indicates whether all characters in a specified string is categorized as a lower. Declaration public static bool IsLower(this string str) Parameters Type Name Description System.String str A string Returns Type Description System.Boolean true if all character in str is a lower; otherwise, false . | Improve this Doc View Source IsLower(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a lower. Declaration public static bool IsLower(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a lower character; otherwise, false . | Improve this Doc View Source IsLowSurrogate(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a lowsurrogate. Declaration public static bool IsLowSurrogate(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a lowsurrogate character; otherwise, false . | Improve this Doc View Source IsNullOrEmpty(String) Infix form of System.String.IsNullOrEmpty(System.String) . Declaration public static bool IsNullOrEmpty(this string str) Parameters Type Name Description System.String str The string. Returns Type Description System.Boolean true if str is null or empty; otherwise, false . | Improve this Doc View Source IsNullOrWhiteSpace(String) Infix form of string.IsNullOrWhiteSpace. Declaration public static bool IsNullOrWhiteSpace(this string str) Parameters Type Name Description System.String str The string. Returns Type Description System.Boolean true if str is null, empty or contains only whitespaces; otherwise false . | Improve this Doc View Source IsNumber(String) Indicates whether all characters in a specified string is categorized as a number. Declaration public static bool IsNumber(this string str) Parameters Type Name Description System.String str A string Returns Type Description System.Boolean true if all character in str is a number; otherwise, false . | Improve this Doc View Source IsNumber(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a number. Declaration public static bool IsNumber(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a number character; otherwise, false . | Improve this Doc View Source IsPunctuation(String) Indicates whether all characters in a specified string is categorized as a punctuation. Declaration public static bool IsPunctuation(this string str) Parameters Type Name Description System.String str A string Returns Type Description System.Boolean true if all character in str is a punctuation; otherwise, false . | Improve this Doc View Source IsPunctuation(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a punctuation. Declaration public static bool IsPunctuation(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a punctuation character; otherwise, false . | Improve this Doc View Source IsSeparator(String) Indicates whether all characters in a specified string is categorized as a separator. Declaration public static bool IsSeparator(this string str) Parameters Type Name Description System.String str A string Returns Type Description System.Boolean true if all character in str is a separator; otherwise, false . | Improve this Doc View Source IsSeparator(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a separator. Declaration public static bool IsSeparator(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a separator character; otherwise, false . | Improve this Doc View Source IsSurrogate(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a surrogate. Declaration public static bool IsSurrogate(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a surrogate character; otherwise, false . | Improve this Doc View Source IsSurrogatePair(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a surrogatepair. Declaration public static bool IsSurrogatePair(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a surrogatepair character; otherwise, false . | Improve this Doc View Source IsSymbol(String) Indicates whether all characters in a specified string is categorized as a symbol. Declaration public static bool IsSymbol(this string str) Parameters Type Name Description System.String str A string Returns Type Description System.Boolean true if all character in str is a symbol; otherwise, false . | Improve this Doc View Source IsSymbol(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a symbol. Declaration public static bool IsSymbol(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a symbol character; otherwise, false . | Improve this Doc View Source IsUpper(String) Indicates whether all characters in a specified string is categorized as a upper. Declaration public static bool IsUpper(this string str) Parameters Type Name Description System.String str A string Returns Type Description System.Boolean true if all character in str is a upper; otherwise, false . | Improve this Doc View Source IsUpper(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a upper. Declaration public static bool IsUpper(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a upper character; otherwise, false . | Improve this Doc View Source IsWhiteSpace(String) Indicates whether all characters in a specified string is categorized as a whitespace. Declaration public static bool IsWhiteSpace(this string str) Parameters Type Name Description System.String str A string Returns Type Description System.Boolean true if all character in str is a whitespace; otherwise, false . | Improve this Doc View Source IsWhiteSpace(String, Int32) Indicates whether the character at the specified position in a specified string is categorized as a whitespace. Declaration public static bool IsWhiteSpace(this string str, int index) Parameters Type Name Description System.String str A string. System.Int32 index The position of the character to evaluate in str . Returns Type Description System.Boolean true if the character at position index in str is a whitespace character; otherwise, false . | Improve this Doc View Source Join(IEnumerable<String>, String) Concatenates the members of a constructed System.Collections.Generic.IEnumerable<T> collection of type System.String , using the specified separator between each member. Declaration public static string Join(this IEnumerable<string> values, string separator) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > values A collection that contains the strings to concatenate. System.String separator The string to use as a separator. separator is included in the returned string only if values has more than one element. Returns Type Description System.String A string that consists of the members of values delimited by the separator string. If values has no members, the method returns System.String.Empty . Remarks Infix form of string.Join(string,IEnumerable{string}). | Improve this Doc View Source Join(String[], String) Concatenates all the elements of a string array, using the specified separator between each element. Declaration public static string Join(this string[] values, string separator) Parameters Type Name Description System.String [] values An array that contains the elements to concatenate. System.String separator The string to use as a separator. separator is included in the returned string only if values has more than one element. Returns Type Description System.String A string that consists of the members of values delimited by the separator string. If values has no members, the method returns System.String.Empty . Remarks Infix form of System.String.Join(System.String,System.String[]) . | Improve this Doc View Source Join<T>(IEnumerable<T>) Concatenates the members of a collection. Declaration public static string Join<T>(this IEnumerable<T> values) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> values A collection that contains the strings to concatenate. Returns Type Description System.String A string that consists of the members of values . If values has no members, the method returns System.String.Empty . Type Parameters Name Description T | Improve this Doc View Source Join<T>(IEnumerable<T>, String) Concatenates the members of a collection, using the specified separator between each member. Declaration public static string Join<T>(this IEnumerable<T> values, string separator) Parameters Type Name Description System.Collections.Generic.IEnumerable <T> values A collection that contains the strings to concatenate. System.String separator The string to use as a separator. separator is included in the returned string only if values has more than one element. Returns Type Description System.String A string that consists of the members of values delimited by the separator string. If values has no members, the method returns System.String.Empty . Type Parameters Name Description T | Improve this Doc View Source Length(String) Returns length of argument, even if argument is null. Declaration public static int Length(this string str) Parameters Type Name Description System.String str The string. Returns Type Description System.Int32 Length of the str or 0, if str is null. | Improve this Doc View Source NotNullNorEmpty(String) Returns true if argument is not null nor empty. Declaration public static bool NotNullNorEmpty(this string str) Parameters Type Name Description System.String str The string. Returns Type Description System.Boolean true if str is not null nor empty; otherwise, false . | Improve this Doc View Source NotNullNorWhiteSpace(String) Returns true if argument is not null nor whitespace. Declaration public static bool NotNullNorWhiteSpace(this string str) Parameters Type Name Description System.String str The string. Returns Type Description System.Boolean true if str is not null, nor empty or contains not only whitespaces; otherwise false . | Improve this Doc View Source Prefix(String, Int32) Retrieves prefix of length length . Declaration public static string Prefix(this string str, int length) Parameters Type Name Description System.String str String to retrieve prefix from. System.Int32 length The number of characters in the substring. Returns Type Description System.String Prefix of specified length, or str itself, if total length less than required. | Improve this Doc View Source Remove(String, String[]) Removes substring from provided strings. Declaration public static string Remove(this string str, params string[] toRemoveStrings) Parameters Type Name Description System.String str String to remove. System.String [] toRemoveStrings Substrings to remove. Returns Type Description System.String New string without provided substrings. | Improve this Doc View Source SplitWithTrim(String, Char[]) Splits source and returns whitespace trimmed parts. Declaration public static IEnumerable<string> SplitWithTrim(this string source, params char[] separators) Parameters Type Name Description System.String source Source string. System.Char [] separators Separator chars Returns Type Description System.Collections.Generic.IEnumerable < System.String > Enumeration of parts. | Improve this Doc View Source Substring(String, StringOrigin, Int32) Retrieves a substring from str . Declaration public static string Substring(this string str, StringOrigin origin, int length) Parameters Type Name Description System.String str String to retrieve substring from. StringOrigin origin Specifies the beginning, or the end as a reference point for offset, using a value of type StringOrigin . System.Int32 length The number of characters in the substring. Returns Type Description System.String A string that is equivalent to the substring of length length that begins at origin in str , or Empty if length of str or length is zero. | Improve this Doc View Source Suffix(String, Int32) Retrieves prefix of length length . Declaration public static string Suffix(this string str, int length) Parameters Type Name Description System.String str String to retrieve suffix from. System.Int32 length The number of characters in the substring. Returns Type Description System.String Suffix of specified length, or str itself, if total length less than required. | Improve this Doc View Source ToBase64(Byte[], Base64FormattingOptions) Converts an array of bytes to its equivalent string representation that is encoded with base-64 digits. A parameter specifies whether to insert line breaks in the return value. Declaration public static string ToBase64(this byte[] data, Base64FormattingOptions options = Base64FormattingOptions.None) Parameters Type Name Description System.Byte [] data an array of bytes. System.Base64FormattingOptions options System.Base64FormattingOptions.InsertLineBreaks to insert a line break every 76 characters, or System.Base64FormattingOptions.None to not insert line breaks. Returns Type Description System.String The string representation in base 64 of the elements in data . | Improve this Doc View Source ToByte(String, NumberStyles, IFormatProvider) Converts the string representation of a number in a specified style and culture-specific format to its System.Byte equivalent. A return value indicates whether the conversion succeeded. Declaration public static byte ? ToByte(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. System.IFormatProvider provider An object that supplies culture-specific formatting information about str . Returns Type Description System.Nullable < System.Byte > When this method returns, contains the System.Byte value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Byte.MinValue or greater than System.Byte.MaxValue . | Improve this Doc View Source ToByteInvariant(String, NumberStyles) Converts the string representation of a number in a specified style and culture-invariant format to its System.Byte equivalent. A return value indicates whether the conversion succeeded. Declaration public static byte ? ToByteInvariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. Returns Type Description System.Nullable < System.Byte > When this method returns, contains the System.Byte value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Byte.MinValue or greater than System.Byte.MaxValue . | Improve this Doc View Source ToBytes(String) Encodes all the characters in the specified string into a sequence of bytes using UTF-8 encoding. Declaration public static byte[] ToBytes(this string str) Parameters Type Name Description System.String str The string containing the characters to encode. Returns Type Description System.Byte [] A byte array containing the results of encoding the specified set of characters. | Improve this Doc View Source ToBytes(String, Encoding) Encodes all the characters in the specified string into a sequence of bytes. Declaration public static byte[] ToBytes(this string str, Encoding encoding) Parameters Type Name Description System.String str The string containing the characters to encode. System.Text.Encoding encoding Encoding to convert. Returns Type Description System.Byte [] A byte array containing the results of encoding the specified set of characters. | Improve this Doc View Source ToByteSizeString(Int32) Returns size in bytes string representation. Declaration public static string ToByteSizeString(this int value) Parameters Type Name Description System.Int32 value Value to represent. Returns Type Description System.String Value as size in bytes | Improve this Doc View Source ToByteSizeString(Int32, IFormatProvider) Returns size in bytes string representation. Declaration public static string ToByteSizeString(this int value, IFormatProvider provider) Parameters Type Name Description System.Int32 value Value to represent. System.IFormatProvider provider Format provider for number part of value Returns Type Description System.String Value as size in bytes | Improve this Doc View Source ToByteSizeString(Int64) Returns size in bytes string representation. Declaration public static string ToByteSizeString(this long value) Parameters Type Name Description System.Int64 value Value to represent. Returns Type Description System.String Value as size in bytes | Improve this Doc View Source ToByteSizeString(Int64, IFormatProvider) Returns size in bytes string representation. Declaration public static string ToByteSizeString(this long value, IFormatProvider provider) Parameters Type Name Description System.Int64 value Value to represent. System.IFormatProvider provider Format provider for number part of value Returns Type Description System.String Value as size in bytes | Improve this Doc View Source ToDateTime(String, DateTimeStyles, IFormatProvider) Converts the string representation of a number in a specified style and culture-specific format to its System.Byte equivalent. A return value indicates whether the conversion succeeded. Declaration public static DateTime? ToDateTime(this string str, DateTimeStyles dateStyle = DateTimeStyles.None, IFormatProvider provider = null) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by dateStyle . System.Globalization.DateTimeStyles dateStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. System.IFormatProvider provider An object that supplies culture-specific formatting information about str . Returns Type Description System.Nullable < System.DateTime > When this method returns, contains the System.Byte value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.DateTime.MinValue or greater than System.DateTime.MaxValue . | Improve this Doc View Source ToDateTimeInvariant(String, DateTimeStyles) Converts the string representation of a number in a specified style and culture-invariant format to its System.DateTime equivalent. A return value indicates whether the conversion succeeded. Declaration public static DateTime? ToDateTimeInvariant(this string str, DateTimeStyles dateStyle = DateTimeStyles.None) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by dateStyle . System.Globalization.DateTimeStyles dateStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. Returns Type Description System.Nullable < System.DateTime > When this method returns, contains the System.DateTime value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.DateTime.MinValue or greater than System.DateTime.MaxValue . | Improve this Doc View Source ToDecimal(String, NumberStyles, IFormatProvider) Converts the string representation of a number in a specified style and culture-specific format to its System.Decimal equivalent. A return value indicates whether the conversion succeeded. Declaration public static decimal ? ToDecimal(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands | NumberStyles.Integer | NumberStyles.Number, IFormatProvider provider = null) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Number. System.IFormatProvider provider An object that supplies culture-specific formatting information about str . Returns Type Description System.Nullable < System.Decimal > When this method returns, contains the System.Decimal value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Decimal.MinValue or greater than System.Decimal.MaxValue . | Improve this Doc View Source ToDecimalInvariant(String, NumberStyles) Converts the string representation of a number in a specified style and culture-invariant format to its System.Decimal equivalent. A return value indicates whether the conversion succeeded. Declaration public static decimal ? ToDecimalInvariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands | NumberStyles.Integer | NumberStyles.Number) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Number. Returns Type Description System.Nullable < System.Decimal > When this method returns, contains the System.Decimal value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Decimal.MinValue or greater than System.Decimal.MaxValue . | Improve this Doc View Source ToDouble(String, NumberStyles, IFormatProvider) Converts the string representation of a number in a specified style and culture-specific format to its System.Double equivalent. A return value indicates whether the conversion succeeded. Declaration public static double ? ToDouble(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.Integer | NumberStyles.Float, IFormatProvider provider = null) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Float. System.IFormatProvider provider An object that supplies culture-specific formatting information about str . Returns Type Description System.Nullable < System.Double > When this method returns, contains the System.Double value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Double.MinValue or greater than System.Double.MaxValue . | Improve this Doc View Source ToDoubleInvariant(String, NumberStyles) Converts the string representation of a number in a specified style and culture-invariant format to its System.Double equivalent. A return value indicates whether the conversion succeeded. Declaration public static double ? ToDoubleInvariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.Integer | NumberStyles.Float) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Float. Returns Type Description System.Nullable < System.Double > When this method returns, contains the System.Double value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Double.MinValue or greater than System.Double.MaxValue . | Improve this Doc View Source ToHexString(Byte[]) Creates hex representation of byte array. Declaration public static string ToHexString(this byte[] data) Parameters Type Name Description System.Byte [] data Byte array. Returns Type Description System.String data represented as a series of hexadecimal representations. Exceptions Type Condition System.ArgumentNullException data is null. | Improve this Doc View Source ToHexString(Byte[], String) Creates hex representation of byte array. Declaration public static string ToHexString(this byte[] data, string byteSeparator) Parameters Type Name Description System.Byte [] data Byte array. System.String byteSeparator Separator between bytes. If null - no separator used. Returns Type Description System.String data represented as a series of hexadecimal representations divided by separator. Exceptions Type Condition System.ArgumentNullException data is null. | Improve this Doc View Source ToInt16(String, NumberStyles, IFormatProvider) Converts the string representation of a number in a specified style and culture-specific format to its System.Int16 equivalent. A return value indicates whether the conversion succeeded. Declaration public static short ? ToInt16(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands | NumberStyles.Integer | NumberStyles.Number, IFormatProvider provider = null) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Number. System.IFormatProvider provider An object that supplies culture-specific formatting information about str . Returns Type Description System.Nullable < System.Int16 > When this method returns, contains the System.Int16 value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Int16.MinValue or greater than System.Int16.MaxValue . | Improve this Doc View Source ToInt16Invariant(String, NumberStyles) Converts the string representation of a number in a specified style and culture-invariant format to its System.Int16 equivalent. A return value indicates whether the conversion succeeded. Declaration public static short ? ToInt16Invariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowTrailingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowThousands | NumberStyles.Integer | NumberStyles.Number) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Number. Returns Type Description System.Nullable < System.Int16 > When this method returns, contains the System.Int16 value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Int16.MinValue or greater than System.Int16.MaxValue . | Improve this Doc View Source ToInt32(String, NumberStyles, IFormatProvider) Converts the string representation of a number in a specified style and culture-specific format to its System.Int32 equivalent. A return value indicates whether the conversion succeeded. Declaration public static int ? ToInt32(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. System.IFormatProvider provider An object that supplies culture-specific formatting information about str . Returns Type Description System.Nullable < System.Int32 > When this method returns, contains the System.Int32 value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Int32.MinValue or greater than System.Int32.MaxValue . | Improve this Doc View Source ToInt32Invariant(String, NumberStyles) Converts the string representation of a number in a specified style and culture-invariant format to its System.Int32 equivalent. A return value indicates whether the conversion succeeded. Declaration public static int ? ToInt32Invariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. Returns Type Description System.Nullable < System.Int32 > When this method returns, contains the System.Int32 value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Int32.MinValue or greater than System.Int32.MaxValue . | Improve this Doc View Source ToInt64(String, NumberStyles, IFormatProvider) Converts the string representation of a number in a specified style and culture-specific format to its System.Int64 equivalent. A return value indicates whether the conversion succeeded. Declaration public static long ? ToInt64(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. System.IFormatProvider provider An object that supplies culture-specific formatting information about str . Returns Type Description System.Nullable < System.Int64 > When this method returns, contains the System.Int64 value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Int64.MinValue or greater than System.Int64.MaxValue . | Improve this Doc View Source ToInt64Invariant(String, NumberStyles) Converts the string representation of a number in a specified style and culture-invariant format to its System.Int64 equivalent. A return value indicates whether the conversion succeeded. Declaration public static long ? ToInt64Invariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. Returns Type Description System.Nullable < System.Int64 > When this method returns, contains the System.Int64 value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Int64.MinValue or greater than System.Int64.MaxValue . | Improve this Doc View Source ToInvariantString<T>(T) Culture invariant version of System.IFormattable.ToString(System.String, System.IFormatProvider) Declaration public static string ToInvariantString<T>(this T s)where T : IFormattable Parameters Type Name Description T s Object to convert. Returns Type Description System.String String representation of s according to rules of invariant culture. Type Parameters Name Description T | Improve this Doc View Source ToInvariantString<T>(T, String) Culture invariant version of System.IFormattable.ToString(System.String, System.IFormatProvider) Declaration public static string ToInvariantString<T>(this T s, string format)where T : IFormattable Parameters Type Name Description T s Object to convert. System.String format Format string Returns Type Description System.String String representation of s according to rules of invariant culture. Type Parameters Name Description T | Improve this Doc View Source ToSByte(String, NumberStyles, IFormatProvider) Converts the string representation of a number in a specified style and culture-specific format to its System.SByte equivalent. A return value indicates whether the conversion succeeded. Declaration public static sbyte ? ToSByte(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. System.IFormatProvider provider An object that supplies culture-specific formatting information about str . Returns Type Description System.Nullable < System.SByte > When this method returns, contains the System.SByte value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.SByte.MinValue or greater than System.SByte.MaxValue . | Improve this Doc View Source ToSByteInvariant(String, NumberStyles) Converts the string representation of a number in a specified style and culture-invariant format to its System.SByte equivalent. A return value indicates whether the conversion succeeded. Declaration public static sbyte ? ToSByteInvariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. Returns Type Description System.Nullable < System.SByte > When this method returns, contains the System.SByte value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.SByte.MinValue or greater than System.SByte.MaxValue . | Improve this Doc View Source ToSingle(String, NumberStyles, IFormatProvider) Converts the string representation of a number in a specified style and culture-specific format to its System.Single equivalent. A return value indicates whether the conversion succeeded. Declaration public static float ? ToSingle(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.Integer | NumberStyles.Float, IFormatProvider provider = null) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Float. System.IFormatProvider provider An object that supplies culture-specific formatting information about str . Returns Type Description System.Nullable < System.Single > When this method returns, contains the System.Single value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Single.MinValue or greater than System.Single.MaxValue . | Improve this Doc View Source ToSingleInvariant(String, NumberStyles) Converts the string representation of a number in a specified style and culture-invariant format to its System.Single equivalent. A return value indicates whether the conversion succeeded. Declaration public static float ? ToSingleInvariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.AllowDecimalPoint | NumberStyles.AllowExponent | NumberStyles.Integer | NumberStyles.Float) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Float. Returns Type Description System.Nullable < System.Single > When this method returns, contains the System.Single value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.Single.MinValue or greater than System.Single.MaxValue . | Improve this Doc View Source ToUInt16(String, NumberStyles, IFormatProvider) Converts the string representation of a number in a specified style and culture-specific format to its System.UInt16 equivalent. A return value indicates whether the conversion succeeded. Declaration public static ushort ? ToUInt16(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. System.IFormatProvider provider An object that supplies culture-specific formatting information about str . Returns Type Description System.Nullable < System.UInt16 > When this method returns, contains the System.UInt16 value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.UInt16.MinValue or greater than System.UInt16.MaxValue . | Improve this Doc View Source ToUInt16Invariant(String, NumberStyles) Converts the string representation of a number in a specified style and culture-invariant format to its System.UInt16 equivalent. A return value indicates whether the conversion succeeded. Declaration public static ushort ? ToUInt16Invariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. Returns Type Description System.Nullable < System.UInt16 > When this method returns, contains the System.UInt16 value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.UInt16.MinValue or greater than System.UInt16.MaxValue . | Improve this Doc View Source ToUInt32(String, NumberStyles, IFormatProvider) Converts the string representation of a number in a specified style and culture-specific format to its System.UInt32 equivalent. A return value indicates whether the conversion succeeded. Declaration public static uint ? ToUInt32(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. System.IFormatProvider provider An object that supplies culture-specific formatting information about str . Returns Type Description System.Nullable < System.UInt32 > When this method returns, contains the System.UInt32 value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.UInt32.MinValue or greater than System.UInt32.MaxValue . | Improve this Doc View Source ToUInt32Invariant(String, NumberStyles) Converts the string representation of a number in a specified style and culture-invariant format to its System.UInt32 equivalent. A return value indicates whether the conversion succeeded. Declaration public static uint ? ToUInt32Invariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. Returns Type Description System.Nullable < System.UInt32 > When this method returns, contains the System.UInt32 value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.UInt32.MinValue or greater than System.UInt32.MaxValue . | Improve this Doc View Source ToUInt64(String, NumberStyles, IFormatProvider) Converts the string representation of a number in a specified style and culture-specific format to its System.UInt64 equivalent. A return value indicates whether the conversion succeeded. Declaration public static ulong ? ToUInt64(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer, IFormatProvider provider = null) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. System.IFormatProvider provider An object that supplies culture-specific formatting information about str . Returns Type Description System.Nullable < System.UInt64 > When this method returns, contains the System.UInt64 value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.UInt64.MinValue or greater than System.UInt64.MaxValue . | Improve this Doc View Source ToUInt64Invariant(String, NumberStyles) Converts the string representation of a number in a specified style and culture-invariant format to its System.UInt64 equivalent. A return value indicates whether the conversion succeeded. Declaration public static ulong ? ToUInt64Invariant(this string str, NumberStyles numberStyle = NumberStyles.AllowLeadingWhite | NumberStyles.AllowTrailingWhite | NumberStyles.AllowLeadingSign | NumberStyles.Integer) Parameters Type Name Description System.String str A string containing a number to convert. The string is interpreted using the style specified by numberStyle . System.Globalization.NumberStyles numberStyle A bitwise combination of enumeration values that indicates the style elements that can be present in str . Default value is Integer. Returns Type Description System.Nullable < System.UInt64 > When this method returns, contains the System.UInt64 value equivalent of the number contained in str , if the conversion succeeded, or null if the conversion failed. The conversion fails if the str parameter is null or String.Empty, is not in a format compliant withstyle, or represents a number less than System.UInt64.MinValue or greater than System.UInt64.MaxValue . | Improve this Doc View Source TrimPrefix(String, String) Trims str prefix if it equals to prefix . Declaration public static string TrimPrefix(this string str, string prefix) Parameters Type Name Description System.String str String to trim. System.String prefix Prefix to trim. Returns Type Description System.String Trimmed str , or original str if prefix not exists. | Improve this Doc View Source TrimPrefix(String, String, IEqualityComparer<String>) Trims str prefix if it equals to prefix . Declaration public static string TrimPrefix(this string str, string prefix, IEqualityComparer<string> comparer) Parameters Type Name Description System.String str String to trim. System.String prefix Prefix to trim. System.Collections.Generic.IEqualityComparer < System.String > comparer Comparer to compare value of prefix. Returns Type Description System.String Trimmed str , or original str if prefix not exists. | Improve this Doc View Source TrimSuffix(String, String) Trims str prefix if it equals to suffix . Declaration public static string TrimSuffix(this string str, string suffix) Parameters Type Name Description System.String str String to trim. System.String suffix Suffix to trim. Returns Type Description System.String Trimmed str , or original str if suffix does not exists. | Improve this Doc View Source TrimSuffix(String, String, IEqualityComparer<String>) Trims str suffix if it equals to suffix . Declaration public static string TrimSuffix(this string str, string suffix, IEqualityComparer<string> comparer) Parameters Type Name Description System.String str String to trim. System.String suffix Suffix to trim. System.Collections.Generic.IEqualityComparer < System.String > comparer Comparer to compare value of suffix. Returns Type Description System.String Trimmed str , or original str if suffix does not exists. | Improve this Doc View Source Unquote(String) Remove one set of leading and trailing double quote characters, if both are present. Declaration public static string Unquote(this string arg) Parameters Type Name Description System.String arg String to unquote. Returns Type Description System.String Unquoted arg , if arg is quoted, or arg itself. | Improve this Doc View Source Unquote(String, out Boolean) Remove one set of leading and trailing double quote characters, if both are present. Declaration public static string Unquote(this string arg, out bool quoted) Parameters Type Name Description System.String arg String to unquote. System.Boolean quoted Set to true, if arg was quoted. Returns Type Description System.String Unquoted arg , if arg is quoted, or arg itself. | Improve this Doc View Source Unquote(String, Char, out Boolean) Remove one set of leading and trailing d quotationChar , if both are present. Declaration public static string Unquote(this string arg, char quotationChar, out bool quoted) Parameters Type Name Description System.String arg String to unquote. System.Char quotationChar Quotation char System.Boolean quoted Set to true, if arg was quoted. Returns Type Description System.String Unquoted arg , if arg is quoted, or arg itself."
  },
  "api/main/CodeJam.Ranges.RangeIntersection-1.html": {
    "href": "api/main/CodeJam.Ranges.RangeIntersection-1.html",
    "title": "Struct RangeIntersection<T> | CodeJam",
    "keywords": "Struct RangeIntersection<T> Describes an intersection of multiple ranges. Inherited Members System.ValueType.Equals(System.Object) System.ValueType.GetHashCode() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax public struct RangeIntersection<T> : IFormattable Type Parameters Name Description T The type of the range values. Properties | Improve this Doc View Source IntersectionRange The common part for all ranges in intersection. Declaration public Range<T> IntersectionRange { get; } Property Value Type Description Range <T> The common part for all ranges in intersection. | Improve this Doc View Source IsEmpty Gets a value indicating whether the intersection does not contain any ranges. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if the intersection does not contain any ranges; otherwise, false . | Improve this Doc View Source IsNotEmpty Gets a value indicating whether the intersection contains any ranges. Declaration public bool IsNotEmpty { get; } Property Value Type Description System.Boolean true if the intersection contains any ranges; otherwise, false . | Improve this Doc View Source Ranges The ranges in the intersection, if any. Declaration public IReadOnlyList<Range<T>> Ranges { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < Range <T>> The ranges in the intersection, if any. Methods | Improve this Doc View Source ToString() Returns string representation of the range intersection. Declaration public override string ToString() Returns Type Description System.String The string representation of the range intersection. Overrides System.ValueType.ToString() | Improve this Doc View Source ToString(IFormatProvider) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format string. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String, IFormatProvider) Returns string representation of the range using the specified format string. If T does not implement System.IFormattable the format string is ignored. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format string. System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. Implements System.IFormattable.ToString(System.String, System.IFormatProvider) Extension Methods NullableHelper.AsNullable<T>(T) RangeExtensions.Contains<T, TRange>(TRange, Range<T>) RangeExtensions.StartsAfter<T, TRange>(TRange, Range<T>) RangeExtensions.EndsBefore<T, TRange>(TRange, Range<T>) RangeExtensions.Contains<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) RangeExtensions.EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) StringExtensions.ToInvariantString<T>(T) StringExtensions.ToInvariantString<T>(T, String) See Also System.IFormattable"
  },
  "api/main/CodeJam.Ranges.RangeExtensions.html": {
    "href": "api/main/CodeJam.Ranges.RangeExtensions.html",
    "title": "Class RangeExtensions | CodeJam",
    "keywords": "Class RangeExtensions Extension methods for Range<T> . Inheritance System.Object RangeExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.Ranges Assembly : CodeJam.dll Syntax public static class RangeExtensions Methods | Improve this Doc View Source Clamp<T>(Range<T>, T) Ensures that the value fits into a range. Declaration public static T Clamp<T>(this Range<T> range, T value) Parameters Type Name Description Range <T> range The range the value will be fitted to. T value The value to be adjusted. Returns Type Description T A new value that fits into a range specified Type Parameters Name Description T The type of the range values. Exceptions Type Condition System.ArgumentException The range is empty or any of its boundaries is exclusive. | Improve this Doc View Source Clamp<T, TKey>(Range<T, TKey>, T) Ensures that the value fits into a range. Declaration public static T Clamp<T, TKey>(this Range<T, TKey> range, T value) Parameters Type Name Description Range <T, TKey> range The range the value will be fitted to. T value The value to be adjusted. Returns Type Description T A new value that fits into a range specified Type Parameters Name Description T The type of the range values. TKey The type of the range key Exceptions Type Condition System.ArgumentException The range is empty or any of its boundaries is exclusive. | Improve this Doc View Source Contains<T>(Range<T>, T) Determines whether the range contains the specified value. Declaration public static bool Contains<T>(this Range<T> range, T value) Parameters Type Name Description Range <T> range The source range. T value The value to check. Returns Type Description System.Boolean true , if the range contains the value. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Contains<T>(Range<T>, T, T) Determines whether the range contains another range. Declaration public static bool Contains<T>(this Range<T> range, T from, T to) Parameters Type Name Description Range <T> range The source range. T from The boundary From value of the range to check. T to The boundary To value of the range to check. Returns Type Description System.Boolean true , if the range contains another range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Contains<T>(Range<T>, RangeBoundaryFrom<T>) Determines whether the range contains the specified range boundary. Declaration public static bool Contains<T>(this Range<T> range, RangeBoundaryFrom<T> other) Parameters Type Name Description Range <T> range The source range. RangeBoundaryFrom <T> other The boundary to check. Returns Type Description System.Boolean true , if the range contains the boundary. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Contains<T>(Range<T>, RangeBoundaryTo<T>) Determines whether the range contains the specified range boundary. Declaration public static bool Contains<T>(this Range<T> range, RangeBoundaryTo<T> other) Parameters Type Name Description Range <T> range The source range. RangeBoundaryTo <T> other The boundary to check. Returns Type Description System.Boolean true , if the range contains the boundary. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Contains<T, TRange>(TRange, Range<T>) Determines whether the range contains another range. Declaration public static bool Contains<T, TRange>(this TRange range, Range<T> other)where TRange : IRange<T> Parameters Type Name Description TRange range The source range. Range <T> other The range to check. Returns Type Description System.Boolean true , if the range contains another range. Type Parameters Name Description T The type of the range values. TRange The type of the range. | Improve this Doc View Source Contains<T, TKey>(Range<T, TKey>, T) Determines whether the range contains the specified value. Declaration public static bool Contains<T, TKey>(this Range<T, TKey> range, T value) Parameters Type Name Description Range <T, TKey> range The source range. T value The value to check. Returns Type Description System.Boolean true , if the range contains the value. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Contains<T, TKey>(Range<T, TKey>, T, T) Determines whether the range contains another range. Declaration public static bool Contains<T, TKey>(this Range<T, TKey> range, T from, T to) Parameters Type Name Description Range <T, TKey> range The source range. T from The boundary From value of the range to check. T to The boundary To value of the range to check. Returns Type Description System.Boolean true , if the range contains another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Contains<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>) Determines whether the range contains the specified range boundary. Declaration public static bool Contains<T, TKey>(this Range<T, TKey> range, RangeBoundaryFrom<T> other) Parameters Type Name Description Range <T, TKey> range The source range. RangeBoundaryFrom <T> other The boundary to check. Returns Type Description System.Boolean true , if the range contains the boundary. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Contains<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>) Determines whether the range contains the specified range boundary. Declaration public static bool Contains<T, TKey>(this Range<T, TKey> range, RangeBoundaryTo<T> other) Parameters Type Name Description Range <T, TKey> range The source range. RangeBoundaryTo <T> other The boundary to check. Returns Type Description System.Boolean true , if the range contains the boundary. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Contains<T, TKey, TRange>(TRange, Range<T, TKey>) Determines whether the range contains another range. Declaration public static bool Contains<T, TKey, TRange>(this TRange range, Range<T, TKey> other)where TRange : IRange<T> Parameters Type Name Description TRange range The source range. Range <T, TKey> other The range to check. Returns Type Description System.Boolean true , if the range contains another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key TRange The type of the range. | Improve this Doc View Source EndsBefore<T>(Range<T>, T) Determines whether the range ends before the value specified. Declaration public static bool EndsBefore<T>(this Range<T> range, T value) Parameters Type Name Description Range <T> range The source range. T value The value to check. Returns Type Description System.Boolean true , if the range ends before the value. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source EndsBefore<T>(Range<T>, RangeBoundaryFrom<T>) Determines whether the range ends before the boundary specified. Declaration public static bool EndsBefore<T>(this Range<T> range, RangeBoundaryFrom<T> other) Parameters Type Name Description Range <T> range The source range. RangeBoundaryFrom <T> other The boundary to check. Returns Type Description System.Boolean true , if the range ends before the boundary. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source EndsBefore<T>(Range<T>, RangeBoundaryTo<T>) Determines whether the range ends before the boundary specified. Declaration public static bool EndsBefore<T>(this Range<T> range, RangeBoundaryTo<T> other) Parameters Type Name Description Range <T> range The source range. RangeBoundaryTo <T> other The boundary to check. Returns Type Description System.Boolean true , if the range ends before the boundary. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source EndsBefore<T, TRange>(TRange, Range<T>) Determines whether the range ends before the range specified. Declaration public static bool EndsBefore<T, TRange>(this TRange range, Range<T> other)where TRange : IRange<T> Parameters Type Name Description TRange range The source range. Range <T> other The range to check. Returns Type Description System.Boolean true , if the range ends before another range. Type Parameters Name Description T The type of the range values. TRange The type of the range. | Improve this Doc View Source EndsBefore<T, TKey>(Range<T, TKey>, T) Determines whether the range ends before the value specified. Declaration public static bool EndsBefore<T, TKey>(this Range<T, TKey> range, T value) Parameters Type Name Description Range <T, TKey> range The source range. T value The value to check. Returns Type Description System.Boolean true , if the range ends before the value. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source EndsBefore<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>) Determines whether the range ends before the boundary specified. Declaration public static bool EndsBefore<T, TKey>(this Range<T, TKey> range, RangeBoundaryFrom<T> other) Parameters Type Name Description Range <T, TKey> range The source range. RangeBoundaryFrom <T> other The boundary to check. Returns Type Description System.Boolean true , if the range ends before the boundary. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source EndsBefore<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>) Determines whether the range ends before the boundary specified. Declaration public static bool EndsBefore<T, TKey>(this Range<T, TKey> range, RangeBoundaryTo<T> other) Parameters Type Name Description Range <T, TKey> range The source range. RangeBoundaryTo <T> other The boundary to check. Returns Type Description System.Boolean true , if the range ends before the boundary. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source EndsBefore<T, TKey, TRange>(TRange, Range<T, TKey>) Determines whether the range ends before the range specified. Declaration public static bool EndsBefore<T, TKey, TRange>(this TRange range, Range<T, TKey> other)where TRange : IRange<T> Parameters Type Name Description TRange range The source range. Range <T, TKey> other The range to check. Returns Type Description System.Boolean true , if the range ends before another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key TRange The type of the range. | Improve this Doc View Source ExtendFrom<T>(Range<T>, T) Extends the range from the left. Declaration public static Range<T> ExtendFrom<T>(this Range<T> range, T from) Parameters Type Name Description Range <T> range The source range. T from A new value From. Returns Type Description Range <T> A range with a new From boundary or the source fange if the new boundary is greater than original. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source ExtendFrom<T>(Range<T>, RangeBoundaryFrom<T>) Extends the range from the left. Declaration public static Range<T> ExtendFrom<T>(this Range<T> range, RangeBoundaryFrom<T> from) Parameters Type Name Description Range <T> range The source range. RangeBoundaryFrom <T> from A new boundary From. Returns Type Description Range <T> A range with a new From boundary or the source fange if the new boundary is greater than original. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source ExtendFrom<T, TKey>(Range<T, TKey>, T) Extends the range from the left. Declaration public static Range<T, TKey> ExtendFrom<T, TKey>(this Range<T, TKey> range, T from) Parameters Type Name Description Range <T, TKey> range The source range. T from A new value From. Returns Type Description Range <T, TKey> A range with a new From boundary or the source fange if the new boundary is greater than original. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source ExtendFrom<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>) Extends the range from the left. Declaration public static Range<T, TKey> ExtendFrom<T, TKey>(this Range<T, TKey> range, RangeBoundaryFrom<T> from) Parameters Type Name Description Range <T, TKey> range The source range. RangeBoundaryFrom <T> from A new boundary From. Returns Type Description Range <T, TKey> A range with a new From boundary or the source fange if the new boundary is greater than original. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source ExtendTo<T>(Range<T>, T) Extends the range from the right. Declaration public static Range<T> ExtendTo<T>(this Range<T> range, T to) Parameters Type Name Description Range <T> range The source range. T to A new value To. Returns Type Description Range <T> A range with a new To boundary or the source fange if the new boundary is less than original. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source ExtendTo<T>(Range<T>, RangeBoundaryTo<T>) Extends the range from the right. Declaration public static Range<T> ExtendTo<T>(this Range<T> range, RangeBoundaryTo<T> to) Parameters Type Name Description Range <T> range The source range. RangeBoundaryTo <T> to A new boundary To. Returns Type Description Range <T> A range with a new To boundary or the source fange if the new boundary is less than original. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source ExtendTo<T, TKey>(Range<T, TKey>, T) Extends the range from the right. Declaration public static Range<T, TKey> ExtendTo<T, TKey>(this Range<T, TKey> range, T to) Parameters Type Name Description Range <T, TKey> range The source range. T to A new value To. Returns Type Description Range <T, TKey> A range with a new To boundary or the source fange if the new boundary is less than original. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source ExtendTo<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>) Extends the range from the right. Declaration public static Range<T, TKey> ExtendTo<T, TKey>(this Range<T, TKey> range, RangeBoundaryTo<T> to) Parameters Type Name Description Range <T, TKey> range The source range. RangeBoundaryTo <T> to A new boundary To. Returns Type Description Range <T, TKey> A range with a new To boundary or the source fange if the new boundary is less than original. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source HasIntersection<T>(Range<T>, T, T) Determines whether the range has intersection with another range. Declaration public static bool HasIntersection<T>(this Range<T> range, T from, T to) Parameters Type Name Description Range <T> range The source range. T from The boundary From value of the range to check. T to The boundary To value of the range to check. Returns Type Description System.Boolean true , if the range has intersection with another range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source HasIntersection<T, TKey>(Range<T, TKey>, T, T) Determines whether the range has intersection with another range. Declaration public static bool HasIntersection<T, TKey>(this Range<T, TKey> range, T from, T to) Parameters Type Name Description Range <T, TKey> range The source range. T from The boundary From value of the range to check. T to The boundary To value of the range to check. Returns Type Description System.Boolean true , if the range has intersection with another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source HasIntersection<T, TRange>(Range<T>, TRange) Determines whether the range has intersection with another range. Declaration public static bool HasIntersection<T, TRange>(this Range<T> range, TRange other)where TRange : IRange<T> Parameters Type Name Description Range <T> range The source range. TRange other The range to check. Returns Type Description System.Boolean true , if the range has intersection with another range. Type Parameters Name Description T The type of the range values. TRange The type of another range. | Improve this Doc View Source HasIntersection<T, TKey, TRange>(Range<T, TKey>, TRange) Determines whether the range has intersection with another range. Declaration public static bool HasIntersection<T, TKey, TRange>(this Range<T, TKey> range, TRange other)where TRange : IRange<T> Parameters Type Name Description Range <T, TKey> range The source range. TRange other The range to check. Returns Type Description System.Boolean true , if the range has intersection with another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key TRange The type of another range. | Improve this Doc View Source Intersect<T>(Range<T>, T, T) Returns an intersection of the the ranges. Declaration public static Range<T> Intersect<T>(this Range<T> range, T from, T to) Parameters Type Name Description Range <T> range The source range. T from The boundary From value. T to The boundary To value. Returns Type Description Range <T> An intersection range or empty range if the ranges do not intersect. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Intersect<T, TKey>(Range<T, TKey>, T, T) Returns an intersection of the the ranges. Declaration public static Range<T, TKey> Intersect<T, TKey>(this Range<T, TKey> range, T from, T to) Parameters Type Name Description Range <T, TKey> range The source range. T from The boundary From value. T to The boundary To value. Returns Type Description Range <T, TKey> An intersection range or empty range if the ranges do not intersect. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Intersect<T, TRange>(Range<T>, TRange) Returns an intersection of the the ranges. Declaration public static Range<T> Intersect<T, TRange>(this Range<T> range, TRange other)where TRange : IRange<T> Parameters Type Name Description Range <T> range The source range. TRange other The range to intersect with. Returns Type Description Range <T> An intersection range or empty range if the ranges do not intersect. Type Parameters Name Description T The type of the range values. TRange The type of another range. | Improve this Doc View Source Intersect<T, TKey, TRange>(Range<T, TKey>, TRange) Returns an intersection of the the ranges. Declaration public static Range<T, TKey> Intersect<T, TKey, TRange>(this Range<T, TKey> range, TRange other)where TRange : IRange<T> Parameters Type Name Description Range <T, TKey> range The source range. TRange other The range to intersect with. Returns Type Description Range <T, TKey> An intersection range or empty range if the ranges do not intersect. Type Parameters Name Description T The type of the range values. TKey The type of the range key TRange The type of another range. | Improve this Doc View Source MakeExclusive<T>(Range<T>, Func<T, T>, Func<T, T>) Replaces inclusive boundaries with exclusive ones with the values from the selector callbacks Declaration public static Range<T> MakeExclusive<T>(this Range<T> range, Func<T, T> fromValueSelector, Func<T, T> toValueSelector) Parameters Type Name Description Range <T> range The source range. System.Func <T, T> fromValueSelector Callback to obtain a new value for the From boundary. Used if the boundary is inclusive. System.Func <T, T> toValueSelector Callback to obtain a new value for the To boundary. Used if the boundary is inclusive. Returns Type Description Range <T> A range with exclusive boundaries. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source MakeExclusive<T, TKey>(Range<T, TKey>, Func<T, T>, Func<T, T>) Replaces inclusive boundaries with exclusive ones with the values from the selector callbacks Declaration public static Range<T, TKey> MakeExclusive<T, TKey>(this Range<T, TKey> range, Func<T, T> fromValueSelector, Func<T, T> toValueSelector) Parameters Type Name Description Range <T, TKey> range The source range. System.Func <T, T> fromValueSelector Callback to obtain a new value for the From boundary. Used if the boundary is inclusive. System.Func <T, T> toValueSelector Callback to obtain a new value for the To boundary. Used if the boundary is inclusive. Returns Type Description Range <T, TKey> A range with exclusive boundaries. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source MakeInclusive<T>(Range<T>, Func<T, T>, Func<T, T>) Replaces exclusive boundaries with inclusive ones with the values from the selector callbacks Declaration public static Range<T> MakeInclusive<T>(this Range<T> range, Func<T, T> fromValueSelector, Func<T, T> toValueSelector) Parameters Type Name Description Range <T> range The source range. System.Func <T, T> fromValueSelector Callback to obtain a new value for the From boundary. Used if the boundary is exclusive. System.Func <T, T> toValueSelector Callback to obtain a new value for the To boundary. Used if the boundary is exclusive. Returns Type Description Range <T> A range with inclusive boundaries. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source MakeInclusive<T, TKey>(Range<T, TKey>, Func<T, T>, Func<T, T>) Replaces exclusive boundaries with inclusive ones with the values from the selector callbacks Declaration public static Range<T, TKey> MakeInclusive<T, TKey>(this Range<T, TKey> range, Func<T, T> fromValueSelector, Func<T, T> toValueSelector) Parameters Type Name Description Range <T, TKey> range The source range. System.Func <T, T> fromValueSelector Callback to obtain a new value for the From boundary. Used if the boundary is exclusive. System.Func <T, T> toValueSelector Callback to obtain a new value for the To boundary. Used if the boundary is exclusive. Returns Type Description Range <T, TKey> A range with inclusive boundaries. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source StartsAfter<T>(Range<T>, T) Determines whether the range starts after the value specified. Declaration public static bool StartsAfter<T>(this Range<T> range, T value) Parameters Type Name Description Range <T> range The source range. T value The value to check. Returns Type Description System.Boolean true , if the range starts after the value. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source StartsAfter<T>(Range<T>, RangeBoundaryFrom<T>) Determines whether the range starts after the boundary specified. Declaration public static bool StartsAfter<T>(this Range<T> range, RangeBoundaryFrom<T> other) Parameters Type Name Description Range <T> range The source range. RangeBoundaryFrom <T> other The boundary to check. Returns Type Description System.Boolean true , if the range starts after the boundary. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source StartsAfter<T>(Range<T>, RangeBoundaryTo<T>) Determines whether the range starts after the boundary specified. Declaration public static bool StartsAfter<T>(this Range<T> range, RangeBoundaryTo<T> other) Parameters Type Name Description Range <T> range The source range. RangeBoundaryTo <T> other The boundary to check. Returns Type Description System.Boolean true , if the range starts after the boundary. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source StartsAfter<T, TRange>(TRange, Range<T>) Determines whether the range starts after the range specified. Declaration public static bool StartsAfter<T, TRange>(this TRange range, Range<T> other)where TRange : IRange<T> Parameters Type Name Description TRange range The source range. Range <T> other The range to check. Returns Type Description System.Boolean true , if the range starts after another range. Type Parameters Name Description T The type of the range values. TRange The type of the range. | Improve this Doc View Source StartsAfter<T, TKey>(Range<T, TKey>, T) Determines whether the range starts after the value specified. Declaration public static bool StartsAfter<T, TKey>(this Range<T, TKey> range, T value) Parameters Type Name Description Range <T, TKey> range The source range. T value The value to check. Returns Type Description System.Boolean true , if the range starts after the value. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source StartsAfter<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>) Determines whether the range starts after the boundary specified. Declaration public static bool StartsAfter<T, TKey>(this Range<T, TKey> range, RangeBoundaryFrom<T> other) Parameters Type Name Description Range <T, TKey> range The source range. RangeBoundaryFrom <T> other The boundary to check. Returns Type Description System.Boolean true , if the range starts after the boundary. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source StartsAfter<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>) Determines whether the range starts after the boundary specified. Declaration public static bool StartsAfter<T, TKey>(this Range<T, TKey> range, RangeBoundaryTo<T> other) Parameters Type Name Description Range <T, TKey> range The source range. RangeBoundaryTo <T> other The boundary to check. Returns Type Description System.Boolean true , if the range starts after the boundary. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source StartsAfter<T, TKey, TRange>(TRange, Range<T, TKey>) Determines whether the range starts after the range specified. Declaration public static bool StartsAfter<T, TKey, TRange>(this TRange range, Range<T, TKey> other)where TRange : IRange<T> Parameters Type Name Description TRange range The source range. Range <T, TKey> other The range to check. Returns Type Description System.Boolean true , if the range starts after another range. Type Parameters Name Description T The type of the range values. TKey The type of the range key TRange The type of the range. | Improve this Doc View Source TrimFrom<T>(Range<T>, T) Trims the range from the left. Declaration public static Range<T> TrimFrom<T>(this Range<T> range, T from) Parameters Type Name Description Range <T> range The source range. T from A new value From. Returns Type Description Range <T> A range with a new From boundary or the source fange if the new boundary is less than original or an empty range if the new From boundary is greater than To boundary of the range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source TrimFrom<T>(Range<T>, RangeBoundaryFrom<T>) Trims the range from the left. Declaration public static Range<T> TrimFrom<T>(this Range<T> range, RangeBoundaryFrom<T> from) Parameters Type Name Description Range <T> range The source range. RangeBoundaryFrom <T> from A new boundary From. Returns Type Description Range <T> A range with a new From boundary or the source fange if the new boundary is less than original or an empty range if the new From boundary is greater than To boundary of the range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source TrimFrom<T, TKey>(Range<T, TKey>, T) Trims the range from the left. Declaration public static Range<T, TKey> TrimFrom<T, TKey>(this Range<T, TKey> range, T from) Parameters Type Name Description Range <T, TKey> range The source range. T from A new value From. Returns Type Description Range <T, TKey> A range with a new From boundary or the source fange if the new boundary is less than original or an empty range if the new From boundary is greater than To boundary of the range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source TrimFrom<T, TKey>(Range<T, TKey>, RangeBoundaryFrom<T>) Trims the range from the left. Declaration public static Range<T, TKey> TrimFrom<T, TKey>(this Range<T, TKey> range, RangeBoundaryFrom<T> from) Parameters Type Name Description Range <T, TKey> range The source range. RangeBoundaryFrom <T> from A new boundary From. Returns Type Description Range <T, TKey> A range with a new From boundary or the source fange if the new boundary is less than original or an empty range if the new From boundary is greater than To boundary of the range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source TrimTo<T>(Range<T>, T) Trims the range from the right. Declaration public static Range<T> TrimTo<T>(this Range<T> range, T to) Parameters Type Name Description Range <T> range The source range. T to A new value To. Returns Type Description Range <T> A range with a new To boundary or the source fange if the new boundary is greater than original or an empty range if the new To boundary is less than From boundary of the range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source TrimTo<T>(Range<T>, RangeBoundaryTo<T>) Trims the range from the right. Declaration public static Range<T> TrimTo<T>(this Range<T> range, RangeBoundaryTo<T> to) Parameters Type Name Description Range <T> range The source range. RangeBoundaryTo <T> to A new boundary To. Returns Type Description Range <T> A range with a new To boundary or the source fange if the new boundary is greater than original or an empty range if the new To boundary is less than From boundary of the range. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source TrimTo<T, TKey>(Range<T, TKey>, T) Trims the range from the right. Declaration public static Range<T, TKey> TrimTo<T, TKey>(this Range<T, TKey> range, T to) Parameters Type Name Description Range <T, TKey> range The source range. T to A new value To. Returns Type Description Range <T, TKey> A range with a new To boundary or the source fange if the new boundary is greater than original or an empty range if the new To boundary is less than From boundary of the range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source TrimTo<T, TKey>(Range<T, TKey>, RangeBoundaryTo<T>) Trims the range from the right. Declaration public static Range<T, TKey> TrimTo<T, TKey>(this Range<T, TKey> range, RangeBoundaryTo<T> to) Parameters Type Name Description Range <T, TKey> range The source range. RangeBoundaryTo <T> to A new boundary To. Returns Type Description Range <T, TKey> A range with a new To boundary or the source fange if the new boundary is greater than original or an empty range if the new To boundary is less than From boundary of the range. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Union<T>(Range<T>, T, T) Returns a union range containing both of the ranges. Declaration public static Range<T> Union<T>(this Range<T> range, T from, T to) Parameters Type Name Description Range <T> range The source range. T from The boundary From value. T to The boundary To value. Returns Type Description Range <T> A union range containing both of the ranges. Type Parameters Name Description T The type of the range values. | Improve this Doc View Source Union<T, TKey>(Range<T, TKey>, T, T) Returns a union range containing both of the ranges. Declaration public static Range<T, TKey> Union<T, TKey>(this Range<T, TKey> range, T from, T to) Parameters Type Name Description Range <T, TKey> range The source range. T from The boundary From value. T to The boundary To value. Returns Type Description Range <T, TKey> A union range containing both of the ranges. Type Parameters Name Description T The type of the range values. TKey The type of the range key | Improve this Doc View Source Union<T, TRange>(Range<T>, TRange) Returns a union range containing both of the ranges. Declaration public static Range<T> Union<T, TRange>(this Range<T> range, TRange other)where TRange : IRange<T> Parameters Type Name Description Range <T> range The source range. TRange other The range to union with. Returns Type Description Range <T> A union range containing both of the ranges. Type Parameters Name Description T The type of the range values. TRange The type of another range. | Improve this Doc View Source Union<T, TKey, TRange>(Range<T, TKey>, TRange) Returns a union range containing both of the ranges. Declaration public static Range<T, TKey> Union<T, TKey, TRange>(this Range<T, TKey> range, TRange other)where TRange : IRange<T> Parameters Type Name Description Range <T, TKey> range The source range. TRange other The range to union with. Returns Type Description Range <T, TKey> A union range containing both of the ranges. Type Parameters Name Description T The type of the range values. TKey The type of the range key TRange The type of another range. | Improve this Doc View Source WithKey<T, TKey2>(Range<T>, TKey2) Creates a new range with the key specified. Declaration public static Range<T, TKey2> WithKey<T, TKey2>(this Range<T> range, TKey2 key) Parameters Type Name Description Range <T> range The source range. TKey2 key The value of the new key. Returns Type Description Range <T, TKey2> A new range with the key specified. Type Parameters Name Description T The type of the range values. TKey2 The type of the new key. | Improve this Doc View Source WithKey<T, TKey, TKey2>(Range<T, TKey>, TKey2) Creates a new range with the key specified. Declaration public static Range<T, TKey2> WithKey<T, TKey, TKey2>(this Range<T, TKey> range, TKey2 key) Parameters Type Name Description Range <T, TKey> range The source range. TKey2 key The value of the new key. Returns Type Description Range <T, TKey2> A new range with the key specified. Type Parameters Name Description T The type of the range values. TKey The type of the range key TKey2 The type of the new key. | Improve this Doc View Source WithoutKey<T, TKey>(Range<T, TKey>) Creates a range without a range key. Declaration public static Range<T> WithoutKey<T, TKey>(this Range<T, TKey> range) Parameters Type Name Description Range <T, TKey> range The range to remove key from. Returns Type Description Range <T> A new range without a key. Type Parameters Name Description T The type of the range values. TKey The type of the key. | Improve this Doc View Source WithValues<T, T2>(Range<T>, Func<T, T2>) Updates the values of the boundaries of the range. Declaration public static Range<T2> WithValues<T, T2>(this Range<T> range, Func<T, T2> newValueSelector) Parameters Type Name Description Range <T> range The source range. System.Func <T, T2> newValueSelector Callback to obtain a new value for the boundaries. Used if boundary has a value. Returns Type Description Range <T2> A range with new values. Type Parameters Name Description T The type of the range values. T2 The type of new range values. | Improve this Doc View Source WithValues<T, T2>(Range<T>, Func<T, T2>, Func<T, T2>) Updates the values of the boundaries of the range. Declaration public static Range<T2> WithValues<T, T2>(this Range<T> range, Func<T, T2> fromValueSelector, Func<T, T2> toValueSelector) Parameters Type Name Description Range <T> range The source range. System.Func <T, T2> fromValueSelector Callback to obtain a new value for the From boundary. Used if boundary has a value. System.Func <T, T2> toValueSelector Callback to obtain a new value for the To boundary. Used if boundary has a value. Returns Type Description Range <T2> A range with new values. Type Parameters Name Description T The type of the range values. T2 The type of new range values. | Improve this Doc View Source WithValues<T, T2, TKey>(Range<T, TKey>, Func<T, T2>) Updates the values of the boundaries of the range. Declaration public static Range<T2, TKey> WithValues<T, T2, TKey>(this Range<T, TKey> range, Func<T, T2> newValueSelector) Parameters Type Name Description Range <T, TKey> range The source range. System.Func <T, T2> newValueSelector Callback to obtain a new value for the boundaries. Used if boundary has a value. Returns Type Description Range <T2, TKey> A range with new values. Type Parameters Name Description T The type of the range values. T2 The type of new range values. TKey The type of the key. | Improve this Doc View Source WithValues<T, T2, TKey>(Range<T, TKey>, Func<T, T2>, Func<T, T2>) Updates the values of the boundaries of the range. Declaration public static Range<T2, TKey> WithValues<T, T2, TKey>(this Range<T, TKey> range, Func<T, T2> fromValueSelector, Func<T, T2> toValueSelector) Parameters Type Name Description Range <T, TKey> range The source range. System.Func <T, T2> fromValueSelector Callback to obtain a new value for the From boundary. Used if boundary has a value. System.Func <T, T2> toValueSelector Callback to obtain a new value for the To boundary. Used if boundary has a value. Returns Type Description Range <T2, TKey> A range with new values. Type Parameters Name Description T The type of the range values. T2 The type of new range values. TKey The type of the key."
  },
  "api/main/CodeJam.Option.html": {
    "href": "api/main/CodeJam.Option.html",
    "title": "Class Option | CodeJam",
    "keywords": "Class Option Methods to work with Option Inheritance System.Object Option Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam Assembly : CodeJam.dll Syntax public static class Option Methods | Improve this Doc View Source Do<T>(IOption<T>, Action<IOption<T>>, Action) Calls someAction if option has value, and noneAction otherwise. Declaration public static void Do<T>(this IOption<T> option, Action<IOption<T>> someAction, Action noneAction) Parameters Type Name Description IOption <T> option Option instance to match. System.Action < IOption <T>> someAction Action if value exists. System.Action noneAction Action if no value. Type Parameters Name Description T Type of value | Improve this Doc View Source GetValueOrDefault<T>(IOption<T>, T) Returns value of option , or defaultValue if option hasn't it. Declaration public static T GetValueOrDefault<T>(this IOption<T> option, T defaultValue = null) Parameters Type Name Description IOption <T> option Option instance. T defaultValue Default value. Returns Type Description T Value, or defaultValue if option has no value. Type Parameters Name Description T Type of value | Improve this Doc View Source GetValueOrDefault<T, TResult>(IOption<T>, Func<IOption<T>, TResult>, Func<TResult>) Calls someSelector if option has value, and noneSelector otherwise. Declaration public static TResult GetValueOrDefault<T, TResult>(this IOption<T> option, Func<IOption<T>, TResult> someSelector, Func<TResult> noneSelector) Parameters Type Name Description IOption <T> option Option instance to match. System.Func < IOption <T>, TResult> someSelector Function if value exists. System.Func <TResult> noneSelector Function if no value. Returns Type Description TResult Result of matched function Type Parameters Name Description T Type of value TResult Type of result | Improve this Doc View Source None<T>() Returns instance of Option without value. Declaration public static Option<T> None<T>() Returns Type Description Option <T> Instance without value. Type Parameters Name Description T Type of value. Remarks None value is singleton. | Improve this Doc View Source Some<T>(T) Creates instance of Option with specified value. Declaration public static Option<T> Some<T>(T value) Parameters Type Name Description T value Value Returns Type Description Option <T> Instance of Option . Type Parameters Name Description T Type of value | Improve this Doc View Source SomeHasValue<T>(T) Creates instance of Option with specified value, if value not null. Declaration public static Option<T> SomeHasValue<T>(T value)where T : class Parameters Type Name Description T value Value Returns Type Description Option <T> Instance of Option with value , if value not null, or instance without value. Type Parameters Name Description T Type of value | Improve this Doc View Source SomeHasValue<T>(Nullable<T>) Creates instance of Option with specified value, if value has value. Declaration public static Option<T> SomeHasValue<T>(T? value)where T : struct Parameters Type Name Description System.Nullable <T> value Value Returns Type Description Option <T> Instance of Option with value , if value has value, or instance without value. Type Parameters Name Description T Type of value | Improve this Doc View Source With<T, TResult>(Option<T>, Func<T, TResult>) Converts option value to another option with selectFunc . Declaration public static Option<TResult> With<T, TResult>(this Option<T> option, Func<T, TResult> selectFunc) Parameters Type Name Description Option <T> option Option instance to match. System.Func <T, TResult> selectFunc Function to map value Returns Type Description Option <TResult> Converted by selectFunc value, or option with no value, if option has no value. Type Parameters Name Description T Type of value TResult Type of result | Improve this Doc View Source With<T, TResult>(Option<T>, Func<T, TResult>, TResult) Converts option value to another option with selectFunc . Declaration public static Option<TResult> With<T, TResult>(this Option<T> option, Func<T, TResult> selectFunc, TResult defaultValue) Parameters Type Name Description Option <T> option Option instance to match. System.Func <T, TResult> selectFunc Function to map value TResult defaultValue Default value. Returns Type Description Option <TResult> Converted by selectFunc value, or option with defaultValue , if option has no value. Type Parameters Name Description T Type of value TResult Type of result | Improve this Doc View Source With<T, TResult>(Option<T>, Func<T, TResult>, Func<TResult>) Converts option value to another option with selectFunc . Declaration public static Option<TResult> With<T, TResult>(this Option<T> option, Func<T, TResult> selectFunc, Func<TResult> defaultFunc) Parameters Type Name Description Option <T> option Option instance to match. System.Func <T, TResult> selectFunc Function to map value System.Func <TResult> defaultFunc Function to return default value. Returns Type Description Option <TResult> Converted by selectFunc value, or option with value returned by defaultFunc , if option has no value. Type Parameters Name Description T Type of value TResult Type of result"
  },
  "api/perftests/CodeJam.PerfTests.Configs.CompetitionCheckMode.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.CompetitionCheckMode.html",
    "title": "Class CompetitionCheckMode | CodeJam",
    "keywords": "Class CompetitionCheckMode Competition validation parameters class. Inheritance System.Object BenchmarkDotNet.Characteristics.CharacteristicObject BenchmarkDotNet.Characteristics.CharacteristicObject < CompetitionCheckMode > CompetitionCheckMode Inherited Members BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionCheckMode>.Apply(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionCheckMode>.Apply(BenchmarkDotNet.Characteristics.CharacteristicObject[]) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionCheckMode>.ApplyAndFreeze(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionCheckMode>.ApplyAndFreeze(BenchmarkDotNet.Characteristics.CharacteristicObject[]) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionCheckMode>.Freeze() BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionCheckMode>.UnfreezeCopy() BenchmarkDotNet.Characteristics.CharacteristicObject.IdCharacteristic BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveId(BenchmarkDotNet.Characteristics.CharacteristicObject, System.String) BenchmarkDotNet.Characteristics.CharacteristicObject.AssertNotFrozen() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsRoot() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsNonFrozenRoot() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsAssignable(BenchmarkDotNet.Characteristics.Characteristic, System.Object) BenchmarkDotNet.Characteristics.CharacteristicObject.GetCharacteristicsWithValues() BenchmarkDotNet.Characteristics.CharacteristicObject.HasValue(BenchmarkDotNet.Characteristics.Characteristic) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue<T>(BenchmarkDotNet.Characteristics.Characteristic<T>, BenchmarkDotNet.Characteristics.IResolver) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue(BenchmarkDotNet.Characteristics.Characteristic, BenchmarkDotNet.Characteristics.IResolver) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue<T>(BenchmarkDotNet.Characteristics.Characteristic<T>, T) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue(BenchmarkDotNet.Characteristics.Characteristic, System.Object) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValueAsNullable<T>(BenchmarkDotNet.Characteristics.Characteristic<T>) BenchmarkDotNet.Characteristics.CharacteristicObject.ApplyCore(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject.FreezeCore() BenchmarkDotNet.Characteristics.CharacteristicObject.UnfreezeCopyCore() BenchmarkDotNet.Characteristics.CharacteristicObject.ToString() BenchmarkDotNet.Characteristics.CharacteristicObject.Owner BenchmarkDotNet.Characteristics.CharacteristicObject.OwnerOrSelf BenchmarkDotNet.Characteristics.CharacteristicObject.Frozen BenchmarkDotNet.Characteristics.CharacteristicObject.IsPropertyBag BenchmarkDotNet.Characteristics.CharacteristicObject.HasChanges BenchmarkDotNet.Characteristics.CharacteristicObject.Id System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public sealed class CompetitionCheckMode : CharacteristicObject<CompetitionCheckMode> Fields | Improve this Doc View Source CheckMetricsCharacteristic Check metric limits characteristic. Enabled by default. Declaration public static readonly Characteristic<bool> CheckMetricsCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source LongRunningBenchmarkLimitCharacteristic Timing limit to detect long-running benchmarks characteristic. Default is 500 ms. Declaration public static readonly Characteristic<TimeSpan> LongRunningBenchmarkLimitCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.TimeSpan > | Improve this Doc View Source RerunsIfCheckFailedCharacteristic Maximum count of retries performed if metric limits check failed characteristic. Default is 3. Declaration public static readonly Characteristic<int> RerunsIfCheckFailedCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Int32 > | Improve this Doc View Source TooFastBenchmarkLimitCharacteristic Timing limit to detect too fast benchmarks characteristic. Default is 1000 ns. Declaration public static readonly Characteristic<TimeSpan> TooFastBenchmarkLimitCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.TimeSpan > Properties | Improve this Doc View Source CheckMetrics Check metric limits. Enabled by default. Declaration public bool CheckMetrics { get; set; } Property Value Type Description System.Boolean true if metric limits should be checked. | Improve this Doc View Source LongRunningBenchmarkLimit Timing limit to detect long-running benchmarks. Default is 500 ms. Declaration public TimeSpan LongRunningBenchmarkLimit { get; set; } Property Value Type Description System.TimeSpan The timing limit to detect long-running benchmarks. | Improve this Doc View Source RerunsIfValidationFailed Maximum count of retries performed if metric limits check failed. Default is 3. Set this to zero to disable retries and fail on first run. Set this to non-zero positive value to detect case when metric limits are too tight and the benchmark fails occasionally. Declaration public int RerunsIfValidationFailed { get; set; } Property Value Type Description System.Int32 Maximum count of retries performed if the validation failed. | Improve this Doc View Source TooFastBenchmarkLimit Timing limit to detect too fast benchmarks. Default is 1000 ns. Declaration public TimeSpan TooFastBenchmarkLimit { get; set; } Property Value Type Description System.TimeSpan The timing limit to detect too fast benchmarks. See Also BenchmarkDotNet.Characteristics.CharacteristicObject <T>"
  },
  "api/perftests/CodeJam.PerfTests.Running.Core.CompetitionState.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Core.CompetitionState.html",
    "title": "Class CompetitionState | CodeJam",
    "keywords": "Class CompetitionState The class holding the state of the competition. Inheritance System.Object CompetitionState Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Core Assembly : CodeJam.PerfTests.dll Syntax public sealed class CompetitionState Constructors | Improve this Doc View Source CompetitionState() Initializes a new instance of the CompetitionState class. Declaration public CompetitionState() Properties | Improve this Doc View Source BenchmarkType The type of the benchmark. Declaration public Type BenchmarkType { get; } Property Value Type Description System.Type The type of the benchmark. | Improve this Doc View Source Completed The competition was completed. Declaration public bool Completed { get; } Property Value Type Description System.Boolean true if the competition was completed. | Improve this Doc View Source CompletedSuccessfully The competition completed without warnings and errors. Declaration public bool CompletedSuccessfully { get; } Property Value Type Description System.Boolean true if the competition completed without warnings and errors. | Improve this Doc View Source Config Config for the competition. Declaration public ICompetitionConfig Config { get; } Property Value Type Description ICompetitionConfig The config. | Improve this Doc View Source Elapsed Time elapsed since start of the competition. Declaration public TimeSpan Elapsed { get; } Property Value Type Description System.TimeSpan Time elapsed since start of the competition. | Improve this Doc View Source HasCriticalErrorsInRun There's a critical-severity messages for the current run. Declaration public bool HasCriticalErrorsInRun { get; } Property Value Type Description System.Boolean true if there's a critical-severity messages for the current run. | Improve this Doc View Source HasTestErrorsInRun There's a error-severity messages for the current run. Declaration public bool HasTestErrorsInRun { get; } Property Value Type Description System.Boolean true if there's a error-severity messages for the current run. | Improve this Doc View Source HighestMessageSeverity The highest message severity for entire competition. Declaration public MessageSeverity HighestMessageSeverity { get; } Property Value Type Description MessageSeverity The highest message severity for entire competition. | Improve this Doc View Source HighestMessageSeverityInRun The highest message severity for the run. Declaration public MessageSeverity HighestMessageSeverityInRun { get; } Property Value Type Description MessageSeverity The highest message severity for the run. | Improve this Doc View Source IsFirstRun The competition is performing a first run.. Declaration public bool IsFirstRun { get; } Property Value Type Description System.Boolean true if the competition is performing first run. | Improve this Doc View Source LastRunSummary The summary for the last completed run. Is null if the current run is not completed. Can be null if the run was completed with errors. Declaration public Summary LastRunSummary { get; } Property Value Type Description BenchmarkDotNet.Reports.Summary The summary for the last completed run or null if the run failed. | Improve this Doc View Source Logger The logger for the competition. Declaration public ILogger Logger { get; } Property Value Type Description BenchmarkDotNet.Loggers.ILogger The logger. | Improve this Doc View Source LooksLikeLastRun The competition has no additional runs requested or the count of runs is out of limit or there are critical errors in the run. Declaration public bool LooksLikeLastRun { get; } Property Value Type Description System.Boolean true if the run is about to finish. | Improve this Doc View Source Options Competition options. Declaration public CompetitionOptions Options { get; } Property Value Type Description CompetitionOptions Competition options. | Improve this Doc View Source RunLimitExceeded The count of runs is out of limit. Declaration public bool RunLimitExceeded { get; } Property Value Type Description System.Boolean true if count of runs is out of limit. | Improve this Doc View Source RunNumber The number of the current run. Declaration public int RunNumber { get; } Property Value Type Description System.Int32 The number of the current run. | Improve this Doc View Source RunsLeft Expected count of runs left. Declaration public int RunsLeft { get; } Property Value Type Description System.Int32 Expected count of runs left. | Improve this Doc View Source SummaryFromAllRuns List of summaries from all runs. Declaration public IReadOnlyList<Summary> SummaryFromAllRuns { get; } Property Value Type Description System.Collections.Generic.IReadOnlyList < BenchmarkDotNet.Reports.Summary > The list of summaries from all runs. Methods | Improve this Doc View Source GetMessages() Returns all messages for the competition. Declaration public IMessage[] GetMessages() Returns Type Description IMessage [] All messages for the competition | Improve this Doc View Source RequestReruns(Int32, String) Request additional runs for the competition. Declaration public void RequestReruns(int additionalRunsCount, string explanationMessage) Parameters Type Name Description System.Int32 additionalRunsCount Count of additional runs. System.String explanationMessage The explanation message for therequest | Improve this Doc View Source WriteMessage(MessageSource, MessageSeverity, String, String) Adds a message for the competition. Declaration public void WriteMessage(MessageSource messageSource, MessageSeverity messageSeverity, string message, string hint = null) Parameters Type Name Description MessageSource messageSource Source of the message. MessageSeverity messageSeverity Severity of the message. System.String message Text of the message. System.String hint Hints for the message. Extension Methods CompetitionCoreHelpers.WriteExceptionMessage(CompetitionState, MessageSource, MessageSeverity, String, Exception)"
  },
  "api/perftests/CodeJam.PerfTests.Running.Core.ConsoleCompetitionRunner.ConsoleHostLogger.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Core.ConsoleCompetitionRunner.ConsoleHostLogger.html",
    "title": "Class ConsoleCompetitionRunner.ConsoleHostLogger | CodeJam",
    "keywords": "Class ConsoleCompetitionRunner.ConsoleHostLogger Host logger implementation Inheritance System.Object FilteringLogger CompetitionRunnerBase.HostLogger ConsoleCompetitionRunner.ConsoleHostLogger Inherited Members FilteringLogger.LogVerbosePrefix FilteringLogger.LogInfoPrefix FilteringLogger.LogImportantInfoPrefix FilteringLogger.LogImportantAreaStart FilteringLogger.LogImportantAreaEnd FilteringLogger.BeginLogImportant(IConfig) FilteringLogger.WrappedLogger FilteringLogger.LogFilter FilteringLogger.ShouldWrite(LogKind) FilteringLogger.PreprocessLine(String) FilteringLogger.WriteLine() FilteringLogger.WriteLine(LogKind, String) FilteringLogger.Write(LogKind, String) FilteringLogger.IFlushableLogger.Flush() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Core Assembly : CodeJam.PerfTests.dll Syntax protected class ConsoleHostLogger : CompetitionRunnerBase.HostLogger, IFlushableLogger, ILogger Constructors | Improve this Doc View Source ConsoleHostLogger(LogFilter) Initializes a new instance of the ConsoleCompetitionRunner.ConsoleHostLogger class. Declaration public ConsoleHostLogger(LogFilter logMode) Parameters Type Name Description LogFilter logMode Host logging mode. Extension Methods LoggerHelpers.WriteSeparatorLine(ILogger) LoggerHelpers.WriteSeparatorLine(ILogger, String) LoggerHelpers.WriteSeparatorLine(ILogger, String, Boolean) CompetitionCoreHelpers.WriteVerboseHint(ILogger, String) CompetitionCoreHelpers.WriteVerbose(ILogger, String)"
  },
  "api/perftests/BenchmarkDotNet.Configs.html": {
    "href": "api/perftests/BenchmarkDotNet.Configs.html",
    "title": "Namespace BenchmarkDotNet.Configs | CodeJam",
    "keywords": "Namespace BenchmarkDotNet.Configs Classes ReadOnlyConfig Wrapper class for readonly config."
  },
  "api/perftests/BenchmarkDotNet.Helpers.AttributeValue-1.html": {
    "href": "api/perftests/BenchmarkDotNet.Helpers.AttributeValue-1.html",
    "title": "Class AttributeValue<T> | CodeJam",
    "keywords": "Class AttributeValue<T> Helper type for value provider attributes such as BenchmarkDotNet.Configs.IConfigSource . Inheritance System.Object AttributeValue<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : BenchmarkDotNet.Helpers Assembly : CodeJam.PerfTests.dll Syntax public sealed class AttributeValue<T> where T : class Type Parameters Name Description T Type of value. It's re Use interface if possible. Constructors | Improve this Doc View Source AttributeValue(Func<T>) Initializes a new instance of the AttributeValue<T> class. Declaration public AttributeValue(Func<T> valueFactory) Parameters Type Name Description System.Func <T> valueFactory The value factory. Exceptions Type Condition System.ArgumentNullException valueFactory is null . | Improve this Doc View Source AttributeValue(Type, String) Initializes a new instance of the AttributeValue<T> class. Declaration public AttributeValue(Type valueType, string argName) Parameters Type Name Description System.Type valueType Type of the value. Should have a public parameterless constructor. System.String argName Name of the argument. Passed to ArgumentException if arg validation failed. Exceptions Type Condition System.ArgumentNullException valueType is null . System.ArgumentException valueType does not implement T . Properties | Improve this Doc View Source Value The value provided by the attribute. Declaration public T Value { get; } Property Value Type Description T The value provided by the attribute."
  },
  "api/perftests/CodeJam.PerfTests.Analysers.Analysis.html": {
    "href": "api/perftests/CodeJam.PerfTests.Analysers.Analysis.html",
    "title": "Class Analysis | CodeJam",
    "keywords": "Class Analysis Helper class to trace competition analysis. Inheritance System.Object Analysis ResultAnalysis Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Analysers Assembly : CodeJam.PerfTests.dll Syntax public class Analysis : IMessageLogger Constructors | Improve this Doc View Source Analysis(IConfig) Initializes a new instance of the Analysis class. Declaration public Analysis(IConfig config) Parameters Type Name Description BenchmarkDotNet.Configs.IConfig config The config. | Improve this Doc View Source Analysis(IConfig, MessageSource) Initializes a new instance of the Analysis class. Declaration public Analysis(IConfig config, MessageSource messageSource) Parameters Type Name Description BenchmarkDotNet.Configs.IConfig config The config. MessageSource messageSource Source for the messages. Properties | Improve this Doc View Source Config Config for the competition. Declaration public ICompetitionConfig Config { get; } Property Value Type Description ICompetitionConfig The config. | Improve this Doc View Source Logger Gets logger (can be used for direct log output). Declaration public ILogger Logger { get; } Property Value Type Description BenchmarkDotNet.Loggers.ILogger The logger. Implements IMessageLogger.Logger | Improve this Doc View Source MessageSource Source for the messages. Declaration public MessageSource MessageSource { get; } Property Value Type Description MessageSource Source for the messages. | Improve this Doc View Source Options Competition options. Declaration public CompetitionOptions Options { get; } Property Value Type Description CompetitionOptions Competition options. | Improve this Doc View Source RunState The state of the competition. Declaration public CompetitionState RunState { get; } Property Value Type Description CompetitionState The state of the competition. | Improve this Doc View Source SafeToContinue Analysis has no execution or setup errors so far and can be safely performed. Declaration public bool SafeToContinue { get; } Property Value Type Description System.Boolean true if analysis has no errors; otherwise, false . Methods | Improve this Doc View Source AddTestErrorConclusion(Target, String, BenchmarkReport) Reports test error conclusion. Declaration public virtual void AddTestErrorConclusion(Target target, string message, BenchmarkReport report = null) Parameters Type Name Description BenchmarkDotNet.Running.Target target Target the message applies for. System.String message Message text. BenchmarkDotNet.Reports.BenchmarkReport report The report the message belongs to. | Improve this Doc View Source AddTestErrorConclusion(String, BenchmarkReport) Reports test error conclusion. Declaration public virtual void AddTestErrorConclusion(string message, BenchmarkReport report = null) Parameters Type Name Description System.String message Message text. BenchmarkDotNet.Reports.BenchmarkReport report The report the message belongs to. | Improve this Doc View Source AddWarningConclusion(Target, String, String, BenchmarkReport) Reports analyser warning conclusion. Declaration public virtual void AddWarningConclusion(Target target, string message, string hint, BenchmarkReport report = null) Parameters Type Name Description BenchmarkDotNet.Running.Target target Target the message applies for. System.String message Message text. System.String hint Hint how to fix the warning. BenchmarkDotNet.Reports.BenchmarkReport report The report the message belongs to. | Improve this Doc View Source AddWarningConclusion(String, String, BenchmarkReport) Reports analyser warning conclusion. Declaration public virtual void AddWarningConclusion(string message, string hint, BenchmarkReport report = null) Parameters Type Name Description System.String message Message text. System.String hint Hint how to fix the warning. BenchmarkDotNet.Reports.BenchmarkReport report The report the message belongs to. | Improve this Doc View Source WriteMessage(MessageSeverity, String, String) Adds a message for the competition. Declaration public void WriteMessage(MessageSeverity messageSeverity, string message, string hint = null) Parameters Type Name Description MessageSeverity messageSeverity Severity of the message. System.String message Text of the message. System.String hint Hints for the message. Implements IMessageLogger.WriteMessage(MessageSeverity, String, String) Extension Methods CompetitionCoreHelpers.WriteMessage(IMessageLogger, MessageSeverity, Target, String, String) CompetitionCoreHelpers.WriteExceptionMessage(IMessageLogger, MessageSeverity, String, Exception) CompetitionCoreHelpers.WriteExceptionMessage(IMessageLogger, MessageSeverity, Target, String, Exception) CompetitionCoreHelpers.WriteExecutionErrorMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteExecutionErrorMessage(IMessageLogger, Target, String, String) CompetitionCoreHelpers.WriteSetupErrorMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteSetupErrorMessage(IMessageLogger, Target, String, String) CompetitionCoreHelpers.WriteTestErrorMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteTestErrorMessage(IMessageLogger, Target, String, String) CompetitionCoreHelpers.WriteWarningMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteWarningMessage(IMessageLogger, Target, String, String) CompetitionCoreHelpers.WriteInfoMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteInfoMessage(IMessageLogger, Target, String, String)"
  },
  "api/perftests/CodeJam.PerfTests.Analysers.CompetitionMetricValue.html": {
    "href": "api/perftests/CodeJam.PerfTests.Analysers.CompetitionMetricValue.html",
    "title": "Class CompetitionMetricValue | CodeJam",
    "keywords": "Class CompetitionMetricValue The competition metric value. Inheritance System.Object CompetitionMetricValue Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Analysers Assembly : CodeJam.PerfTests.dll Syntax public class CompetitionMetricValue Constructors | Improve this Doc View Source CompetitionMetricValue(MetricInfo) Initializes empty new instance of the CompetitionMetricValue class. Declaration public CompetitionMetricValue(MetricInfo metric) Parameters Type Name Description MetricInfo metric The metric information. | Improve this Doc View Source CompetitionMetricValue(MetricInfo, MetricRange, MetricUnit) Initializes a new instance of the CompetitionMetricValue class. Declaration public CompetitionMetricValue(MetricInfo metric, MetricRange valuesRange, MetricUnit displayMetricUnit) Parameters Type Name Description MetricInfo metric The metric information. MetricRange valuesRange The metric values range. MetricUnit displayMetricUnit The preferred metric unit for the values range. Properties | Improve this Doc View Source DisplayMetricUnit Gets preferred metric unit for the values range. Declaration public MetricUnit DisplayMetricUnit { get; } Property Value Type Description MetricUnit The preferred metric unit for the values range. | Improve this Doc View Source HasUnsavedChanges The metric value is updated but was not saved. Declaration public bool HasUnsavedChanges { get; } Property Value Type Description System.Boolean true if the metric value has unsaved changes; otherwise, false . | Improve this Doc View Source Metric Gets the metric. Declaration public MetricInfo Metric { get; } Property Value Type Description MetricInfo The metric. | Improve this Doc View Source ValuesRange Gets metric values range. Declaration public MetricRange ValuesRange { get; } Property Value Type Description MetricRange The metric values range. Methods | Improve this Doc View Source MarkAsSaved() Marks value as saved (sets the HasUnsavedChanges to false ). Declaration public void MarkAsSaved() | Improve this Doc View Source ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() | Improve this Doc View Source UnionWith(CompetitionMetricValue, Boolean) Combines metric value with specified one. Declaration public bool UnionWith(CompetitionMetricValue other, bool forceMetricUnitUpdate) Parameters Type Name Description CompetitionMetricValue other The metric value to merge. System.Boolean forceMetricUnitUpdate If set to true existing DisplayMetricUnit is updated even if it is not empty. Returns Type Description System.Boolean true if was updated."
  },
  "api/perftests/CodeJam.PerfTests.CompetitionBaselineAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionBaselineAttribute.html",
    "title": "Class CompetitionBaselineAttribute | CodeJam",
    "keywords": "Class CompetitionBaselineAttribute Attribute for baseline competition benchmark. Inheritance System.Object System.Attribute BenchmarkDotNet.Attributes.BenchmarkAttribute CompetitionBenchmarkAttribute CompetitionBaselineAttribute Inherited Members CompetitionBenchmarkAttribute.DoesNotCompete CompetitionBenchmarkAttribute.Min CompetitionBenchmarkAttribute.Max CompetitionBenchmarkAttribute.UnitOfMeasurement CompetitionBenchmarkAttribute.IStoredMetricValue.MetricAttributeType BenchmarkDotNet.Attributes.BenchmarkAttribute.Description BenchmarkDotNet.Attributes.BenchmarkAttribute.Baseline BenchmarkDotNet.Attributes.BenchmarkAttribute.OperationsPerInvoke System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)] public class CompetitionBaselineAttribute : CompetitionBenchmarkAttribute, _Attribute, IMetricAttribute<CompetitionBenchmarkAttribute.ValuesProvider>, IStoredMetricValue Constructors | Improve this Doc View Source CompetitionBaselineAttribute() Constructor for baseline competition benchmark attribute. Declaration public CompetitionBaselineAttribute() See Also BenchmarkDotNet.Attributes.BenchmarkAttribute"
  },
  "api/perftests/CodeJam.PerfTests.CompetitionBenchmarkAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionBenchmarkAttribute.html",
    "title": "Class CompetitionBenchmarkAttribute | CodeJam",
    "keywords": "Class CompetitionBenchmarkAttribute Attribute for competition benchmark. Inheritance System.Object System.Attribute BenchmarkDotNet.Attributes.BenchmarkAttribute CompetitionBenchmarkAttribute CompetitionBaselineAttribute Inherited Members BenchmarkDotNet.Attributes.BenchmarkAttribute.Description BenchmarkDotNet.Attributes.BenchmarkAttribute.Baseline BenchmarkDotNet.Attributes.BenchmarkAttribute.OperationsPerInvoke System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax [AttributeUsage(AttributeTargets.Method, Inherited = false, AllowMultiple = false)] [MetricInfo(\"Time\", MetricSingleValueMode.FromZeroToMax, DisplayName = \"Scaled\", MetricColumns = MetricValueColumns.Mean | MetricValueColumns.StdDev | MetricValueColumns.ValueAndStdDev | MetricValueColumns.Default)] public class CompetitionBenchmarkAttribute : BenchmarkAttribute, _Attribute, IMetricAttribute<CompetitionBenchmarkAttribute.ValuesProvider>, IStoredMetricValue Constructors | Improve this Doc View Source CompetitionBenchmarkAttribute() Marks the competition benchmark. Declaration public CompetitionBenchmarkAttribute() | Improve this Doc View Source CompetitionBenchmarkAttribute(Double) Marks the competition benchmark. Declaration public CompetitionBenchmarkAttribute(double max) Parameters Type Name Description System.Double max The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially). | Improve this Doc View Source CompetitionBenchmarkAttribute(Double, Double) Marks the competition benchmark. Declaration public CompetitionBenchmarkAttribute(double min, double max) Parameters Type Name Description System.Double min The minimum value. The System.Double.NaN marks the value as unset but updateable during the annotation. The System.Double.NegativeInfinity should be used if value is negative infinity (ignored, essentially). System.Double max The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially). Properties | Improve this Doc View Source DoesNotCompete Exclude the benchmark from competition. Declaration public bool DoesNotCompete { get; set; } Property Value Type Description System.Boolean true if the benchmark does not take part in competition and should not be validated. | Improve this Doc View Source Max Maximum value. Declaration public double Max { get; } Property Value Type Description System.Double The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially). IMPORTANT: If the UnitOfMeasurement is not null both Min and Max values are scaled. Use the MetricValueHelpers to normalize them. Implements IStoredMetricValue.Max | Improve this Doc View Source Min Minimum value. Declaration public double Min { get; } Property Value Type Description System.Double The minimum value. The System.Double.NaN marks the value as unset but updateable during the annotation. The System.Double.NegativeInfinity returned if value is negative infinity (ignored, essentially). IMPORTANT: If the UnitOfMeasurement is not null both Min and Max values are scaled. Use the MetricValueHelpers to normalize them. Implements IStoredMetricValue.Min | Improve this Doc View Source UnitOfMeasurement The value that represents measurement unit for the metric value. Declaration public Enum UnitOfMeasurement { get; set; } Property Value Type Description System.Enum The value that represents measurement unit for the metric value. Implements IStoredMetricValue.UnitOfMeasurement Explicit Interface Implementations | Improve this Doc View Source IStoredMetricValue.MetricAttributeType Gets the type of the attribute used for metric annotation. Declaration Type IStoredMetricValue.MetricAttributeType { get; } Returns Type Description System.Type The type of the attribute used for metric annotation. Implements IStoredMetricValue.MetricAttributeType See Also BenchmarkDotNet.Attributes.BenchmarkAttribute"
  },
  "api/perftests/CodeJam.PerfTests.Running.Messages.MessageSeverity.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Messages.MessageSeverity.html",
    "title": "Enum MessageSeverity | CodeJam",
    "keywords": "Enum MessageSeverity Severity of the message. Namespace : CodeJam.PerfTests.Running.Messages Assembly : CodeJam.PerfTests.dll Syntax public enum MessageSeverity Fields Name Description ExecutionError Test execution failed. Informational Informational message. SetupError Test is not set up correctly. TestError Test assertion failed message. Verbose Verbose message (default). Warning Warning message. Extension Methods CompetitionCoreHelpers.IsCriticalError() CompetitionCoreHelpers.IsTestErrorOrHigher() CompetitionCoreHelpers.IsWarningOrHigher()"
  },
  "api/perftests/CodeJam.PerfTests.Running.Messages.MessageSource.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Messages.MessageSource.html",
    "title": "Enum MessageSource | CodeJam",
    "keywords": "Enum MessageSource Source of the message. Namespace : CodeJam.PerfTests.Running.Messages Assembly : CodeJam.PerfTests.dll Syntax public enum MessageSource Fields Name Description Analyser The message is reported by analyser. Diagnoser The message is reported by diagnoser. Exporter The message is reported by exporter. Runner The message is reported by benchmark runner. Unknown The origin of the message is unknown. Validator The message is reported by validator."
  },
  "api/perftests/BenchmarkDotNet.Helpers.BenchmarkHelpers.html": {
    "href": "api/perftests/BenchmarkDotNet.Helpers.BenchmarkHelpers.html",
    "title": "Class BenchmarkHelpers | CodeJam",
    "keywords": "Class BenchmarkHelpers Helper methods for benchmark infrastructure. Inheritance System.Object BenchmarkHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : BenchmarkDotNet.Helpers Assembly : CodeJam.PerfTests.dll Syntax public static class BenchmarkHelpers Methods | Improve this Doc View Source AsReadOnly(IConfig) Creates read-only wrapper for the config. Declaration public static IConfig AsReadOnly(this IConfig config) Parameters Type Name Description BenchmarkDotNet.Configs.IConfig config The config to wrap. Returns Type Description BenchmarkDotNet.Configs.IConfig Read-only wrapper for the config. | Improve this Doc View Source DeterminesBehavior(Characteristic, Boolean) Determines whether the characteristic has influence on job execution. Declaration public static bool DeterminesBehavior(this Characteristic characteristic, bool includeIgnoreOnApply = false) Parameters Type Name Description BenchmarkDotNet.Characteristics.Characteristic characteristic The characteristic. System.Boolean includeIgnoreOnApply Include ignorable. Returns Type Description System.Boolean true if the characteristic has influence on job execution. | Improve this Doc View Source GetBenchmarkTypes(Assembly) Returns benchmark types from the assembly. Declaration public static Type[] GetBenchmarkTypes(Assembly assembly) Parameters Type Name Description System.Reflection.Assembly assembly The assembly to get benchmarks from. Returns Type Description System.Type [] Benchmark types from the assembly | Improve this Doc View Source GetExecutionOrderBenchmarks(Summary) Returns benchmarks for the summary sorted by execution order. Declaration public static IEnumerable<Benchmark> GetExecutionOrderBenchmarks(this Summary summary) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary Summary for the run. Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Running.Benchmark > Benchmarks for the summary. | Improve this Doc View Source GetSummaryOrderBenchmarks(Summary) Returns benchmarks for the summary sorted by display order. Declaration public static IEnumerable<Benchmark> GetSummaryOrderBenchmarks(this Summary summary) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary Summary for the run. Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Running.Benchmark > Benchmarks for the summary. | Improve this Doc View Source SetAffinity(Process, IntPtr, ILogger) Changes the cpu affinity of the process. Declaration public static bool SetAffinity(this Process process, IntPtr processorAffinity, ILogger logger) Parameters Type Name Description System.Diagnostics.Process process The target process. System.IntPtr processorAffinity The processor affinity. BenchmarkDotNet.Loggers.ILogger logger The logger. Returns Type Description System.Boolean | Improve this Doc View Source SetPriority(Process, ProcessPriorityClass, ILogger) Changes the priority of the process. Declaration public static bool SetPriority(this Process process, ProcessPriorityClass priority, ILogger logger) Parameters Type Name Description System.Diagnostics.Process process The target process. System.Diagnostics.ProcessPriorityClass priority The priority. BenchmarkDotNet.Loggers.ILogger logger The logger. Returns Type Description System.Boolean | Improve this Doc View Source SetPriority(Thread, ThreadPriority, ILogger) Changes the priority of the thread. Declaration public static bool SetPriority(this Thread thread, ThreadPriority priority, ILogger logger) Parameters Type Name Description System.Threading.Thread thread The target thread. System.Threading.ThreadPriority priority The priority. BenchmarkDotNet.Loggers.ILogger logger The logger. Returns Type Description System.Boolean | Improve this Doc View Source SetupHighestPriorityScope(Nullable<IntPtr>, ILogger) Sets highest possible priority and Changes the cpu affinity of the process. Declaration public static IDisposable SetupHighestPriorityScope(IntPtr? processorAffinity, ILogger logger) Parameters Type Name Description System.Nullable < System.IntPtr > processorAffinity The processor affinity. BenchmarkDotNet.Loggers.ILogger logger The logger. Returns Type Description System.IDisposable | Improve this Doc View Source TotalNanoseconds(TimeSpan) Gets the value of the current TimeSpan structure expressed in nanoseconds. Declaration public static double TotalNanoseconds(this TimeSpan timeSpan) Parameters Type Name Description System.TimeSpan timeSpan The timespan. Returns Type Description System.Double The total number of nanoseconds represented by this instance. | Improve this Doc View Source TryGetBaseline(Summary, Benchmark) Returns the baseline for the benchmark. Declaration public static Benchmark TryGetBaseline(this Summary summary, Benchmark benchmark) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary Summary for the run. BenchmarkDotNet.Running.Benchmark benchmark The benchmark. Returns Type Description BenchmarkDotNet.Running.Benchmark Baseline for the benchmark"
  },
  "api/perftests/BenchmarkDotNet.Helpers.html": {
    "href": "api/perftests/BenchmarkDotNet.Helpers.html",
    "title": "Namespace BenchmarkDotNet.Helpers | CodeJam",
    "keywords": "Namespace BenchmarkDotNet.Helpers Classes AttributeValue<T> Helper type for value provider attributes such as BenchmarkDotNet.Configs.IConfigSource . BenchmarkHelpers Helper methods for benchmark infrastructure."
  },
  "api/perftests/CodeJam.PerfTests.Columns.MetricValueColumn.Kind.html": {
    "href": "api/perftests/CodeJam.PerfTests.Columns.MetricValueColumn.Kind.html",
    "title": "Enum MetricValueColumn.Kind | CodeJam",
    "keywords": "Enum MetricValueColumn.Kind Metric column value. Namespace : CodeJam.PerfTests.Columns Assembly : CodeJam.PerfTests.dll Syntax public enum Kind Fields Name Description Max Max metric value. Mean Mean for metric. Min Min metric value. StdDev Metric value standard deviation."
  },
  "api/perftests/CodeJam.PerfTests.Columns.MetricValueColumn.html": {
    "href": "api/perftests/CodeJam.PerfTests.Columns.MetricValueColumn.html",
    "title": "Class MetricValueColumn | CodeJam",
    "keywords": "Class MetricValueColumn Displays metric for the benchmark. Inheritance System.Object MetricValueColumn Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Columns Assembly : CodeJam.PerfTests.dll Syntax public class MetricValueColumn : IColumn Constructors | Improve this Doc View Source MetricValueColumn(MetricInfo, MetricValueColumn.Kind) Initializes a new instance of the MetricValueColumn class. Declaration public MetricValueColumn(MetricInfo metric, MetricValueColumn.Kind kind) Parameters Type Name Description MetricInfo metric The metric information. MetricValueColumn.Kind kind The kind of value to display. | Improve this Doc View Source MetricValueColumn(String, MetricInfo, MetricValueColumn.Kind) Initializes a new instance of the MetricValueColumn class. Declaration public MetricValueColumn(string name, MetricInfo metric, MetricValueColumn.Kind kind) Parameters Type Name Description System.String name The column name. MetricInfo metric The metric information. MetricValueColumn.Kind kind The kind of value to display. Properties | Improve this Doc View Source AlwaysShow Should be shown anyway. Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean true if should be shown anyway. Implements BenchmarkDotNet.Columns.IColumn.AlwaysShow | Improve this Doc View Source Category Gets category of the column. Declaration public ColumnCategory Category { get; } Property Value Type Description BenchmarkDotNet.Columns.ColumnCategory The category of the column. Implements BenchmarkDotNet.Columns.IColumn.Category | Improve this Doc View Source ColumnKind Gets column kind. Declaration public MetricValueColumn.Kind ColumnKind { get; } Property Value Type Description MetricValueColumn.Kind The column kind. | Improve this Doc View Source ColumnName Gets name of the column. Declaration public string ColumnName { get; } Property Value Type Description System.String The name of the column. Implements BenchmarkDotNet.Columns.IColumn.ColumnName | Improve this Doc View Source Id An unique identifier of the column. If there are several columns with the same Id, only one of them will be shown in the summary. Declaration public string Id { get; } Property Value Type Description System.String The unique identificator of the column. Implements BenchmarkDotNet.Columns.IColumn.Id | Improve this Doc View Source IsNumeric Defines if the column's value represents a number. Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean true if the column's value represents a number. Implements BenchmarkDotNet.Columns.IColumn.IsNumeric | Improve this Doc View Source Legend Column description. Declaration public string Legend { get; } Property Value Type Description System.String The column description. Implements BenchmarkDotNet.Columns.IColumn.Legend | Improve this Doc View Source Metric Gets metric info. Declaration public MetricInfo Metric { get; } Property Value Type Description MetricInfo The metric info. | Improve this Doc View Source PriorityInCategory Gets order of column in the same category. Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 The order of column in the same category. Implements BenchmarkDotNet.Columns.IColumn.PriorityInCategory | Improve this Doc View Source UnitType Defines how to format column's value. Declaration public UnitType UnitType { get; } Property Value Type Description BenchmarkDotNet.Columns.UnitType Format column mode. Implements BenchmarkDotNet.Columns.IColumn.UnitType Methods | Improve this Doc View Source GetValue(Summary, Benchmark) Returns value for the column. Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary Summary for the run. BenchmarkDotNet.Running.Benchmark benchmark The benchmark. Returns Type Description System.String Metric value (upper or lower boundary) for the benchmark. Implements BenchmarkDotNet.Columns.IColumn.GetValue(BenchmarkDotNet.Reports.Summary, BenchmarkDotNet.Running.Benchmark) | Improve this Doc View Source GetValue(Summary, Benchmark, ISummaryStyle) Returns value for the column. Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary Summary for the run. BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.ISummaryStyle style The summary style. Returns Type Description System.String The value for the column Implements BenchmarkDotNet.Columns.IColumn.GetValue(BenchmarkDotNet.Reports.Summary, BenchmarkDotNet.Running.Benchmark, BenchmarkDotNet.Reports.ISummaryStyle) | Improve this Doc View Source IsAvailable(Summary) Can provide values for the specified summary. Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary Summary for the run. Returns Type Description System.Boolean true if can provide values for the specified summary. Implements BenchmarkDotNet.Columns.IColumn.IsAvailable(BenchmarkDotNet.Reports.Summary) | Improve this Doc View Source IsDefault(Summary, Benchmark) Determines whether the specified summary is default. Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary The summary. BenchmarkDotNet.Running.Benchmark benchmark The benchmark. Returns Type Description System.Boolean true if the specified summary is default; otherwise, false . Implements BenchmarkDotNet.Columns.IColumn.IsDefault(BenchmarkDotNet.Reports.Summary, BenchmarkDotNet.Running.Benchmark) | Improve this Doc View Source ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() See Also BenchmarkDotNet.Columns.IColumn"
  },
  "api/perftests/CodeJam.PerfTests.CompetitionTroubleshootingModeAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionTroubleshootingModeAttribute.html",
    "title": "Class CompetitionTroubleshootingModeAttribute | CodeJam",
    "keywords": "Class CompetitionTroubleshootingModeAttribute Enables troubleshooting mode feature. Inheritance System.Object System.Attribute CompetitionFeaturesAttribute CompetitionTroubleshootingModeAttribute Inherited Members CompetitionFeaturesAttribute.BurstMode CompetitionFeaturesAttribute.ContinuousIntegrationMode CompetitionFeaturesAttribute.Platform CompetitionFeaturesAttribute.AnnotateSources CompetitionFeaturesAttribute.IgnoreExistingAnnotations CompetitionFeaturesAttribute.PreviousRunLogUri CompetitionFeaturesAttribute.ReportWarningsAsErrors CompetitionFeaturesAttribute.TroubleshootingMode CompetitionFeaturesAttribute.ImportantInfoLogger CompetitionFeaturesAttribute.DetailedLogger CompetitionFeaturesAttribute.GetFeatures() System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax public class CompetitionTroubleshootingModeAttribute : CompetitionFeaturesAttribute, _Attribute, ICompetitionFeatures Constructors | Improve this Doc View Source CompetitionTroubleshootingModeAttribute() Initializes a new instance of the CompetitionTroubleshootingModeAttribute class. Declaration public CompetitionTroubleshootingModeAttribute()"
  },
  "api/perftests/CodeJam.PerfTests.CompetitionXmlAnnotationAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionXmlAnnotationAttribute.html",
    "title": "Class CompetitionXmlAnnotationAttribute | CodeJam",
    "keywords": "Class CompetitionXmlAnnotationAttribute Attribute for benchmark classes that stores source annotations as embedded xml resource. Inheritance System.Object System.Attribute CompetitionXmlAnnotationAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public class CompetitionXmlAnnotationAttribute : Attribute, _Attribute, IAnnotationStorageSource Remarks In case the ResourcePath is not set: Let's say there's benchmark class with full type name 'MyNamespace.MyBenchmark' and it is located at %project_root%\\Some Dir\\AnotherDir\\Benchmarks.cs . The default namespace for the project is 'MyAmazingNamespace'. The resource containing source annotations should be located at %project_root%\\Some Dir\\AnotherDir\\Benchmarks.xml . And the attribute should be declared as [CompetitionXmlAnnotation(\"MyAmazingNamespace.Some_Dir.AnotherDir.Benchmarks.xml\")] Note that all non-alphanumeric symbols are replaced with '_'. Constructors | Improve this Doc View Source CompetitionXmlAnnotationAttribute(String) Constructor for xml annotation attribute. Declaration public CompetitionXmlAnnotationAttribute(string resourceName) Parameters Type Name Description System.String resourceName The name of the resource containing xml document with source annotations. If the ResourcePath is not set the resource file should be placed in the direcory with the source file for the benchmark. See remarks section at attribute documentation for detailed example. Properties | Improve this Doc View Source ResourceName Gets name of the resource containing xml document with source annotations. Declaration public string ResourceName { get; } Property Value Type Description System.String The name of the resource containing xml document with source annotations. | Improve this Doc View Source ResourcePath Gets or sets path to the resource containing xml document with source annotations. Should be relative to the source file the attribute is applied to. If not set then path to the resource should be same as path to the source file (resource's extension should be '.xml'). Declaration public string ResourcePath { get; set; } Property Value Type Description System.String The relative path to the resource containing xml document with source annotations. | Improve this Doc View Source UseFullTypeName Use full type name to search for the XML annotation. Declaration public bool UseFullTypeName { get; set; } Property Value Type Description System.Boolean true if full type name should be used in annotations; otherwise, false ."
  },
  "api/perftests/CodeJam.PerfTests.Configs.CompetitionAdjustmentMode.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.CompetitionAdjustmentMode.html",
    "title": "Class CompetitionAdjustmentMode | CodeJam",
    "keywords": "Class CompetitionAdjustmentMode Competition adjustment parameters class. Inheritance System.Object BenchmarkDotNet.Characteristics.CharacteristicObject BenchmarkDotNet.Characteristics.CharacteristicObject < CompetitionAdjustmentMode > CompetitionAdjustmentMode Inherited Members BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionAdjustmentMode>.Apply(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionAdjustmentMode>.Apply(BenchmarkDotNet.Characteristics.CharacteristicObject[]) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionAdjustmentMode>.ApplyAndFreeze(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionAdjustmentMode>.ApplyAndFreeze(BenchmarkDotNet.Characteristics.CharacteristicObject[]) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionAdjustmentMode>.Freeze() BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionAdjustmentMode>.UnfreezeCopy() BenchmarkDotNet.Characteristics.CharacteristicObject.IdCharacteristic BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveId(BenchmarkDotNet.Characteristics.CharacteristicObject, System.String) BenchmarkDotNet.Characteristics.CharacteristicObject.AssertNotFrozen() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsRoot() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsNonFrozenRoot() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsAssignable(BenchmarkDotNet.Characteristics.Characteristic, System.Object) BenchmarkDotNet.Characteristics.CharacteristicObject.GetCharacteristicsWithValues() BenchmarkDotNet.Characteristics.CharacteristicObject.HasValue(BenchmarkDotNet.Characteristics.Characteristic) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue<T>(BenchmarkDotNet.Characteristics.Characteristic<T>, BenchmarkDotNet.Characteristics.IResolver) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue(BenchmarkDotNet.Characteristics.Characteristic, BenchmarkDotNet.Characteristics.IResolver) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue<T>(BenchmarkDotNet.Characteristics.Characteristic<T>, T) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue(BenchmarkDotNet.Characteristics.Characteristic, System.Object) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValueAsNullable<T>(BenchmarkDotNet.Characteristics.Characteristic<T>) BenchmarkDotNet.Characteristics.CharacteristicObject.ApplyCore(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject.FreezeCore() BenchmarkDotNet.Characteristics.CharacteristicObject.UnfreezeCopyCore() BenchmarkDotNet.Characteristics.CharacteristicObject.ToString() BenchmarkDotNet.Characteristics.CharacteristicObject.Owner BenchmarkDotNet.Characteristics.CharacteristicObject.OwnerOrSelf BenchmarkDotNet.Characteristics.CharacteristicObject.Frozen BenchmarkDotNet.Characteristics.CharacteristicObject.IsPropertyBag BenchmarkDotNet.Characteristics.CharacteristicObject.HasChanges BenchmarkDotNet.Characteristics.CharacteristicObject.Id System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public sealed class CompetitionAdjustmentMode : CharacteristicObject<CompetitionAdjustmentMode> Fields | Improve this Doc View Source AdjustMetricsCharacteristic Adjust metric limits characteristic. Declaration public static readonly Characteristic<bool> AdjustMetricsCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source ForceEmptyMetricAdjustmentCharacteristic Force adjustment of empty metric limits characteristic. Declaration public static readonly Characteristic<bool> ForceEmptyMetricAdjustmentCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source RerunsIfAdjustedCharacteristic Characteristic for count of additional runs performed if metric limits were adjusted. Default is 2. Declaration public static readonly Characteristic<int> RerunsIfAdjustedCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Int32 > | Improve this Doc View Source SkipRunsBeforeAdjustmentCharacteristic Characteristic for number of runs performed before adjusting metric limits. Declaration public static readonly Characteristic<int> SkipRunsBeforeAdjustmentCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Int32 > Properties | Improve this Doc View Source AdjustMetrics Adjust metric limits if they do not match to the actual values. Declaration public bool AdjustMetrics { get; set; } Property Value Type Description System.Boolean true if the analyser should adjust metric limits if they do not match to the actual values; otherwise, false . | Improve this Doc View Source ForceEmptyMetricsAdjustment Always adjust metric limits if they are empty. Declaration public bool ForceEmptyMetricsAdjustment { get; set; } Property Value Type Description System.Boolean true to perform adjustment of empty metric limits even if AdjustMetrics is disabled; otherwise, false . | Improve this Doc View Source RerunsIfAdjusted Count of additional runs performed if metric limits were adjusted. Default is 2. Set this to zero to skip additional runs after adjusting metric limits. Set this to non-zero positive value to proof that the benchmark fits into updated limits. Declaration public int RerunsIfAdjusted { get; set; } Property Value Type Description System.Int32 Count of additional runs performed after adjusting metric limits. See Also BenchmarkDotNet.Characteristics.CharacteristicObject <T>"
  },
  "api/perftests/CodeJam.PerfTests.Configs.CompetitionAnnotationMode.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.CompetitionAnnotationMode.html",
    "title": "Class CompetitionAnnotationMode | CodeJam",
    "keywords": "Class CompetitionAnnotationMode Competition annotations parameters class. Inheritance System.Object BenchmarkDotNet.Characteristics.CharacteristicObject BenchmarkDotNet.Characteristics.CharacteristicObject < CompetitionAnnotationMode > CompetitionAnnotationMode Inherited Members BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionAnnotationMode>.Apply(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionAnnotationMode>.Apply(BenchmarkDotNet.Characteristics.CharacteristicObject[]) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionAnnotationMode>.ApplyAndFreeze(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionAnnotationMode>.ApplyAndFreeze(BenchmarkDotNet.Characteristics.CharacteristicObject[]) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionAnnotationMode>.Freeze() BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionAnnotationMode>.UnfreezeCopy() BenchmarkDotNet.Characteristics.CharacteristicObject.IdCharacteristic BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveId(BenchmarkDotNet.Characteristics.CharacteristicObject, System.String) BenchmarkDotNet.Characteristics.CharacteristicObject.AssertNotFrozen() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsRoot() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsNonFrozenRoot() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsAssignable(BenchmarkDotNet.Characteristics.Characteristic, System.Object) BenchmarkDotNet.Characteristics.CharacteristicObject.GetCharacteristicsWithValues() BenchmarkDotNet.Characteristics.CharacteristicObject.HasValue(BenchmarkDotNet.Characteristics.Characteristic) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue<T>(BenchmarkDotNet.Characteristics.Characteristic<T>, BenchmarkDotNet.Characteristics.IResolver) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue(BenchmarkDotNet.Characteristics.Characteristic, BenchmarkDotNet.Characteristics.IResolver) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue<T>(BenchmarkDotNet.Characteristics.Characteristic<T>, T) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue(BenchmarkDotNet.Characteristics.Characteristic, System.Object) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValueAsNullable<T>(BenchmarkDotNet.Characteristics.Characteristic<T>) BenchmarkDotNet.Characteristics.CharacteristicObject.ApplyCore(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject.FreezeCore() BenchmarkDotNet.Characteristics.CharacteristicObject.UnfreezeCopyCore() BenchmarkDotNet.Characteristics.CharacteristicObject.ToString() BenchmarkDotNet.Characteristics.CharacteristicObject.Owner BenchmarkDotNet.Characteristics.CharacteristicObject.OwnerOrSelf BenchmarkDotNet.Characteristics.CharacteristicObject.Frozen BenchmarkDotNet.Characteristics.CharacteristicObject.IsPropertyBag BenchmarkDotNet.Characteristics.CharacteristicObject.HasChanges BenchmarkDotNet.Characteristics.CharacteristicObject.Id System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public sealed class CompetitionAnnotationMode : CharacteristicObject<CompetitionAnnotationMode> Fields | Improve this Doc View Source DontSaveUpdatedAnnotationsCharacteristic Dont update sources with updated annotations. Declaration public static readonly Characteristic<bool> DontSaveUpdatedAnnotationsCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source IgnoreExistingAnnotationsCharacteristic Ignore existing source annotations characteristic. Declaration public static readonly Characteristic<bool> IgnoreExistingAnnotationsCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source LogAnnotationsCharacteristic Log source annotations characteristic. Declaration public static readonly Characteristic<bool> LogAnnotationsCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source PreviousRunLogUriCharacteristic Characteristic for URI of the log that contains logged source annotations from previous run(s). Declaration public static readonly Characteristic<string> PreviousRunLogUriCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.String > Properties | Improve this Doc View Source DontSaveUpdatedAnnotations Dont update sources with updated annotations. Use this for CI runs when source files are not accessible. Set the LogAnnotations to true to log source annotations and use the PreviousRunLogUri to restore them. Declaration public bool DontSaveUpdatedAnnotations { get; set; } Property Value Type Description System.Boolean true sources should not be updated with updated annotations. | Improve this Doc View Source IgnoreExistingAnnotations Existing source annotations should be igored. Declaration public bool IgnoreExistingAnnotations { get; set; } Property Value Type Description System.Boolean true , if existing source annotations should be igored; otherwise, false . | Improve this Doc View Source LogAnnotations Log source annotations. Declaration public bool LogAnnotations { get; set; } Property Value Type Description System.Boolean true if current source annotations should be logged; otherwise, false . | Improve this Doc View Source PreviousRunLogUri URI of the log that contains logged source annotations from previous run(s). Relative paths, file paths and web URLs are supported. Set the LogAnnotations to true to log the source annotations. Declaration public string PreviousRunLogUri { get; set; } Property Value Type Description System.String The URI of the log that contains logged source annotations from previous run(s). See Also BenchmarkDotNet.Characteristics.CharacteristicObject <T>"
  },
  "api/perftests/CodeJam.PerfTests.Configs.ManualCompetitionConfig.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.ManualCompetitionConfig.html",
    "title": "Class ManualCompetitionConfig | CodeJam",
    "keywords": "Class ManualCompetitionConfig Class to ease competition config creation Inheritance System.Object ManualCompetitionConfig Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public sealed class ManualCompetitionConfig : ICompetitionConfig, IConfig Constructors | Improve this Doc View Source ManualCompetitionConfig() Initializes a new instance of the ManualCompetitionConfig class. Declaration public ManualCompetitionConfig() | Improve this Doc View Source ManualCompetitionConfig(IConfig) Initializes a new instance of the ManualCompetitionConfig class. Declaration public ManualCompetitionConfig(IConfig config) Parameters Type Name Description BenchmarkDotNet.Configs.IConfig config The config to init from. | Improve this Doc View Source ManualCompetitionConfig(ICompetitionConfig) Initializes a new instance of the ManualCompetitionConfig class. Declaration public ManualCompetitionConfig(ICompetitionConfig config) Parameters Type Name Description ICompetitionConfig config The config to init from. Properties | Improve this Doc View Source Analysers Gets the analysers. Declaration public List<IAnalyser> Analysers { get; } Property Value Type Description System.Collections.Generic.List < BenchmarkDotNet.Analysers.IAnalyser > The analysers. | Improve this Doc View Source ColumnProviders Gets the column providers. Declaration public List<IColumnProvider> ColumnProviders { get; } Property Value Type Description System.Collections.Generic.List < BenchmarkDotNet.Columns.IColumnProvider > The column providers. | Improve this Doc View Source Diagnosers Gets the diagnosers. Declaration public List<IDiagnoser> Diagnosers { get; } Property Value Type Description System.Collections.Generic.List < BenchmarkDotNet.Diagnosers.IDiagnoser > The diagnosers. | Improve this Doc View Source Exporters Gets the exporters. Declaration public List<IExporter> Exporters { get; } Property Value Type Description System.Collections.Generic.List < BenchmarkDotNet.Exporters.IExporter > The exporters. | Improve this Doc View Source Filters Gets the filters. Declaration public List<IFilter> Filters { get; } Property Value Type Description System.Collections.Generic.List < BenchmarkDotNet.Filters.IFilter > Filters | Improve this Doc View Source HardwareCounters Gets hardware counters. Declaration public List<HardwareCounter> HardwareCounters { get; } Property Value Type Description System.Collections.Generic.List < BenchmarkDotNet.Diagnosers.HardwareCounter > The hardware counters | Improve this Doc View Source Jobs Gets the jobs. Declaration public List<Job> Jobs { get; } Property Value Type Description System.Collections.Generic.List < BenchmarkDotNet.Jobs.Job > The jobs. | Improve this Doc View Source KeepBenchmarkFiles determines if all auto-generated files should be kept or removed after running benchmarks Declaration public bool KeepBenchmarkFiles { get; set; } Property Value Type Description System.Boolean Implements BenchmarkDotNet.Configs.IConfig.KeepBenchmarkFiles | Improve this Doc View Source Loggers Gets the loggers. Declaration public List<ILogger> Loggers { get; } Property Value Type Description System.Collections.Generic.List < BenchmarkDotNet.Loggers.ILogger > The loggers. | Improve this Doc View Source Metrics Gets the jobs. Declaration public List<MetricInfo> Metrics { get; } Property Value Type Description System.Collections.Generic.List < MetricInfo > The jobs. | Improve this Doc View Source Options Competition options. Declaration public CompetitionOptions Options { get; set; } Property Value Type Description CompetitionOptions Competition options. Implements ICompetitionConfig.Options | Improve this Doc View Source OrderProvider Gets or sets the order provider. Declaration public IOrderProvider OrderProvider { get; set; } Property Value Type Description BenchmarkDotNet.Order.IOrderProvider The order provider. | Improve this Doc View Source SummaryStyle Gets summary style. Declaration public ISummaryStyle SummaryStyle { get; set; } Property Value Type Description BenchmarkDotNet.Reports.ISummaryStyle The summary style | Improve this Doc View Source Validators Gets the validators. Declaration public List<IValidator> Validators { get; } Property Value Type Description System.Collections.Generic.List < BenchmarkDotNet.Validators.IValidator > The validators. Methods | Improve this Doc View Source Add(IAnalyser[]) Adds the specified new analysers. Declaration public void Add(params IAnalyser[] newAnalysers) Parameters Type Name Description BenchmarkDotNet.Analysers.IAnalyser [] newAnalysers The new analysers. | Improve this Doc View Source Add(IColumn[]) Adds the specified new columns. Declaration public void Add(params IColumn[] newColumns) Parameters Type Name Description BenchmarkDotNet.Columns.IColumn [] newColumns The new columns. | Improve this Doc View Source Add(IColumnProvider[]) Adds the specified new column providers. Declaration public void Add(params IColumnProvider[] newColumnProviders) Parameters Type Name Description BenchmarkDotNet.Columns.IColumnProvider [] newColumnProviders The new column providers. | Improve this Doc View Source Add(IConfig) Fills properties from the specified config. Declaration public void Add(IConfig config) Parameters Type Name Description BenchmarkDotNet.Configs.IConfig config The config to init from. | Improve this Doc View Source Add(HardwareCounter[]) Adds the specified new hardware counters. Declaration public void Add(params HardwareCounter[] counters) Parameters Type Name Description BenchmarkDotNet.Diagnosers.HardwareCounter [] counters The new hardware counters. | Improve this Doc View Source Add(IDiagnoser[]) Adds the specified new diagnosers. Declaration public void Add(params IDiagnoser[] newDiagnosers) Parameters Type Name Description BenchmarkDotNet.Diagnosers.IDiagnoser [] newDiagnosers The new diagnosers. | Improve this Doc View Source Add(IExporter[]) Adds the specified new exporters. Declaration public void Add(params IExporter[] newExporters) Parameters Type Name Description BenchmarkDotNet.Exporters.IExporter [] newExporters The new exporters. | Improve this Doc View Source Add(Job[]) Adds the specified new jobs. Declaration public void Add(params Job[] newJobs) Parameters Type Name Description BenchmarkDotNet.Jobs.Job [] newJobs The new jobs. | Improve this Doc View Source Add(ILogger[]) Adds the specified new loggers. Declaration public void Add(params ILogger[] newLoggers) Parameters Type Name Description BenchmarkDotNet.Loggers.ILogger [] newLoggers The new loggers. | Improve this Doc View Source Add(IValidator[]) Adds the specified new validators. Declaration public void Add(params IValidator[] newValidators) Parameters Type Name Description BenchmarkDotNet.Validators.IValidator [] newValidators The new validators. | Improve this Doc View Source Add(MetricInfo[]) Adds the specified new competition metrics. Declaration public void Add(params MetricInfo[] newMetrics) Parameters Type Name Description MetricInfo [] newMetrics The new competition metrics. | Improve this Doc View Source ApplyModifier(Job) Applies modifier to jobs. Declaration public void ApplyModifier(Job jobModifier) Parameters Type Name Description BenchmarkDotNet.Jobs.Job jobModifier Job modifier to apply. | Improve this Doc View Source ApplyModifier(CompetitionOptions) Applies modifier to competition options. Declaration public void ApplyModifier(CompetitionOptions optionsModifier) Parameters Type Name Description CompetitionOptions optionsModifier Competition options to apply. | Improve this Doc View Source AsReadOnly() Returns read-only wrapper for the config. Declaration public ICompetitionConfig AsReadOnly() Returns Type Description ICompetitionConfig The read-only wrapper for the config | Improve this Doc View Source GetFilters() Gets the filters. Declaration public IEnumerable<IFilter> GetFilters() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Filters.IFilter > Filters Implements BenchmarkDotNet.Configs.IConfig.GetFilters() | Improve this Doc View Source GetMetrics() Gets competition metrics. Declaration public IEnumerable<MetricInfo> GetMetrics() Returns Type Description System.Collections.Generic.IEnumerable < MetricInfo > The competition metrics. Implements ICompetitionConfig.GetMetrics() | Improve this Doc View Source Set(IOrderProvider) Sets the specified provider. Declaration public void Set(IOrderProvider provider) Parameters Type Name Description BenchmarkDotNet.Order.IOrderProvider provider The provider. | Improve this Doc View Source Set(ISummaryStyle) Sets the specified summary style. Declaration public void Set(ISummaryStyle summaryStyle) Parameters Type Name Description BenchmarkDotNet.Reports.ISummaryStyle summaryStyle The summary style. | Improve this Doc View Source Set(CompetitionOptions) Sets the specified competition options. Declaration public void Set(CompetitionOptions competitionOptions) Parameters Type Name Description CompetitionOptions competitionOptions Competition options. Explicit Interface Implementations | Improve this Doc View Source IConfig.GetAnalysers() Gets the analysers. Declaration IEnumerable<IAnalyser> IConfig.GetAnalysers() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Analysers.IAnalyser > The analysers. Implements BenchmarkDotNet.Configs.IConfig.GetAnalysers() | Improve this Doc View Source IConfig.GetColumnProviders() Gets the column providers. Declaration IEnumerable<IColumnProvider> IConfig.GetColumnProviders() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Columns.IColumnProvider > The column providers. Implements BenchmarkDotNet.Configs.IConfig.GetColumnProviders() | Improve this Doc View Source IConfig.GetDiagnosers() Gets the diagnosers. Declaration IEnumerable<IDiagnoser> IConfig.GetDiagnosers() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Diagnosers.IDiagnoser > The diagnosers. Implements BenchmarkDotNet.Configs.IConfig.GetDiagnosers() | Improve this Doc View Source IConfig.GetExporters() Gets the exporters. Declaration IEnumerable<IExporter> IConfig.GetExporters() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Exporters.IExporter > The exporters. Implements BenchmarkDotNet.Configs.IConfig.GetExporters() | Improve this Doc View Source IConfig.GetHardwareCounters() Gets hardware counters. Declaration IEnumerable<HardwareCounter> IConfig.GetHardwareCounters() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Diagnosers.HardwareCounter > Hardware counters Implements BenchmarkDotNet.Configs.IConfig.GetHardwareCounters() | Improve this Doc View Source IConfig.GetJobs() Gets the jobs. Declaration IEnumerable<Job> IConfig.GetJobs() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Jobs.Job > The jobs. Implements BenchmarkDotNet.Configs.IConfig.GetJobs() | Improve this Doc View Source IConfig.GetLoggers() Gets the loggers. Declaration IEnumerable<ILogger> IConfig.GetLoggers() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Loggers.ILogger > The loggers. Implements BenchmarkDotNet.Configs.IConfig.GetLoggers() | Improve this Doc View Source IConfig.GetOrderProvider() Gets the order provider. Declaration IOrderProvider IConfig.GetOrderProvider() Returns Type Description BenchmarkDotNet.Order.IOrderProvider The order provider. Implements BenchmarkDotNet.Configs.IConfig.GetOrderProvider() | Improve this Doc View Source IConfig.GetSummaryStyle() Gets summary style. Declaration ISummaryStyle IConfig.GetSummaryStyle() Returns Type Description BenchmarkDotNet.Reports.ISummaryStyle The summary style Implements BenchmarkDotNet.Configs.IConfig.GetSummaryStyle() | Improve this Doc View Source IConfig.GetValidators() Gets the validators. Declaration IEnumerable<IValidator> IConfig.GetValidators() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Validators.IValidator > The validators. Implements BenchmarkDotNet.Configs.IConfig.GetValidators() | Improve this Doc View Source IConfig.UnionRule Gets the union rule. Declaration ConfigUnionRule IConfig.UnionRule { get; } Returns Type Description BenchmarkDotNet.Configs.ConfigUnionRule The union rule. Implements BenchmarkDotNet.Configs.IConfig.UnionRule Extension Methods BenchmarkHelpers.AsReadOnly(IConfig) CompetitionConfigExtensions.WithModifier(ICompetitionConfig, CompetitionOptions) CompetitionConfigExtensions.WithModifier(ICompetitionConfig, Job) CompetitionConfigExtensions.WithAllowDebugBuilds(ICompetitionConfig, Boolean) CompetitionConfigExtensions.WithDetailedLogging(ICompetitionConfig, Boolean) CompetitionConfigExtensions.WithReportWarningsAsErrors(ICompetitionConfig, Boolean) CompetitionConfigExtensions.WithTooFastBenchmarkLimit(ICompetitionConfig, TimeSpan) CompetitionConfigExtensions.WithLongRunningBenchmarkLimit(ICompetitionConfig, TimeSpan) CompetitionConfigExtensions.WithPreviousRunLogUri(ICompetitionConfig, String)"
  },
  "api/perftests/CodeJam.PerfTests.Configs.ReadOnlyCompetitionConfig.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.ReadOnlyCompetitionConfig.html",
    "title": "Class ReadOnlyCompetitionConfig | CodeJam",
    "keywords": "Class ReadOnlyCompetitionConfig Wrapper class for readonly competition config. Inheritance System.Object ReadOnlyConfig ReadOnlyCompetitionConfig Inherited Members ReadOnlyConfig.GetColumnProviders() ReadOnlyConfig.GetExporters() ReadOnlyConfig.GetLoggers() ReadOnlyConfig.GetDiagnosers() ReadOnlyConfig.GetAnalysers() ReadOnlyConfig.GetJobs() ReadOnlyConfig.GetValidators() ReadOnlyConfig.GetHardwareCounters() ReadOnlyConfig.GetFilters() ReadOnlyConfig.GetOrderProvider() ReadOnlyConfig.GetSummaryStyle() ReadOnlyConfig.UnionRule ReadOnlyConfig.KeepBenchmarkFiles System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public class ReadOnlyCompetitionConfig : ReadOnlyConfig, ICompetitionConfig, IConfig Constructors | Improve this Doc View Source ReadOnlyCompetitionConfig(ICompetitionConfig) Initializes a new instance of the ReadOnlyCompetitionConfig class. Declaration public ReadOnlyCompetitionConfig(ICompetitionConfig config) Parameters Type Name Description ICompetitionConfig config The config to wrap. Properties | Improve this Doc View Source Options Competition parameters. Declaration public CompetitionOptions Options { get; } Property Value Type Description CompetitionOptions Competition parameters. Implements ICompetitionConfig.Options Methods | Improve this Doc View Source GetMetrics() Gets competition metrics. Declaration public IEnumerable<MetricInfo> GetMetrics() Returns Type Description System.Collections.Generic.IEnumerable < MetricInfo > Competition metrics. Implements ICompetitionConfig.GetMetrics() Extension Methods BenchmarkHelpers.AsReadOnly(IConfig) CompetitionConfigExtensions.WithModifier(ICompetitionConfig, CompetitionOptions) CompetitionConfigExtensions.WithModifier(ICompetitionConfig, Job) CompetitionConfigExtensions.WithAllowDebugBuilds(ICompetitionConfig, Boolean) CompetitionConfigExtensions.WithDetailedLogging(ICompetitionConfig, Boolean) CompetitionConfigExtensions.WithReportWarningsAsErrors(ICompetitionConfig, Boolean) CompetitionConfigExtensions.WithTooFastBenchmarkLimit(ICompetitionConfig, TimeSpan) CompetitionConfigExtensions.WithLongRunningBenchmarkLimit(ICompetitionConfig, TimeSpan) CompetitionConfigExtensions.WithPreviousRunLogUri(ICompetitionConfig, String) See Also ReadOnlyConfig ICompetitionConfig"
  },
  "api/perftests/CodeJam.PerfTests.CompetitionConfigAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionConfigAttribute.html",
    "title": "Class CompetitionConfigAttribute | CodeJam",
    "keywords": "Class CompetitionConfigAttribute Competition config attribute. Inheritance System.Object System.Attribute CompetitionConfigAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, Inherited = true, AllowMultiple = false)] public class CompetitionConfigAttribute : Attribute, _Attribute, ICompetitionConfigSource Constructors | Improve this Doc View Source CompetitionConfigAttribute(Func<ICompetitionConfig>) Initializes a new instance of the CompetitionConfigAttribute class. Declaration protected CompetitionConfigAttribute(Func<ICompetitionConfig> valueFactory) Parameters Type Name Description System.Func < ICompetitionConfig > valueFactory The value factory. | Improve this Doc View Source CompetitionConfigAttribute(Type) Initializes a new instance of the CompetitionConfigAttribute class. Declaration public CompetitionConfigAttribute(Type valueType) Parameters Type Name Description System.Type valueType Type of the competition config. Should have a public parameterless constructor. Properties | Improve this Doc View Source Config The competition config. Declaration public ICompetitionConfig Config { get; } Property Value Type Description ICompetitionConfig The competition config. Implements ICompetitionConfigSource.Config See Also ICompetitionConfigSource"
  },
  "api/perftests/CodeJam.PerfTests.Configs.CompetitionMeasureAllocationsAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.CompetitionMeasureAllocationsAttribute.html",
    "title": "Class CompetitionMeasureAllocationsAttribute | CodeJam",
    "keywords": "Class CompetitionMeasureAllocationsAttribute Adds the GcAllocations metric. Inheritance System.Object System.Attribute CompetitionModifierAttribute CompetitionMeasureAllocationsAttribute Inherited Members CompetitionModifierAttribute.Modifier System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public sealed class CompetitionMeasureAllocationsAttribute : CompetitionModifierAttribute, _Attribute, ICompetitionModifierSource Constructors | Improve this Doc View Source CompetitionMeasureAllocationsAttribute() Initializes a new instance of the CompetitionNoRelativeTimeAttribute class. Declaration public CompetitionMeasureAllocationsAttribute() See Also CompetitionModifierAttribute"
  },
  "api/perftests/CodeJam.PerfTests.Configs.CompetitionNoRelativeTimeAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.CompetitionNoRelativeTimeAttribute.html",
    "title": "Class CompetitionNoRelativeTimeAttribute | CodeJam",
    "keywords": "Class CompetitionNoRelativeTimeAttribute Removes the RelativeTime metric. Inheritance System.Object System.Attribute CompetitionModifierAttribute CompetitionNoRelativeTimeAttribute Inherited Members CompetitionModifierAttribute.Modifier System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public sealed class CompetitionNoRelativeTimeAttribute : CompetitionModifierAttribute, _Attribute, ICompetitionModifierSource Constructors | Improve this Doc View Source CompetitionNoRelativeTimeAttribute() Initializes a new instance of the CompetitionNoRelativeTimeAttribute class. Declaration public CompetitionNoRelativeTimeAttribute() See Also CompetitionModifierAttribute"
  },
  "api/perftests/CodeJam.PerfTests.Configs.CompetitionOptions.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.CompetitionOptions.html",
    "title": "Class CompetitionOptions | CodeJam",
    "keywords": "Class CompetitionOptions Competition options class. Inheritance System.Object BenchmarkDotNet.Characteristics.CharacteristicObject BenchmarkDotNet.Characteristics.CharacteristicObject < CompetitionOptions > CompetitionOptions Inherited Members BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionOptions>.Apply(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionOptions>.Apply(BenchmarkDotNet.Characteristics.CharacteristicObject[]) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionOptions>.ApplyAndFreeze(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionOptions>.ApplyAndFreeze(BenchmarkDotNet.Characteristics.CharacteristicObject[]) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionOptions>.Freeze() BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionOptions>.UnfreezeCopy() BenchmarkDotNet.Characteristics.CharacteristicObject.IdCharacteristic BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveId(BenchmarkDotNet.Characteristics.CharacteristicObject, System.String) BenchmarkDotNet.Characteristics.CharacteristicObject.AssertNotFrozen() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsRoot() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsNonFrozenRoot() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsAssignable(BenchmarkDotNet.Characteristics.Characteristic, System.Object) BenchmarkDotNet.Characteristics.CharacteristicObject.GetCharacteristicsWithValues() BenchmarkDotNet.Characteristics.CharacteristicObject.HasValue(BenchmarkDotNet.Characteristics.Characteristic) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue<T>(BenchmarkDotNet.Characteristics.Characteristic<T>, BenchmarkDotNet.Characteristics.IResolver) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue(BenchmarkDotNet.Characteristics.Characteristic, BenchmarkDotNet.Characteristics.IResolver) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue<T>(BenchmarkDotNet.Characteristics.Characteristic<T>, T) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue(BenchmarkDotNet.Characteristics.Characteristic, System.Object) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValueAsNullable<T>(BenchmarkDotNet.Characteristics.Characteristic<T>) BenchmarkDotNet.Characteristics.CharacteristicObject.ApplyCore(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject.FreezeCore() BenchmarkDotNet.Characteristics.CharacteristicObject.UnfreezeCopyCore() BenchmarkDotNet.Characteristics.CharacteristicObject.ToString() BenchmarkDotNet.Characteristics.CharacteristicObject.Owner BenchmarkDotNet.Characteristics.CharacteristicObject.OwnerOrSelf BenchmarkDotNet.Characteristics.CharacteristicObject.Frozen BenchmarkDotNet.Characteristics.CharacteristicObject.IsPropertyBag BenchmarkDotNet.Characteristics.CharacteristicObject.HasChanges BenchmarkDotNet.Characteristics.CharacteristicObject.Id System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public sealed class CompetitionOptions : CharacteristicObject<CompetitionOptions> Constructors | Improve this Doc View Source CompetitionOptions() Initializes a new instance of the CompetitionOptions class. Declaration public CompetitionOptions() | Improve this Doc View Source CompetitionOptions(CharacteristicObject) Initializes a new instance of the CompetitionOptions class. Declaration public CompetitionOptions(CharacteristicObject other) Parameters Type Name Description BenchmarkDotNet.Characteristics.CharacteristicObject other Mode to apply. | Improve this Doc View Source CompetitionOptions(CharacteristicObject[]) Initializes a new instance of the CompetitionOptions class. Declaration public CompetitionOptions(params CharacteristicObject[] others) Parameters Type Name Description BenchmarkDotNet.Characteristics.CharacteristicObject [] others Modes to apply. | Improve this Doc View Source CompetitionOptions(String) Initializes a new instance of the CompetitionOptions class. Declaration public CompetitionOptions(string id) Parameters Type Name Description System.String id The identifier. | Improve this Doc View Source CompetitionOptions(String, CharacteristicObject) Initializes a new instance of the CompetitionOptions class. Declaration public CompetitionOptions(string id, CharacteristicObject other) Parameters Type Name Description System.String id The identifier. BenchmarkDotNet.Characteristics.CharacteristicObject other Mode to apply. | Improve this Doc View Source CompetitionOptions(String, CharacteristicObject[]) Initializes a new instance of the CompetitionOptions class. Declaration public CompetitionOptions(string id, params CharacteristicObject[] others) Parameters Type Name Description System.String id The identifier. BenchmarkDotNet.Characteristics.CharacteristicObject [] others Modes to apply. Fields | Improve this Doc View Source AdjustmentsCharacteristic Competition adjustment parameters characteristic. Declaration public static readonly Characteristic<CompetitionAdjustmentMode> AdjustmentsCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < CompetitionAdjustmentMode > | Improve this Doc View Source AnnotationsCharacteristic Competition annotations parameters characteristic. Declaration public static readonly Characteristic<CompetitionAnnotationMode> AnnotationsCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < CompetitionAnnotationMode > | Improve this Doc View Source ChecksCharacteristic Competition validation parameters characteristic. Declaration public static readonly Characteristic<CompetitionCheckMode> ChecksCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < CompetitionCheckMode > | Improve this Doc View Source Default Default competition options. Declaration public static readonly CompetitionOptions Default Field Value Type Description CompetitionOptions | Improve this Doc View Source RunOptionsCharacteristic Competition run parameters characteristic. Declaration public static readonly Characteristic<CompetitionRunMode> RunOptionsCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < CompetitionRunMode > Properties | Improve this Doc View Source Adjustments Competition adjustment parameters. Declaration public CompetitionAdjustmentMode Adjustments { get; } Property Value Type Description CompetitionAdjustmentMode Competition adjustment parameters. | Improve this Doc View Source Annotations Competition annotations parameters. Declaration public CompetitionAnnotationMode Annotations { get; } Property Value Type Description CompetitionAnnotationMode Competition annotations parameters. | Improve this Doc View Source Checks Competition validation parameters. Declaration public CompetitionCheckMode Checks { get; } Property Value Type Description CompetitionCheckMode Competition validation parameters. | Improve this Doc View Source RunOptions Competition run parameters. Declaration public CompetitionRunMode RunOptions { get; } Property Value Type Description CompetitionRunMode Competition run parameters. See Also BenchmarkDotNet.Characteristics.CharacteristicObject"
  },
  "api/perftests/CodeJam.PerfTests.Configs.CompetitionRunMode.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.CompetitionRunMode.html",
    "title": "Class CompetitionRunMode | CodeJam",
    "keywords": "Class CompetitionRunMode Competition run parameters class. Inheritance System.Object BenchmarkDotNet.Characteristics.CharacteristicObject BenchmarkDotNet.Characteristics.CharacteristicObject < CompetitionRunMode > CompetitionRunMode Inherited Members BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionRunMode>.Apply(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionRunMode>.Apply(BenchmarkDotNet.Characteristics.CharacteristicObject[]) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionRunMode>.ApplyAndFreeze(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionRunMode>.ApplyAndFreeze(BenchmarkDotNet.Characteristics.CharacteristicObject[]) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionRunMode>.Freeze() BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionRunMode>.UnfreezeCopy() BenchmarkDotNet.Characteristics.CharacteristicObject.IdCharacteristic BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveId(BenchmarkDotNet.Characteristics.CharacteristicObject, System.String) BenchmarkDotNet.Characteristics.CharacteristicObject.AssertNotFrozen() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsRoot() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsNonFrozenRoot() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsAssignable(BenchmarkDotNet.Characteristics.Characteristic, System.Object) BenchmarkDotNet.Characteristics.CharacteristicObject.GetCharacteristicsWithValues() BenchmarkDotNet.Characteristics.CharacteristicObject.HasValue(BenchmarkDotNet.Characteristics.Characteristic) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue<T>(BenchmarkDotNet.Characteristics.Characteristic<T>, BenchmarkDotNet.Characteristics.IResolver) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue(BenchmarkDotNet.Characteristics.Characteristic, BenchmarkDotNet.Characteristics.IResolver) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue<T>(BenchmarkDotNet.Characteristics.Characteristic<T>, T) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue(BenchmarkDotNet.Characteristics.Characteristic, System.Object) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValueAsNullable<T>(BenchmarkDotNet.Characteristics.Characteristic<T>) BenchmarkDotNet.Characteristics.CharacteristicObject.ApplyCore(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject.FreezeCore() BenchmarkDotNet.Characteristics.CharacteristicObject.UnfreezeCopyCore() BenchmarkDotNet.Characteristics.CharacteristicObject.ToString() BenchmarkDotNet.Characteristics.CharacteristicObject.Owner BenchmarkDotNet.Characteristics.CharacteristicObject.OwnerOrSelf BenchmarkDotNet.Characteristics.CharacteristicObject.Frozen BenchmarkDotNet.Characteristics.CharacteristicObject.IsPropertyBag BenchmarkDotNet.Characteristics.CharacteristicObject.HasChanges BenchmarkDotNet.Characteristics.CharacteristicObject.Id System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public sealed class CompetitionRunMode : CharacteristicObject<CompetitionRunMode> Fields | Improve this Doc View Source AllowDebugBuildsCharacteristic Allow debug builds characteristic. Declaration public static readonly Characteristic<bool> AllowDebugBuildsCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source ConcurrentCharacteristic Concurrent run behavior characteristic. Declaration public static readonly Characteristic<ConcurrentRunBehavior> ConcurrentCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < ConcurrentRunBehavior > | Improve this Doc View Source ContinuousIntegrationModeCharacteristic The code is being run on a CI server characteristic. Declaration public static readonly Characteristic<bool> ContinuousIntegrationModeCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source DetailedLoggingCharacteristic Enable detailed logging characteristic. Declaration public static readonly Characteristic<bool> DetailedLoggingCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source MaxRunsAllowedCharacteristic Maximum runs allowed characteristic. Default is 10. Declaration public static readonly Characteristic<int> MaxRunsAllowedCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Int32 > | Improve this Doc View Source ReportWarningsAsErrorsCharacteristic Report warnings as errors characteristic. Declaration public static readonly Characteristic<bool> ReportWarningsAsErrorsCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > Properties | Improve this Doc View Source AllowDebugBuilds Allow debug builds to be used in competitions. Declaration public bool AllowDebugBuilds { get; set; } Property Value Type Description System.Boolean true if debug builds allowed; otherwise, false . | Improve this Doc View Source Concurrent Behavior for concurrent competition runs. Declaration public ConcurrentRunBehavior Concurrent { get; set; } Property Value Type Description ConcurrentRunBehavior Behavior for concurrent competition runs. | Improve this Doc View Source ContinuousIntegrationMode The code is being run on a CI server.. Declaration public bool ContinuousIntegrationMode { get; set; } Property Value Type Description System.Boolean true if code is being run on a CI server.. | Improve this Doc View Source DetailedLogging Enable detailed logging. Declaration public bool DetailedLogging { get; set; } Property Value Type Description System.Boolean true if detailed logging enabled. | Improve this Doc View Source MaxRunsAllowed Max limit for competition reruns. Default is 10. Declaration public int MaxRunsAllowed { get; set; } Property Value Type Description System.Int32 Max count of runs allowed. | Improve this Doc View Source ReportWarningsAsErrors Report warnings as errors. Declaration public bool ReportWarningsAsErrors { get; set; } Property Value Type Description System.Boolean true if competition warnings should be reported as errors; otherwise, false . See Also BenchmarkDotNet.Characteristics.CharacteristicObject <T>"
  },
  "api/perftests/CodeJam.PerfTests.Loggers.RedirectLogger.html": {
    "href": "api/perftests/CodeJam.PerfTests.Loggers.RedirectLogger.html",
    "title": "Class RedirectLogger | CodeJam",
    "keywords": "Class RedirectLogger Logger that redirects output to the supplied System.IO.TextWriter . Inheritance System.Object RedirectLogger Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Loggers Assembly : CodeJam.PerfTests.dll Syntax public sealed class RedirectLogger : IFlushableLogger, ILogger Constructors | Improve this Doc View Source RedirectLogger(TextWriter) Initializes a new instance of the RedirectLogger class. Declaration public RedirectLogger(TextWriter output) Parameters Type Name Description System.IO.TextWriter output The output. Methods | Improve this Doc View Source Flush() Flushes the log. Declaration public void Flush() Implements IFlushableLogger.Flush() | Improve this Doc View Source Write(LogKind, String) Writes text. Declaration public void Write(LogKind logKind, string text) Parameters Type Name Description BenchmarkDotNet.Loggers.LogKind logKind Kind of text. System.String text The text to write. Implements BenchmarkDotNet.Loggers.ILogger.Write(BenchmarkDotNet.Loggers.LogKind, System.String) | Improve this Doc View Source WriteLine() Write empty line. Declaration public void WriteLine() Implements BenchmarkDotNet.Loggers.ILogger.WriteLine() | Improve this Doc View Source WriteLine(LogKind, String) Writes line. Declaration public void WriteLine(LogKind logKind, string text) Parameters Type Name Description BenchmarkDotNet.Loggers.LogKind logKind Kind of text. System.String text The text to write. Implements BenchmarkDotNet.Loggers.ILogger.WriteLine(BenchmarkDotNet.Loggers.LogKind, System.String) Extension Methods LoggerHelpers.WriteSeparatorLine(ILogger) LoggerHelpers.WriteSeparatorLine(ILogger, String) LoggerHelpers.WriteSeparatorLine(ILogger, String, Boolean) CompetitionCoreHelpers.WriteVerboseHint(ILogger, String) CompetitionCoreHelpers.WriteVerbose(ILogger, String) See Also BenchmarkDotNet.Loggers.ILogger"
  },
  "api/perftests/CodeJam.PerfTests.Loggers.html": {
    "href": "api/perftests/CodeJam.PerfTests.Loggers.html",
    "title": "Namespace CodeJam.PerfTests.Loggers | CodeJam",
    "keywords": "Namespace CodeJam.PerfTests.Loggers Classes FilteringLogger Basic logger implementation that supports message filtering. LoggerHelpers Logger helpers. RedirectLogger Logger that redirects output to the supplied System.IO.TextWriter . Enums LogFilter Log filtering mode."
  },
  "api/perftests/CodeJam.PerfTests.MeanTimeAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.MeanTimeAttribute.html",
    "title": "Class MeanTimeAttribute | CodeJam",
    "keywords": "Class MeanTimeAttribute Absolute time metric attribute based on mean execution time. Inheritance System.Object System.Attribute MetricAttributeBase MeanTimeAttribute Inherited Members MetricAttributeBase.Min MetricAttributeBase.Max MetricAttributeBase.IStoredMetricValue.MetricAttributeType System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax [MetricInfo(\"Time\")] public class MeanTimeAttribute : MetricAttributeBase, _Attribute, IMetricAttribute<MeanTimeAttribute.ValuesProvider, TimeUnit>, IMetricAttribute<MeanTimeAttribute.ValuesProvider>, IStoredMetricValue Constructors | Improve this Doc View Source MeanTimeAttribute() Initializes a new instance of the MeanTimeAttribute class. Declaration public MeanTimeAttribute() | Improve this Doc View Source MeanTimeAttribute(Double, TimeUnit) Initializes a new instance of the MeanTimeAttribute class. Declaration public MeanTimeAttribute(double max, TimeUnit timeUnit = TimeUnit.Nanosecond) Parameters Type Name Description System.Double max The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially). TimeUnit timeUnit The time unit. | Improve this Doc View Source MeanTimeAttribute(Double, Double, TimeUnit) Initializes a new instance of the MeanTimeAttribute class. Declaration public MeanTimeAttribute(double min, double max, TimeUnit timeUnit = TimeUnit.Nanosecond) Parameters Type Name Description System.Double min The minimum value. The System.Double.NaN marks the value as unset but updateable during the annotation. The System.Double.NegativeInfinity should be used if value is negative infinity (ignored, essentially). System.Double max The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially). TimeUnit timeUnit The time unit. Properties | Improve this Doc View Source UnitOfMeasurement Gets unit of measurement for the metric. Declaration public TimeUnit UnitOfMeasurement { get; } Property Value Type Description TimeUnit The unit of measurement for the metric. Implements IMetricAttribute<TMetricProvider, TUnitOfMeasurement>.UnitOfMeasurement"
  },
  "api/perftests/CodeJam.PerfTests.Metrics.GcMetricSource.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.GcMetricSource.html",
    "title": "Enum GcMetricSource | CodeJam",
    "keywords": "Enum GcMetricSource Property of the BenchmarkDotNet.Engines.GcStats to be used as a GC metric value Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public enum GcMetricSource Fields Name Description BytesAllocatedPerOperation Bytes allocated per operation. Noise allocations (total bytes allocated less than gc allocation quantum are returned as 0 . BytesAllocatedPerOperationRaw Bytes allocated per operation including noise allocations (those with total bytes allocated less than gc allocation quantum). Gen0CollectionsPer1000 Gen0 collections per 1000 ops. Gen1CollectionsPer1000 Gen1 collections per 1000 ops. Gen2CollectionsPer1000 Gen2 collections per 1000 ops."
  },
  "api/perftests/CodeJam.PerfTests.WellKnownMetrics.html": {
    "href": "api/perftests/CodeJam.PerfTests.WellKnownMetrics.html",
    "title": "Class WellKnownMetrics | CodeJam",
    "keywords": "Class WellKnownMetrics Lists well known competition metrics Inheritance System.Object WellKnownMetrics Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax public static class WellKnownMetrics Fields | Improve this Doc View Source ExpectedTime The expected execution time metric based on 95th percentile. Declaration public static readonly MetricInfo<ExpectedTimeAttribute> ExpectedTime Field Value Type Description MetricInfo < ExpectedTimeAttribute > | Improve this Doc View Source Gc0 GC 0 count metric. Declaration public static readonly MetricInfo<Gc0Attribute> Gc0 Field Value Type Description MetricInfo < Gc0Attribute > | Improve this Doc View Source Gc1 GC 1 count metric. Declaration public static readonly MetricInfo<Gc1Attribute> Gc1 Field Value Type Description MetricInfo < Gc1Attribute > | Improve this Doc View Source Gc2 GC 2 count metric. Declaration public static readonly MetricInfo<Gc2Attribute> Gc2 Field Value Type Description MetricInfo < Gc2Attribute > | Improve this Doc View Source GcAllocations GC allocations metric, in bytes. Declaration public static readonly MetricInfo<GcAllocationsAttribute> GcAllocations Field Value Type Description MetricInfo < GcAllocationsAttribute > | Improve this Doc View Source MeanTime The mean execution time metric. Declaration public static readonly MetricInfo<MeanTimeAttribute> MeanTime Field Value Type Description MetricInfo < MeanTimeAttribute > | Improve this Doc View Source RelativeTime The relative time metric. Declaration public static readonly MetricInfo<CompetitionBenchmarkAttribute> RelativeTime Field Value Type Description MetricInfo < CompetitionBenchmarkAttribute >"
  },
  "api/perftests/CodeJam.PerfTests.html": {
    "href": "api/perftests/CodeJam.PerfTests.html",
    "title": "Namespace CodeJam.PerfTests | CodeJam",
    "keywords": "Namespace CodeJam.PerfTests Classes CompetitionAnnotateSourcesAttribute Enables source annotations feature. CompetitionBaselineAttribute Attribute for baseline competition benchmark. CompetitionBenchmarkAttribute Attribute for competition benchmark. CompetitionBurstModeAttribute Enables burst mode feature. Benchmark code is called once per measurement. Recommended for use if single call time >> than timer resolution (recommended minimum is 1000 ns). CompetitionConfigAttribute Competition config attribute. CompetitionConfigFactoryAttribute Competition config factory attribute. CompetitionFeaturesAttribute Modifier attribute for competition features. CompetitionHelpers Reusable API for performance tests. CompetitionModifierAttribute Competition config modifier attribute. CompetitionPlatformAttribute Specifies target platform for the competition. CompetitionPreviewMetricsAttribute Enables metric preview feature (new metric values are logged but sources will not be updated. CompetitionReannotateSourcesAttribute Enables source reannotations feature. CompetitionRunHelpers Reusable API for code that used during perftest run. CompetitionTroubleshootingModeAttribute Enables troubleshooting mode feature. CompetitionXmlAnnotationAttribute Attribute for benchmark classes that stores source annotations as embedded xml resource. ExpectedTimeAttribute Absolute time metric attribute based on 95th percentile. Gc0Attribute GC 0 count per 1000 operations metric attribute. Gc1Attribute GC 1 count per 1000 operations metric attribute. Gc2Attribute GC 2 count per 1000 operations metric attribute. GcAllocationsAttribute Gc allocations metric attribute. NOTE: Noise allocations (total bytes allocated less than minimum gc allocation quantum) are reported as 0 MeanTimeAttribute Absolute time metric attribute based on mean execution time. WellKnownMetrics Lists well known competition metrics Enums TimeUnit Time measurement units"
  },
  "api/perftests/BenchmarkDotNet.Horology.ProcessCycleTimeClock.html": {
    "href": "api/perftests/BenchmarkDotNet.Horology.ProcessCycleTimeClock.html",
    "title": "Class ProcessCycleTimeClock | CodeJam",
    "keywords": "Class ProcessCycleTimeClock BenchmarkDotNet.Horology.IClock implementation over QueryProcessCycleTime(). WARNING: results are inaccurate (up to +/- 30% to actual time), see https://blogs.msdn.microsoft.com/oldnewthing/20160429-00/?p=93385 for more. Inheritance System.Object ProcessCycleTimeClock Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : BenchmarkDotNet.Horology Assembly : CodeJam.PerfTests.dll Syntax public sealed class ProcessCycleTimeClock : IClock Fields | Improve this Doc View Source Instance Default instance of ProcessCycleTimeClock . Declaration public static readonly IClock Instance Field Value Type Description BenchmarkDotNet.Horology.IClock Properties | Improve this Doc View Source Frequency Gets the frequency. Declaration public Frequency Frequency { get; } Property Value Type Description BenchmarkDotNet.Horology.Frequency The frequency. Implements BenchmarkDotNet.Horology.IClock.Frequency | Improve this Doc View Source IsAvailable Gets a value indicating whether this instance is available. Declaration public bool IsAvailable { get; } Property Value Type Description System.Boolean true if this instance is available; otherwise, false . Implements BenchmarkDotNet.Horology.IClock.IsAvailable Methods | Improve this Doc View Source GetTimestamp() Gets the timestamp. Declaration public long GetTimestamp() Returns Type Description System.Int64 Implements BenchmarkDotNet.Horology.IClock.GetTimestamp() | Improve this Doc View Source ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() See Also BenchmarkDotNet.Horology.IClock"
  },
  "api/perftests/BenchmarkDotNet.Horology.ThreadCycleTimeClock.html": {
    "href": "api/perftests/BenchmarkDotNet.Horology.ThreadCycleTimeClock.html",
    "title": "Class ThreadCycleTimeClock | CodeJam",
    "keywords": "Class ThreadCycleTimeClock BenchmarkDotNet.Horology.IClock implementation over QueryThreadCycleTime(). WARNING: results are inaccurate (up to +/- 30% to actual time), see https://blogs.msdn.microsoft.com/oldnewthing/20160429-00/?p=93385 for more. Inheritance System.Object ThreadCycleTimeClock Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : BenchmarkDotNet.Horology Assembly : CodeJam.PerfTests.dll Syntax public sealed class ThreadCycleTimeClock : IClock Fields | Improve this Doc View Source Instance Default instance of ThreadCycleTimeClock . Declaration public static readonly IClock Instance Field Value Type Description BenchmarkDotNet.Horology.IClock Properties | Improve this Doc View Source Frequency Gets the frequency. Declaration public Frequency Frequency { get; } Property Value Type Description BenchmarkDotNet.Horology.Frequency The frequency. Implements BenchmarkDotNet.Horology.IClock.Frequency | Improve this Doc View Source IsAvailable Gets a value indicating whether this instance is available. Declaration public bool IsAvailable { get; } Property Value Type Description System.Boolean true if this instance is available; otherwise, false . Implements BenchmarkDotNet.Horology.IClock.IsAvailable Methods | Improve this Doc View Source GetTimestamp() Gets the timestamp. Declaration public long GetTimestamp() Returns Type Description System.Int64 Implements BenchmarkDotNet.Horology.IClock.GetTimestamp() | Improve this Doc View Source ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString() See Also BenchmarkDotNet.Horology.IClock"
  },
  "api/perftests/CodeJam.PerfTests.Columns.html": {
    "href": "api/perftests/CodeJam.PerfTests.Columns.html",
    "title": "Namespace CodeJam.PerfTests.Columns | CodeJam",
    "keywords": "Namespace CodeJam.PerfTests.Columns Classes CompetitionCharacteristicColumn Column that displays one of CompetitionOptions characteristic. CompetitionOptionsColumnProvider A column provider for CompetitionCharacteristicColumn MetricValueColumn Displays metric for the benchmark. Enums MetricValueColumn.Kind Metric column value."
  },
  "api/perftests/CodeJam.PerfTests.CompetitionAnnotateSourcesAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionAnnotateSourcesAttribute.html",
    "title": "Class CompetitionAnnotateSourcesAttribute | CodeJam",
    "keywords": "Class CompetitionAnnotateSourcesAttribute Enables source annotations feature. Inheritance System.Object System.Attribute CompetitionFeaturesAttribute CompetitionAnnotateSourcesAttribute Inherited Members CompetitionFeaturesAttribute.BurstMode CompetitionFeaturesAttribute.ContinuousIntegrationMode CompetitionFeaturesAttribute.Platform CompetitionFeaturesAttribute.AnnotateSources CompetitionFeaturesAttribute.IgnoreExistingAnnotations CompetitionFeaturesAttribute.PreviousRunLogUri CompetitionFeaturesAttribute.ReportWarningsAsErrors CompetitionFeaturesAttribute.TroubleshootingMode CompetitionFeaturesAttribute.ImportantInfoLogger CompetitionFeaturesAttribute.DetailedLogger CompetitionFeaturesAttribute.GetFeatures() System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax public class CompetitionAnnotateSourcesAttribute : CompetitionFeaturesAttribute, _Attribute, ICompetitionFeatures Constructors | Improve this Doc View Source CompetitionAnnotateSourcesAttribute() Initializes a new instance of the CompetitionAnnotateSourcesAttribute class. Declaration public CompetitionAnnotateSourcesAttribute() | Improve this Doc View Source CompetitionAnnotateSourcesAttribute(String) Initializes a new instance of the CompetitionAnnotateSourcesAttribute class. Declaration public CompetitionAnnotateSourcesAttribute(string previousRunLogUri) Parameters Type Name Description System.String previousRunLogUri Sets the PreviousRunLogUri to the specified value."
  },
  "api/perftests/CodeJam.PerfTests.CompetitionBurstModeAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionBurstModeAttribute.html",
    "title": "Class CompetitionBurstModeAttribute | CodeJam",
    "keywords": "Class CompetitionBurstModeAttribute Enables burst mode feature. Benchmark code is called once per measurement. Recommended for use if single call time >> than timer resolution (recommended minimum is 1000 ns). Inheritance System.Object System.Attribute CompetitionFeaturesAttribute CompetitionBurstModeAttribute Inherited Members CompetitionFeaturesAttribute.BurstMode CompetitionFeaturesAttribute.ContinuousIntegrationMode CompetitionFeaturesAttribute.Platform CompetitionFeaturesAttribute.AnnotateSources CompetitionFeaturesAttribute.IgnoreExistingAnnotations CompetitionFeaturesAttribute.PreviousRunLogUri CompetitionFeaturesAttribute.ReportWarningsAsErrors CompetitionFeaturesAttribute.TroubleshootingMode CompetitionFeaturesAttribute.ImportantInfoLogger CompetitionFeaturesAttribute.DetailedLogger CompetitionFeaturesAttribute.GetFeatures() System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax public class CompetitionBurstModeAttribute : CompetitionFeaturesAttribute, _Attribute, ICompetitionFeatures Constructors | Improve this Doc View Source CompetitionBurstModeAttribute() Initializes a new instance of the CompetitionBurstModeAttribute class. Declaration public CompetitionBurstModeAttribute()"
  },
  "api/perftests/CodeJam.PerfTests.Configs.CompetitionConfigExtensions.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.CompetitionConfigExtensions.html",
    "title": "Class CompetitionConfigExtensions | CodeJam",
    "keywords": "Class CompetitionConfigExtensions Expensions for ICompetitionConfig Inheritance System.Object CompetitionConfigExtensions Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public static class CompetitionConfigExtensions Methods | Improve this Doc View Source WithAllowDebugBuilds(ICompetitionConfig, Boolean) Allow debug builds to be used in competitions. Declaration public static ICompetitionConfig WithAllowDebugBuilds(this ICompetitionConfig config, bool value) Parameters Type Name Description ICompetitionConfig config The config. System.Boolean value true if debug builds allowed. Returns Type Description ICompetitionConfig A new config with applied parameters. | Improve this Doc View Source WithDetailedLogging(ICompetitionConfig, Boolean) Enables or disables detailed logging. Declaration public static ICompetitionConfig WithDetailedLogging(this ICompetitionConfig config, bool value) Parameters Type Name Description ICompetitionConfig config The config. System.Boolean value true if detailed logging enabled. Returns Type Description ICompetitionConfig A new config with applied parameters. | Improve this Doc View Source WithLongRunningBenchmarkLimit(ICompetitionConfig, TimeSpan) Sets timing limit to detect long-running benchmarks. Declaration public static ICompetitionConfig WithLongRunningBenchmarkLimit(this ICompetitionConfig config, TimeSpan value) Parameters Type Name Description ICompetitionConfig config The config. System.TimeSpan value Timing limit to detect long-running benchmarks. Returns Type Description ICompetitionConfig A new config with applied parameters. | Improve this Doc View Source WithModifier(ICompetitionConfig, Job) Applies job modifier. Declaration public static ICompetitionConfig WithModifier(this ICompetitionConfig config, Job jobModifier) Parameters Type Name Description ICompetitionConfig config The config. BenchmarkDotNet.Jobs.Job jobModifier Job modifier to apply. Returns Type Description ICompetitionConfig Config with applied job modifier. | Improve this Doc View Source WithModifier(ICompetitionConfig, CompetitionOptions) Applies the specified competition options. Declaration public static ICompetitionConfig WithModifier(this ICompetitionConfig config, CompetitionOptions optionsModifier) Parameters Type Name Description ICompetitionConfig config The config. CompetitionOptions optionsModifier Competition options to apply. Returns Type Description ICompetitionConfig Config with applied competition options. | Improve this Doc View Source WithPreviousRunLogUri(ICompetitionConfig, String) URI of the log that contains competition limits from previous run(s). Declaration public static ICompetitionConfig WithPreviousRunLogUri(this ICompetitionConfig config, string value) Parameters Type Name Description ICompetitionConfig config The config. System.String value URI of the log that contains competition limits from previous run(s). Relative paths, file paths and web URLs are supported. Set the LogAnnotations to true to enable logged annotations. Returns Type Description ICompetitionConfig A new config with applied parameters. | Improve this Doc View Source WithReportWarningsAsErrors(ICompetitionConfig, Boolean) Report warnings as errors. Declaration public static ICompetitionConfig WithReportWarningsAsErrors(this ICompetitionConfig config, bool value) Parameters Type Name Description ICompetitionConfig config The config. System.Boolean value true if competition warnings should be reported as errors. Returns Type Description ICompetitionConfig A new config with applied parameters. | Improve this Doc View Source WithTooFastBenchmarkLimit(ICompetitionConfig, TimeSpan) Sets timing limit to detect too fast benchmarks. Declaration public static ICompetitionConfig WithTooFastBenchmarkLimit(this ICompetitionConfig config, TimeSpan value) Parameters Type Name Description ICompetitionConfig config The config. System.TimeSpan value Timing limit to detect too fast benchmarks. Returns Type Description ICompetitionConfig A new config with applied parameters."
  },
  "api/perftests/CodeJam.PerfTests.Configs.Factories.ICompetitionConfigFactorySource.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.Factories.ICompetitionConfigFactorySource.html",
    "title": "Interface ICompetitionConfigFactorySource | CodeJam",
    "keywords": "Interface ICompetitionConfigFactorySource Base interface for ICompetitionConfigFactory attributes. Namespace : CodeJam.PerfTests.Configs.Factories Assembly : CodeJam.PerfTests.dll Syntax public interface ICompetitionConfigFactorySource Properties | Improve this Doc View Source ConfigFactory The competition config factory. Declaration ICompetitionConfigFactory ConfigFactory { get; } Property Value Type Description ICompetitionConfigFactory The competition config factory."
  },
  "api/perftests/CodeJam.PerfTests.Configs.Factories.ICompetitionModifier.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.Factories.ICompetitionModifier.html",
    "title": "Interface ICompetitionModifier | CodeJam",
    "keywords": "Interface ICompetitionModifier Competition config modifier. Namespace : CodeJam.PerfTests.Configs.Factories Assembly : CodeJam.PerfTests.dll Syntax public interface ICompetitionModifier Methods | Improve this Doc View Source Modify(ManualCompetitionConfig) Updates competition config. Declaration void Modify(ManualCompetitionConfig competitionConfig) Parameters Type Name Description ManualCompetitionConfig competitionConfig The competition config."
  },
  "api/perftests/CodeJam.PerfTests.Gc1Attribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.Gc1Attribute.html",
    "title": "Class Gc1Attribute | CodeJam",
    "keywords": "Class Gc1Attribute GC 1 count per 1000 operations metric attribute. Inheritance System.Object System.Attribute MetricAttributeBase Gc1Attribute Inherited Members MetricAttributeBase.Min MetricAttributeBase.Max MetricAttributeBase.UnitOfMeasurement MetricAttributeBase.IStoredMetricValue.MetricAttributeType System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax [MetricInfo(\"GcMemory\", AnnotateInPlace = true)] public class Gc1Attribute : MetricAttributeBase, _Attribute, IMetricAttribute<Gc1Attribute.ValuesProvider>, IStoredMetricValue Constructors | Improve this Doc View Source Gc1Attribute() Initializes a new instance of the Gc1Attribute class. Declaration public Gc1Attribute() | Improve this Doc View Source Gc1Attribute(Double) Initializes a new instance of the Gc1Attribute class. Declaration public Gc1Attribute(double value) Parameters Type Name Description System.Double value Count of GC per 1000 operations. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially). | Improve this Doc View Source Gc1Attribute(Double, Double) Initializes a new instance of the Gc1Attribute class. Declaration public Gc1Attribute(double min, double max) Parameters Type Name Description System.Double min The minimum value. The System.Double.NaN marks the value as unset but updateable during the annotation. The System.Double.NegativeInfinity should be used if value is negative infinity (ignored, essentially). System.Double max The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially)."
  },
  "api/perftests/CodeJam.PerfTests.Gc2Attribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.Gc2Attribute.html",
    "title": "Class Gc2Attribute | CodeJam",
    "keywords": "Class Gc2Attribute GC 2 count per 1000 operations metric attribute. Inheritance System.Object System.Attribute MetricAttributeBase Gc2Attribute Inherited Members MetricAttributeBase.Min MetricAttributeBase.Max MetricAttributeBase.UnitOfMeasurement MetricAttributeBase.IStoredMetricValue.MetricAttributeType System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax [MetricInfo(\"GcMemory\", AnnotateInPlace = true)] public class Gc2Attribute : MetricAttributeBase, _Attribute, IMetricAttribute<Gc2Attribute.ValuesProvider>, IStoredMetricValue Constructors | Improve this Doc View Source Gc2Attribute() Initializes a new instance of the Gc2Attribute class. Declaration public Gc2Attribute() | Improve this Doc View Source Gc2Attribute(Double) Initializes a new instance of the Gc2Attribute class. Declaration public Gc2Attribute(double value) Parameters Type Name Description System.Double value Count of GC per 1000 operations. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially). | Improve this Doc View Source Gc2Attribute(Double, Double) Initializes a new instance of the Gc2Attribute class. Declaration public Gc2Attribute(double min, double max) Parameters Type Name Description System.Double min The minimum value. The System.Double.NaN marks the value as unset but updateable during the annotation. The System.Double.NegativeInfinity should be used if value is negative infinity (ignored, essentially). System.Double max The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially)."
  },
  "api/perftests/CodeJam.PerfTests.GcAllocationsAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.GcAllocationsAttribute.html",
    "title": "Class GcAllocationsAttribute | CodeJam",
    "keywords": "Class GcAllocationsAttribute Gc allocations metric attribute. NOTE: Noise allocations (total bytes allocated less than minimum gc allocation quantum) are reported as 0 Inheritance System.Object System.Attribute MetricAttributeBase GcAllocationsAttribute Inherited Members MetricAttributeBase.Min MetricAttributeBase.Max MetricAttributeBase.IStoredMetricValue.MetricAttributeType System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax [MetricInfo(\"GcMemory\", MetricSingleValueMode.BothMinAndMax)] public class GcAllocationsAttribute : MetricAttributeBase, _Attribute, IMetricAttribute<GcAllocationsAttribute.ValuesProvider, BinarySizeUnit>, IMetricAttribute<GcAllocationsAttribute.ValuesProvider>, IStoredMetricValue Constructors | Improve this Doc View Source GcAllocationsAttribute() Initializes a new instance of the GcAllocationsAttribute class. Declaration public GcAllocationsAttribute() | Improve this Doc View Source GcAllocationsAttribute(Double, BinarySizeUnit) Initializes a new instance of the GcAllocationsAttribute class. Declaration public GcAllocationsAttribute(double value, BinarySizeUnit binarySize = BinarySizeUnit.Byte) Parameters Type Name Description System.Double value Exact amount of allocations. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially). CodeJam.PerfTests.BinarySizeUnit binarySize The binary size unit. | Improve this Doc View Source GcAllocationsAttribute(Double, Double, BinarySizeUnit) Initializes a new instance of the GcAllocationsAttribute class. Declaration public GcAllocationsAttribute(double min, double max, BinarySizeUnit binarySize = BinarySizeUnit.Byte) Parameters Type Name Description System.Double min The minimum value. The System.Double.NaN marks the value as unset but updateable during the annotation. The System.Double.NegativeInfinity should be used if value is negative infinity (ignored, essentially). System.Double max The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially). CodeJam.PerfTests.BinarySizeUnit binarySize The binary size unit. Properties | Improve this Doc View Source UnitOfMeasurement Gets unit of measurement for the metric. Declaration public BinarySizeUnit UnitOfMeasurement { get; } Property Value Type Description CodeJam.PerfTests.BinarySizeUnit The unit of measurement for the metric. Implements IMetricAttribute<TMetricProvider, TUnitOfMeasurement>.UnitOfMeasurement"
  },
  "api/perftests/CodeJam.PerfTests.Loggers.FilteringLogger.html": {
    "href": "api/perftests/CodeJam.PerfTests.Loggers.FilteringLogger.html",
    "title": "Class FilteringLogger | CodeJam",
    "keywords": "Class FilteringLogger Basic logger implementation that supports message filtering. Inheritance System.Object FilteringLogger CompetitionRunnerBase.HostLogger Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Loggers Assembly : CodeJam.PerfTests.dll Syntax public class FilteringLogger : IFlushableLogger, ILogger Constructors | Improve this Doc View Source FilteringLogger(ILogger, LogFilter) Initializes a new instance of the FilteringLogger class. Declaration public FilteringLogger(ILogger wrappedLogger, LogFilter logFilter) Parameters Type Name Description BenchmarkDotNet.Loggers.ILogger wrappedLogger The logger to redirect the output. Cannot be null. LogFilter logFilter The log filtering mode. Fields | Improve this Doc View Source LogImportantAreaEnd The end prefix for important log area. Lines between start and end prefixes will be written even if LogFilter filter applied. Declaration public const string LogImportantAreaEnd = \"// !-->\" Field Value Type Description System.String | Improve this Doc View Source LogImportantAreaStart The start prefix for important log area. Lines between start and end prefixes will be written even if LogFilter filter applied. Declaration public const string LogImportantAreaStart = \"// !<--\" Field Value Type Description System.String | Improve this Doc View Source LogImportantInfoPrefix The prefix for important log lines. Lines with this prefix will be written even if LogFilter filter applied. Declaration public const string LogImportantInfoPrefix = \"// !\" Field Value Type Description System.String | Improve this Doc View Source LogInfoPrefix The prefix for informational log lines. Lines with this prefix will be written even if LogFilter filter applied. Declaration public const string LogInfoPrefix = \"// ?\" Field Value Type Description System.String | Improve this Doc View Source LogVerbosePrefix The prefix for verbose log lines. Lines with this prefix will be written only if AllMessages mode set. Declaration public const string LogVerbosePrefix = \"// \" Field Value Type Description System.String Properties | Improve this Doc View Source LogFilter Gets log filtering mode. Declaration public LogFilter LogFilter { get; } Property Value Type Description LogFilter The log filtering mode. | Improve this Doc View Source WrappedLogger Gets logger that consumes filtered text. Declaration protected ILogger WrappedLogger { get; } Property Value Type Description BenchmarkDotNet.Loggers.ILogger The logger that consumes filtered text. Methods | Improve this Doc View Source BeginLogImportant(IConfig) All messages within the scope will be passed to the log. Declaration public static IDisposable BeginLogImportant(IConfig config) Parameters Type Name Description BenchmarkDotNet.Configs.IConfig config Config with loggers. Returns Type Description System.IDisposable Disposable to mark the scope completion. | Improve this Doc View Source PreprocessLine(String) Handles well-known prefixes for the line. Declaration protected virtual bool PreprocessLine(string text) Parameters Type Name Description System.String text The text of the log line. Returns Type Description System.Boolean true if the line should be written. | Improve this Doc View Source ShouldWrite(LogKind) Checks if the line should be written. Declaration protected virtual bool ShouldWrite(LogKind logKind) Parameters Type Name Description BenchmarkDotNet.Loggers.LogKind logKind The kind of log message. Returns Type Description System.Boolean true if the line should be written. | Improve this Doc View Source Write(LogKind, String) Writes text. Declaration public virtual void Write(LogKind logKind, string text) Parameters Type Name Description BenchmarkDotNet.Loggers.LogKind logKind Kind of text. System.String text The text to write. Implements BenchmarkDotNet.Loggers.ILogger.Write(BenchmarkDotNet.Loggers.LogKind, System.String) | Improve this Doc View Source WriteLine() Write empty line. Declaration public virtual void WriteLine() Implements BenchmarkDotNet.Loggers.ILogger.WriteLine() | Improve this Doc View Source WriteLine(LogKind, String) Writes line. Declaration public virtual void WriteLine(LogKind logKind, string text) Parameters Type Name Description BenchmarkDotNet.Loggers.LogKind logKind Kind of text. System.String text The text to write. Implements BenchmarkDotNet.Loggers.ILogger.WriteLine(BenchmarkDotNet.Loggers.LogKind, System.String) Explicit Interface Implementations | Improve this Doc View Source IFlushableLogger.Flush() Flushes the log. Declaration void IFlushableLogger.Flush() Implements IFlushableLogger.Flush() Extension Methods LoggerHelpers.WriteSeparatorLine(ILogger) LoggerHelpers.WriteSeparatorLine(ILogger, String) LoggerHelpers.WriteSeparatorLine(ILogger, String, Boolean) CompetitionCoreHelpers.WriteVerboseHint(ILogger, String) CompetitionCoreHelpers.WriteVerbose(ILogger, String) See Also BenchmarkDotNet.Loggers.ILogger"
  },
  "api/perftests/CodeJam.PerfTests.Metrics.MetricUnitScale.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.MetricUnitScale.html",
    "title": "Class MetricUnitScale | CodeJam",
    "keywords": "Class MetricUnitScale Metric measurement scale. Inheritance System.Object MetricUnitScale Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public sealed class MetricUnitScale Fields | Improve this Doc View Source Empty Empty measurement scale. Declaration public static readonly MetricUnitScale Empty Field Value Type Description MetricUnitScale Properties | Improve this Doc View Source IsEmpty Gets a value indicating whether the measurement scale is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if the measurement scale is empty; otherwise, false . | Improve this Doc View Source Item[MetricRange] Finds best applicable MetricUnit for measured values. Declaration public MetricUnit this[MetricRange measuredValues] { get; } Parameters Type Name Description MetricRange measuredValues Range of measured values. Property Value Type Description MetricUnit The MetricUnit . | Improve this Doc View Source Item[Double] Finds best applicable MetricUnit for measured value. Declaration public MetricUnit this[double measuredValue] { get; } Parameters Type Name Description System.Double measuredValue The measured value. Property Value Type Description MetricUnit The MetricUnit . | Improve this Doc View Source Item[Enum] Gets the MetricUnit with the specified enum value. Declaration public MetricUnit this[Enum enumValue] { get; } Parameters Type Name Description System.Enum enumValue The enum value. Property Value Type Description MetricUnit The MetricUnit . | Improve this Doc View Source Item[String] Gets the MetricUnit with the specified name. Declaration public MetricUnit this[string name] { get; } Parameters Type Name Description System.String name The name. Property Value Type Description MetricUnit The MetricUnit . | Improve this Doc View Source MetricEnumType Gets type of the metric unit enum. Declaration public Type MetricEnumType { get; } Property Value Type Description System.Type The type of the metric unit enum. null if IsEmpty . Methods | Improve this Doc View Source FromEnumValues(Type) Creates metric measurement scale. Declaration public static MetricUnitScale FromEnumValues(Type metricEnumType) Parameters Type Name Description System.Type metricEnumType Type of enum that defines metric unit values. Apply MetricUnitAttribute to the enum members to override metric unit values. Returns Type Description MetricUnitScale The metric measurement scale. Empty if metricEnumType is null . | Improve this Doc View Source ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString()"
  },
  "api/perftests/CodeJam.PerfTests.Metrics.MetricValueColumns.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.MetricValueColumns.html",
    "title": "Enum MetricValueColumns | CodeJam",
    "keywords": "Enum MetricValueColumns Metric value columns to return. Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax [Flags] public enum MetricValueColumns Fields Name Description Auto List of columns is determined by metric values provider. The flag is ignored when combined with others. Default Default (mean only) Max Max value column. Mean Mean value column. Min Min value column. MinAndMax The min and max values columns. None No columns. StdDev Standard deviation column. ValueAndStdDev The value and standard deviation columns."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.MetricValueHelpers.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.MetricValueHelpers.html",
    "title": "Class MetricValueHelpers | CodeJam",
    "keywords": "Class MetricValueHelpers Extension methods for MetricUnit and MetricUnitScale . Inheritance System.Object MetricValueHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public static class MetricValueHelpers Methods | Improve this Doc View Source ContainsWithRounding(MetricRange, MetricRange, MetricUnit) Determines whether the range contains another one. The check is performed using same rounding that will be used to store the metricValues . Declaration public static bool ContainsWithRounding(this MetricRange metricValues, MetricRange other, MetricUnit metricUnit) Parameters Type Name Description MetricRange metricValues Range of metric values. MetricRange other The metric range to check. MetricUnit metricUnit The metric measurement unit that will be used to store the metricValues . Returns Type Description System.Boolean true , if the range contains another one. | Improve this Doc View Source CreateMetricRange(Nullable<Double>, Nullable<Double>) Creates a new metric range. Declaration public static MetricRange CreateMetricRange(double ? min, double ? max) Parameters Type Name Description System.Nullable < System.Double > min The minimum value. The EmptyMetricValue marks the range as unset but updateable during the annotation. Use null or MetricRange to set min value to negative infinity (ignored, essentially). System.Nullable < System.Double > max The maximum value. Use EmptyMetricValue to mark the range as unset but updateable during the annotation. Use null or ToPositiveInfinity to set max value to positive infinity (ignored, essentially). Returns Type Description MetricRange Metrics range. | Improve this Doc View Source CreateMetricRange(Nullable<Double>, Nullable<Double>, MetricUnit) Creates a new metric range. Declaration public static MetricRange CreateMetricRange(double ? min, double ? max, MetricUnit metricUnit) Parameters Type Name Description System.Nullable < System.Double > min The minimum value. The EmptyMetricValue marks the range as unset but updateable during the annotation. Use null or EmptyMetricValue to set min value to negative infinity (ignored, essentially). System.Nullable < System.Double > max The maximum value. Use MetricRange to mark the range as unset but updateable during the annotation. Use null or MetricRange to set max value to positive infinity (ignored, essentially). MetricUnit metricUnit The metric unit that was used to store metric range. Returns Type Description MetricRange Metrics range. | Improve this Doc View Source GetAutoscaledFormat(Double) Gets the autoscaled format for the value. Declaration public static string GetAutoscaledFormat(double value) Parameters Type Name Description System.Double value The value. Returns Type Description System.String Autoscaled format for the value | Improve this Doc View Source GetMinMaxString(MetricRange, MetricUnit, out String, out String) Returns a System.String representation of min and max parts of a metric value. Declaration public static void GetMinMaxString(this MetricRange metricValues, MetricUnit metricUnit, out string minString, out string maxString) Parameters Type Name Description MetricRange metricValues Range of metric values. MetricUnit metricUnit The metric measurement unit. System.String minString String representation of min part of a metric value. System.String maxString String representation of max part of a metric value. | Improve this Doc View Source MinMaxAreSame(MetricRange, MetricUnit) Determines whether the range can be represented as a single point range (scaled and rounded min and max are the same). Declaration public static bool MinMaxAreSame(this MetricRange metricValues, MetricUnit metricUnit) Parameters Type Name Description MetricRange metricValues Range of metric values. MetricUnit metricUnit The metric measurement unit that will be used to store the metricValues . Returns Type Description System.Boolean true , if the range can be represented as a single point range. | Improve this Doc View Source ToString(MetricRange, MetricUnit) Returns a System.String representation of a metric value. Declaration public static string ToString(this MetricRange metricValues, MetricUnit metricUnit) Parameters Type Name Description MetricRange metricValues Range of metric values. MetricUnit metricUnit The metric measurement unit. Returns Type Description System.String A System.String that represents the metric value. | Improve this Doc View Source ToString(MetricRange, MetricUnitScale) Returns a System.String representation of a metric value. Declaration public static string ToString(this MetricRange metricValues, MetricUnitScale metricUnitScale) Parameters Type Name Description MetricRange metricValues Range of metric values. MetricUnitScale metricUnitScale The metric measurement scale. Returns Type Description System.String A System.String that represents the metric value. | Improve this Doc View Source ToString(Double, MetricUnit) Returns a System.String representation of a metric value. Declaration public static string ToString(this double metricValue, MetricUnit metricUnit) Parameters Type Name Description System.Double metricValue The metric value. MetricUnit metricUnit The metric measurement unit. Returns Type Description System.String A System.String that represents the metric value. | Improve this Doc View Source ToString(Double, MetricUnitScale) Returns a System.String representation of a metric value. Declaration public static string ToString(this double metricValue, MetricUnitScale metricUnitScale) Parameters Type Name Description System.Double metricValue The metric value. MetricUnitScale metricUnitScale The metric measurement scale. Returns Type Description System.String A System.String that represents the metric value."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.MetricValuesProviderBase.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.MetricValuesProviderBase.html",
    "title": "Class MetricValuesProviderBase | CodeJam",
    "keywords": "Class MetricValuesProviderBase Base implementation of the IMetricValuesProvider Inheritance System.Object MetricValuesProviderBase GcMetricValuesProvider TimeMetricValuesProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public abstract class MetricValuesProviderBase : IMetricValuesProvider Constructors | Improve this Doc View Source MetricValuesProviderBase(IMetricCalculator, Boolean) Initializes a new instance of the MetricValuesProviderBase class. Declaration protected MetricValuesProviderBase(IMetricCalculator calculator, bool resultIsRelative) Parameters Type Name Description IMetricCalculator calculator The metric calculator. System.Boolean resultIsRelative true if the metric is relative. Properties | Improve this Doc View Source MetricCalculator Gets the metric calculator. Declaration protected IMetricCalculator MetricCalculator { get; } Property Value Type Description IMetricCalculator The metric calculator. | Improve this Doc View Source ResultIsRelative Gets a value indicating whether this instance is relative metric provider. Declaration public bool ResultIsRelative { get; } Property Value Type Description System.Boolean true if this instance is relative metric provider; otherwise, false . Implements IMetricValuesProvider.ResultIsRelative Methods | Improve this Doc View Source CreateColumnProvider(MetricInfo, MetricValueColumns) Creates the column provider for the metric columns. Declaration protected static IColumnProvider CreateColumnProvider(MetricInfo metric, MetricValueColumns columns) Parameters Type Name Description MetricInfo metric The metric to get columns for. MetricValueColumns columns The columns to include. Returns Type Description BenchmarkDotNet.Columns.IColumnProvider Column provider for the metric columns | Improve this Doc View Source GetColumnProvider(MetricInfo, MetricValueColumns) Gets column provider for the metric values. Declaration public IColumnProvider GetColumnProvider(MetricInfo metric, MetricValueColumns columns) Parameters Type Name Description MetricInfo metric The metric to get columns for. MetricValueColumns columns The columns to include. Returns Type Description BenchmarkDotNet.Columns.IColumnProvider Column provider for the metric values Implements IMetricValuesProvider.GetColumnProvider(MetricInfo, MetricValueColumns) | Improve this Doc View Source GetColumnProviderOverride(MetricInfo, MetricValueColumns) Gets column provider for the metric values. Declaration protected virtual IColumnProvider GetColumnProviderOverride(MetricInfo metric, MetricValueColumns columns) Parameters Type Name Description MetricInfo metric The metric to get columns for. MetricValueColumns columns The columns to include. Returns Type Description BenchmarkDotNet.Columns.IColumnProvider Column provider for the metric values | Improve this Doc View Source GetDiagnosers(MetricInfo) Gets diagnosers the metric values. Declaration public IDiagnoser[] GetDiagnosers(MetricInfo metric) Parameters Type Name Description MetricInfo metric The metric to get diagnosers for. Returns Type Description BenchmarkDotNet.Diagnosers.IDiagnoser [] Diagnosers for the metric values Implements IMetricValuesProvider.GetDiagnosers(MetricInfo) | Improve this Doc View Source GetDiagnosersOverride(MetricInfo) Gets diagnosers the metric values. Declaration protected abstract IDiagnoser[] GetDiagnosersOverride(MetricInfo metric) Parameters Type Name Description MetricInfo metric The metric to get diagnosers for. Returns Type Description BenchmarkDotNet.Diagnosers.IDiagnoser [] Diagnosers for the metric values | Improve this Doc View Source GetValuesFromReport(BenchmarkReport, Summary) Gets the values from benchmark report. Declaration protected abstract double[] GetValuesFromReport(BenchmarkReport benchmarkReport, Summary summary) Parameters Type Name Description BenchmarkDotNet.Reports.BenchmarkReport benchmarkReport The benchmark report. BenchmarkDotNet.Reports.Summary summary The summary. Returns Type Description System.Double [] Metric values from benchmark report | Improve this Doc View Source TryGetActualValues(Benchmark, Summary) Gets range that describes actual values for the benchmark. Declaration public MetricRange TryGetActualValues(Benchmark benchmark, Summary summary) Parameters Type Name Description BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.Summary summary Summary for the run. Returns Type Description MetricRange Range that describes actual values for the benchmark (or empty range if none). Implements IMetricValuesProvider.TryGetActualValues(Benchmark, Summary) | Improve this Doc View Source TryGetLimitValues(Benchmark, Summary) Gets range that describes expected limits for the benchmark. Should be wider than TryGetActualValues(Benchmark, Summary) . Declaration public MetricRange TryGetLimitValues(Benchmark benchmark, Summary summary) Parameters Type Name Description BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.Summary summary Summary for the run. Returns Type Description MetricRange Range that describes expected limits for the benchmark (or empty range if none). Implements IMetricValuesProvider.TryGetLimitValues(Benchmark, Summary) | Improve this Doc View Source TryGetMeanValue(Benchmark, Summary) Gets actual value for the benchmark (averaged). Declaration public double ? TryGetMeanValue(Benchmark benchmark, Summary summary) Parameters Type Name Description BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.Summary summary Summary for the run. Returns Type Description System.Nullable < System.Double > Actual value for the benchmark or null if none. Implements IMetricValuesProvider.TryGetMeanValue(Benchmark, Summary) | Improve this Doc View Source TryGetRelativeValues(Benchmark, Summary, out Double[], out Double[]) Tries to get values for the relative metric. Declaration protected virtual bool TryGetRelativeValues(Benchmark benchmark, Summary summary, out double[] metricValues, out double[] baselineMetricValues) Parameters Type Name Description BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.Summary summary The summary. System.Double [] metricValues The metric values. System.Double [] baselineMetricValues The baseline metric values. Returns Type Description System.Boolean True if values calculated successfully. | Improve this Doc View Source TryGetReport(Benchmark, Summary, out BenchmarkReport) Gets report for the benchmark. Declaration protected static bool TryGetReport(Benchmark benchmark, Summary summary, out BenchmarkReport benchmarkReport) Parameters Type Name Description BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.Summary summary Summary for the run. BenchmarkDotNet.Reports.BenchmarkReport benchmarkReport The benchmark report. Returns Type Description System.Boolean true if benchmark report is available. | Improve this Doc View Source TryGetReports(Benchmark, Summary, out BenchmarkReport, out BenchmarkReport) Gets reports for the benchmark and the baseline. Declaration protected static bool TryGetReports(Benchmark benchmark, Summary summary, out BenchmarkReport benchmarkReport, out BenchmarkReport baselineReport) Parameters Type Name Description BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.Summary summary Summary for the run. BenchmarkDotNet.Reports.BenchmarkReport benchmarkReport The benchmark report. BenchmarkDotNet.Reports.BenchmarkReport baselineReport The baseline report. Returns Type Description System.Boolean true if both benchmark and baseline reports are available. | Improve this Doc View Source TryGetValues(Benchmark, Summary, out Double[]) Tries to get values for the relative metric. Declaration protected virtual bool TryGetValues(Benchmark benchmark, Summary summary, out double[] metricValues) Parameters Type Name Description BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.Summary summary The summary. System.Double [] metricValues The metric values. Returns Type Description System.Boolean True if values calculated successfully. | Improve this Doc View Source TryGetVariance(Benchmark, Summary) Gets metric that describes variance of the value for the benchmark. Declaration public double ? TryGetVariance(Benchmark benchmark, Summary summary) Parameters Type Name Description BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.Summary summary Summary for the run. Returns Type Description System.Nullable < System.Double > Metric that describes variance for the benchmark or null if none. Implements IMetricValuesProvider.TryGetVariance(Benchmark, Summary) See Also IMetricValuesProvider"
  },
  "api/perftests/CodeJam.PerfTests.Running.Core.RunState-1.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Core.RunState-1.html",
    "title": "Class RunState<T> | CodeJam",
    "keywords": "Class RunState<T> Typed slot for run state object. Inheritance System.Object RunStateKey RunState<T> Inherited Members RunStateKey.ClearBeforeEachRun System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Core Assembly : CodeJam.PerfTests.dll Syntax public class RunState<T> : RunStateKey where T : class, new () Type Parameters Name Description T The type of run state object. Constructors | Improve this Doc View Source RunState() Initializes a new instance of the RunState<T> class. Declaration public RunState() | Improve this Doc View Source RunState(Boolean) Initializes a new instance of the RunState<T> class. Declaration public RunState(bool clearBeforeEachRun) Parameters Type Name Description System.Boolean clearBeforeEachRun if set to true the value of the slot is cleaned on each run. Properties | Improve this Doc View Source Item[IConfig] Returns the running state for the current run. Declaration public T this[IConfig config] { get; } Parameters Type Name Description BenchmarkDotNet.Configs.IConfig config The config for the current run. Property Value Type Description T Run state object for the current run. | Improve this Doc View Source Item[Summary] Returns run state object for the current run. Declaration public T this[Summary summary] { get; } Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary The summary for the current run. Property Value Type Description T Run state object for the current run."
  },
  "api/perftests/CodeJam.PerfTests.Running.Core.RunStateKey.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Core.RunStateKey.html",
    "title": "Class RunStateKey | CodeJam",
    "keywords": "Class RunStateKey Base class for state slot Inheritance System.Object RunStateKey RunState<T> Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Core Assembly : CodeJam.PerfTests.dll Syntax public abstract class RunStateKey Constructors | Improve this Doc View Source RunStateKey(Boolean) Initializes a new instance of the RunStateKey class. Declaration protected RunStateKey(bool clearBeforeEachRun) Parameters Type Name Description System.Boolean clearBeforeEachRun if set to true the value of the slot is cleaned on each run. Properties | Improve this Doc View Source ClearBeforeEachRun Gets a value indicating whether the value of the slot is cleaned on each run. Declaration public bool ClearBeforeEachRun { get; } Property Value Type Description System.Boolean true if the value of the slot is cleaned on each run; otherwise, false ."
  },
  "api/perftests/CodeJam.PerfTests.Running.Core.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Core.html",
    "title": "Namespace CodeJam.PerfTests.Running.Core | CodeJam",
    "keywords": "Namespace CodeJam.PerfTests.Running.Core Classes CompetitionCore Helpers for performance testing infrastructure. CompetitionCoreHelpers Helpers to use during competition run CompetitionRunnerBase Base class for competition benchmark runners CompetitionRunnerBase.HostLogger Base class for competition runner's host logger. CompetitionState The class holding the state of the competition. ConsoleCompetitionRunner Console competition runner. ConsoleCompetitionRunner.ConsoleHostLogger Host logger implementation ConsoleHelpers Console helpers. EnvironmentHelpers Environment helpers. IoHelpers IO helpers RunState<T> Typed slot for run state object. RunStateKey Base class for state slot"
  },
  "api/perftests/CodeJam.PerfTests.Running.Messages.IMessage.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Messages.IMessage.html",
    "title": "Interface IMessage | CodeJam",
    "keywords": "Interface IMessage Common interface for competition messages. Namespace : CodeJam.PerfTests.Running.Messages Assembly : CodeJam.PerfTests.dll Syntax public interface IMessage Properties | Improve this Doc View Source Elapsed Gets time elapsed since start of the competition. Declaration TimeSpan Elapsed { get; } Property Value Type Description System.TimeSpan Time elapsed since start of the competition. | Improve this Doc View Source HintText Gets text that describes possible solution of the problem or additional varbose info. Declaration string HintText { get; } Property Value Type Description System.String Hints for the message. | Improve this Doc View Source MessageSeverity Gets severity of the message. Declaration MessageSeverity MessageSeverity { get; } Property Value Type Description MessageSeverity The severity of the message. | Improve this Doc View Source MessageSource Gets source of the message. Declaration MessageSource MessageSource { get; } Property Value Type Description MessageSource The source of the message. | Improve this Doc View Source MessageText Gets text of the message. Declaration string MessageText { get; } Property Value Type Description System.String The text of the message. | Improve this Doc View Source RunMessageNumber Gets number of the message in the run. Declaration int RunMessageNumber { get; } Property Value Type Description System.Int32 The number of the message in the run. | Improve this Doc View Source RunNumber Gets number of the run the message belongs to. Declaration int RunNumber { get; } Property Value Type Description System.Int32 The number of the run the message belongs to."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.MetricAttributeBase.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.MetricAttributeBase.html",
    "title": "Class MetricAttributeBase | CodeJam",
    "keywords": "Class MetricAttributeBase Base metric attribute implementation. Inheritance System.Object System.Attribute MetricAttributeBase ExpectedTimeAttribute Gc0Attribute Gc1Attribute Gc2Attribute GcAllocationsAttribute MeanTimeAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax [AttributeUsage(AttributeTargets.Method, AllowMultiple = false, Inherited = false)] public abstract class MetricAttributeBase : Attribute, _Attribute, IStoredMetricValue Constructors | Improve this Doc View Source MetricAttributeBase() Marks the metric range as empty (unset but updateable during the annotation). Declaration protected MetricAttributeBase() | Improve this Doc View Source MetricAttributeBase(Double, Double, Enum) Sets range values of the attribute. Declaration protected MetricAttributeBase(double min, double max, Enum unitOfMeasurement = null) Parameters Type Name Description System.Double min The minimum value. The System.Double.NaN marks the value as unset but updateable during the annotation. The System.Double.NegativeInfinity should be used if value is negative infinity (ignored, essentially). IMPORTANT: If the unitOfMeasurement is not null both Min and Max values are scaled. Use the MetricValueHelpers to normalize them. System.Double max The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity should be used if value is positive infinity (ignored, essentially). IMPORTANT: If the unitOfMeasurement is not null both Min and Max values are scaled. Use the MetricValueHelpers to normalize them. System.Enum unitOfMeasurement The value that represents measurement unit for the scale. | Improve this Doc View Source MetricAttributeBase(Double, Enum) Sets max value of the metric range. The min value set depending on SingleValueMode . Declaration protected MetricAttributeBase(double max, Enum unitOfMeasurement = null) Parameters Type Name Description System.Double max The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially). IMPORTANT: If the unitOfMeasurement is not null both Min and Max values are scaled. Use the MetricValueHelpers to normalize them. System.Enum unitOfMeasurement The value that represents measurement unit for the scale. Properties | Improve this Doc View Source Max Maximum value. Declaration public double Max { get; } Property Value Type Description System.Double The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. The System.Double.PositiveInfinity returned if value is positive infinity (ignored, essentially). IMPORTANT: If the UnitOfMeasurement is not null both Min and Max values are scaled. Use the MetricValueHelpers to normalize them. Implements IStoredMetricValue.Max | Improve this Doc View Source Min Minimum value. Declaration public double Min { get; } Property Value Type Description System.Double The minimum value. The System.Double.NaN marks the value as unset but updateable during the annotation. The System.Double.NegativeInfinity returned if value is negative infinity (ignored, essentially). IMPORTANT: If the UnitOfMeasurement is not null both Min and Max values are scaled. Use the MetricValueHelpers to normalize them. Implements IStoredMetricValue.Min | Improve this Doc View Source UnitOfMeasurement The value that represents measurement unit for the scale. Declaration public Enum UnitOfMeasurement { get; } Property Value Type Description System.Enum The value that represents measurement unit for the scale. Implements IStoredMetricValue.UnitOfMeasurement Explicit Interface Implementations | Improve this Doc View Source IStoredMetricValue.MetricAttributeType Gets the type of the attribute used for metric annotation. Declaration Type IStoredMetricValue.MetricAttributeType { get; } Returns Type Description System.Type The type of the attribute used for metric annotation. Implements IStoredMetricValue.MetricAttributeType See Also System.Attribute"
  },
  "api/perftests/CodeJam.PerfTests.Running.Console.ConsoleCompetition.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Console.ConsoleCompetition.html",
    "title": "Class ConsoleCompetition | CodeJam",
    "keywords": "Class ConsoleCompetition Console competition runner. Inheritance System.Object ConsoleCompetition Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Console Assembly : CodeJam.PerfTests.dll Syntax public static class ConsoleCompetition Methods | Improve this Doc View Source Run(Assembly, CompetitionFeatures) Runs all benchmarks defined in the assembly. Declaration public static IReadOnlyDictionary<Type, CompetitionState> Run(Assembly assembly, CompetitionFeatures competitionFeatures = null) Parameters Type Name Description System.Reflection.Assembly assembly Assembly with benchmarks to run. CompetitionFeatures competitionFeatures The competition features. Returns Type Description System.Collections.Generic.IReadOnlyDictionary < System.Type , CompetitionState > The state of the competition for each benchmark that was run. | Improve this Doc View Source Run(Assembly, ICompetitionConfig) Runs all benchmarks defined in the assembly. Declaration public static IReadOnlyDictionary<Type, CompetitionState> Run(Assembly assembly, ICompetitionConfig competitionConfig) Parameters Type Name Description System.Reflection.Assembly assembly Assembly with benchmarks to run. ICompetitionConfig competitionConfig Custom competition config. Returns Type Description System.Collections.Generic.IReadOnlyDictionary < System.Type , CompetitionState > The state of the competition for each benchmark that was run. | Improve this Doc View Source Run(Type, CompetitionFeatures) Runs the benchmark. Declaration public static CompetitionState Run(Type benchmarkType, CompetitionFeatures competitionFeatures = null) Parameters Type Name Description System.Type benchmarkType Benchmark class to run. CompetitionFeatures competitionFeatures The competition features. Returns Type Description CompetitionState The state of the competition. | Improve this Doc View Source Run(Type, ICompetitionConfig) Runs the benchmark. Declaration public static CompetitionState Run(Type benchmarkType, ICompetitionConfig competitionConfig) Parameters Type Name Description System.Type benchmarkType Benchmark class to run. ICompetitionConfig competitionConfig Custom competition config. Returns Type Description CompetitionState The state of the competition. | Improve this Doc View Source Run(Type[], CompetitionFeatures) Runs all benchmarks defined in the assembly. Declaration public static IReadOnlyDictionary<Type, CompetitionState> Run(Type[] benchmarkTypes, CompetitionFeatures competitionFeatures = null) Parameters Type Name Description System.Type [] benchmarkTypes Benchmark classes to run. CompetitionFeatures competitionFeatures The competition features. Returns Type Description System.Collections.Generic.IReadOnlyDictionary < System.Type , CompetitionState > The state of the competition for each benchmark that was run. | Improve this Doc View Source Run(Type[], ICompetitionConfig) Runs all benchmarks defined in the assembly. Declaration public static IReadOnlyDictionary<Type, CompetitionState> Run(Type[] benchmarkTypes, ICompetitionConfig competitionConfig) Parameters Type Name Description System.Type [] benchmarkTypes Benchmark classes to run. ICompetitionConfig competitionConfig Custom competition config. Returns Type Description System.Collections.Generic.IReadOnlyDictionary < System.Type , CompetitionState > The state of the competition for each benchmark that was run. | Improve this Doc View Source Run<T>(T, CompetitionFeatures) Runs the benchmark. Declaration public static CompetitionState Run<T>(T thisReference, CompetitionFeatures competitionFeatures = null)where T : class Parameters Type Name Description T thisReference Reference used to infer type of the benchmark. CompetitionFeatures competitionFeatures The competition features. Returns Type Description CompetitionState The state of the competition. Type Parameters Name Description T Benchmark class to run. | Improve this Doc View Source Run<T>(T, ICompetitionConfig) Runs the benchmark. Declaration public static CompetitionState Run<T>(T thisReference, ICompetitionConfig competitionConfig)where T : class Parameters Type Name Description T thisReference Reference used to infer type of the benchmark. ICompetitionConfig competitionConfig Custom competition config. Returns Type Description CompetitionState The state of the competition. Type Parameters Name Description T Benchmark class to run. | Improve this Doc View Source Run<T>(CompetitionFeatures) Runs the benchmark. Declaration public static CompetitionState Run<T>(CompetitionFeatures competitionFeatures = null)where T : class Parameters Type Name Description CompetitionFeatures competitionFeatures The competition features. Returns Type Description CompetitionState The state of the competition. Type Parameters Name Description T Benchmark class to run. | Improve this Doc View Source Run<T>(ICompetitionConfig) Runs the benchmark. Declaration public static CompetitionState Run<T>(ICompetitionConfig competitionConfig)where T : class Parameters Type Name Description ICompetitionConfig competitionConfig Custom competition config. Returns Type Description CompetitionState The state of the competition. Type Parameters Name Description T Benchmark class to run."
  },
  "api/perftests/CodeJam.PerfTests.Running.Console.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Console.html",
    "title": "Namespace CodeJam.PerfTests.Running.Console | CodeJam",
    "keywords": "Namespace CodeJam.PerfTests.Running.Console Classes ConsoleCompetition Console competition runner."
  },
  "api/perftests/CodeJam.PerfTests.Running.Core.CompetitionCore.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Core.CompetitionCore.html",
    "title": "Class CompetitionCore | CodeJam",
    "keywords": "Class CompetitionCore Helpers for performance testing infrastructure. Inheritance System.Object CompetitionCore Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Core Assembly : CodeJam.PerfTests.dll Syntax public static class CompetitionCore Fields | Improve this Doc View Source RunState Run state slot. Declaration public static readonly RunState<CompetitionState> RunState Field Value Type Description RunState < CompetitionState >"
  },
  "api/perftests/CodeJam.PerfTests.Running.Core.CompetitionCoreHelpers.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Core.CompetitionCoreHelpers.html",
    "title": "Class CompetitionCoreHelpers | CodeJam",
    "keywords": "Class CompetitionCoreHelpers Helpers to use during competition run Inheritance System.Object CompetitionCoreHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Core Assembly : CodeJam.PerfTests.dll Syntax public static class CompetitionCoreHelpers Methods | Improve this Doc View Source IsCriticalError(MessageSeverity) The message severity is setup error or higher. Declaration public static bool IsCriticalError(this MessageSeverity severity) Parameters Type Name Description MessageSeverity severity The severity to check. Returns Type Description System.Boolean true if the severity is setup error or higher. | Improve this Doc View Source IsTestErrorOrHigher(MessageSeverity) The message severity is test error or higher. Declaration public static bool IsTestErrorOrHigher(this MessageSeverity severity) Parameters Type Name Description MessageSeverity severity The severity to check. Returns Type Description System.Boolean true if the severity is test error or higher. | Improve this Doc View Source IsWarningOrHigher(MessageSeverity) The message severity is warning or higher. Declaration public static bool IsWarningOrHigher(this MessageSeverity severity) Parameters Type Name Description MessageSeverity severity The severity to check. Returns Type Description System.Boolean true if the severity is warning or higher. | Improve this Doc View Source WriteExceptionMessage(CompetitionState, MessageSource, MessageSeverity, String, Exception) Writes exception message. Declaration public static void WriteExceptionMessage(this CompetitionState competitionState, MessageSource messageSource, MessageSeverity messageSeverity, string message, Exception ex) Parameters Type Name Description CompetitionState competitionState State of the run. MessageSource messageSource Source of the message. MessageSeverity messageSeverity Severity of the message. System.String message The explanation for the exception. System.Exception ex The exception to write. | Improve this Doc View Source WriteExceptionMessage(IMessageLogger, MessageSeverity, Target, String, Exception) Writes exception message. Declaration public static void WriteExceptionMessage(this IMessageLogger messageLogger, MessageSeverity messageSeverity, Target target, string message, Exception ex) Parameters Type Name Description IMessageLogger messageLogger The message logger. MessageSeverity messageSeverity Severity of the message. BenchmarkDotNet.Running.Target target Target the message applies for. System.String message The explanation for the exception. System.Exception ex The exception to write. | Improve this Doc View Source WriteExceptionMessage(IMessageLogger, MessageSeverity, String, Exception) Writes exception message. Declaration public static void WriteExceptionMessage(this IMessageLogger messageLogger, MessageSeverity messageSeverity, string message, Exception ex) Parameters Type Name Description IMessageLogger messageLogger The message logger. MessageSeverity messageSeverity Severity of the message. System.String message The explanation for the exception. System.Exception ex The exception to write. | Improve this Doc View Source WriteExecutionErrorMessage(IMessageLogger, Target, String, String) Adds test execution failure message. Declaration public static void WriteExecutionErrorMessage(this IMessageLogger messageLogger, Target target, string message, string hint = null) Parameters Type Name Description IMessageLogger messageLogger The message logger. BenchmarkDotNet.Running.Target target Target the message applies for. System.String message Message text. System.String hint Hints for the message. | Improve this Doc View Source WriteExecutionErrorMessage(IMessageLogger, String, String) Adds test execution failure message. Declaration public static void WriteExecutionErrorMessage(this IMessageLogger messageLogger, string message, string hint = null) Parameters Type Name Description IMessageLogger messageLogger The message logger. System.String message Message text. System.String hint Hints for the message. | Improve this Doc View Source WriteInfoMessage(IMessageLogger, Target, String, String) Adds an info message. Declaration public static void WriteInfoMessage(this IMessageLogger messageLogger, Target target, string message, string hint = null) Parameters Type Name Description IMessageLogger messageLogger The message logger. BenchmarkDotNet.Running.Target target Target the message applies for. System.String message Message text. System.String hint Hints for the message. | Improve this Doc View Source WriteInfoMessage(IMessageLogger, String, String) Adds an info message. Declaration public static void WriteInfoMessage(this IMessageLogger messageLogger, string message, string hint = null) Parameters Type Name Description IMessageLogger messageLogger The message logger. System.String message Message text. System.String hint Hints for the message. | Improve this Doc View Source WriteMessage(IMessageLogger, MessageSeverity, Target, String, String) Writes message. Declaration public static void WriteMessage(this IMessageLogger messageLogger, MessageSeverity messageSeverity, Target target, string message, string hint = null) Parameters Type Name Description IMessageLogger messageLogger The message logger. MessageSeverity messageSeverity Severity of the message. BenchmarkDotNet.Running.Target target Target the message applies for. System.String message The explanation for the exception. System.String hint Hints for the message. | Improve this Doc View Source WriteSetupErrorMessage(IMessageLogger, Target, String, String) Adds test setup failure message. Declaration public static void WriteSetupErrorMessage(this IMessageLogger messageLogger, Target target, string message, string hint = null) Parameters Type Name Description IMessageLogger messageLogger The message logger. BenchmarkDotNet.Running.Target target Target the message applies for. System.String message Message text. System.String hint Hints for the message. | Improve this Doc View Source WriteSetupErrorMessage(IMessageLogger, String, String) Adds test setup failure message. Declaration public static void WriteSetupErrorMessage(this IMessageLogger messageLogger, string message, string hint = null) Parameters Type Name Description IMessageLogger messageLogger The message logger. System.String message Message text. System.String hint Hints for the message. | Improve this Doc View Source WriteTestErrorMessage(IMessageLogger, Target, String, String) Adds test error message. Declaration public static void WriteTestErrorMessage(this IMessageLogger messageLogger, Target target, string message, string hint = null) Parameters Type Name Description IMessageLogger messageLogger The message logger. BenchmarkDotNet.Running.Target target Target the message applies for. System.String message Message text. System.String hint Hints for the message. | Improve this Doc View Source WriteTestErrorMessage(IMessageLogger, String, String) Adds test error message. Declaration public static void WriteTestErrorMessage(this IMessageLogger messageLogger, string message, string hint = null) Parameters Type Name Description IMessageLogger messageLogger The message logger. System.String message Message text. System.String hint Hints for the message. | Improve this Doc View Source WriteVerbose(ILogger, String) Writes the verbose message. Declaration public static void WriteVerbose(this ILogger logger, string message) Parameters Type Name Description BenchmarkDotNet.Loggers.ILogger logger The logger. System.String message Text of the message. | Improve this Doc View Source WriteVerboseHint(ILogger, String) Writes the verbose hint message. Logged, but not reported to user. Declaration public static void WriteVerboseHint(this ILogger logger, string message) Parameters Type Name Description BenchmarkDotNet.Loggers.ILogger logger The logger. System.String message Text of the message. | Improve this Doc View Source WriteWarningMessage(IMessageLogger, Target, String, String) Adds warning message. Declaration public static void WriteWarningMessage(this IMessageLogger messageLogger, Target target, string message, string hint = null) Parameters Type Name Description IMessageLogger messageLogger The message logger. BenchmarkDotNet.Running.Target target Target the message applies for. System.String message Message text. System.String hint Hints for the message. | Improve this Doc View Source WriteWarningMessage(IMessageLogger, String, String) Adds warning message. Declaration public static void WriteWarningMessage(this IMessageLogger messageLogger, string message, string hint = null) Parameters Type Name Description IMessageLogger messageLogger The message logger. System.String message Message text. System.String hint Hints for the message."
  },
  "api/perftests/BenchmarkDotNet.Horology.html": {
    "href": "api/perftests/BenchmarkDotNet.Horology.html",
    "title": "Namespace BenchmarkDotNet.Horology | CodeJam",
    "keywords": "Namespace BenchmarkDotNet.Horology Classes ProcessCycleTimeClock BenchmarkDotNet.Horology.IClock implementation over QueryProcessCycleTime(). WARNING: results are inaccurate (up to +/- 30% to actual time), see https://blogs.msdn.microsoft.com/oldnewthing/20160429-00/?p=93385 for more. ThreadCycleTimeClock BenchmarkDotNet.Horology.IClock implementation over QueryThreadCycleTime(). WARNING: results are inaccurate (up to +/- 30% to actual time), see https://blogs.msdn.microsoft.com/oldnewthing/20160429-00/?p=93385 for more."
  },
  "api/perftests/BenchmarkDotNet.Loggers.IFlushableLogger.html": {
    "href": "api/perftests/BenchmarkDotNet.Loggers.IFlushableLogger.html",
    "title": "Interface IFlushableLogger | CodeJam",
    "keywords": "Interface IFlushableLogger Extension of BenchmarkDotNet.Loggers.ILogger interface that adds flush method. Inherited Members BenchmarkDotNet.Loggers.ILogger.Write(BenchmarkDotNet.Loggers.LogKind, System.String) BenchmarkDotNet.Loggers.ILogger.WriteLine() BenchmarkDotNet.Loggers.ILogger.WriteLine(BenchmarkDotNet.Loggers.LogKind, System.String) Namespace : BenchmarkDotNet.Loggers Assembly : CodeJam.PerfTests.dll Syntax public interface IFlushableLogger : ILogger Methods | Improve this Doc View Source Flush() Flushes the log. Declaration void Flush() Extension Methods LoggerHelpers.WriteSeparatorLine(ILogger) LoggerHelpers.WriteSeparatorLine(ILogger, String) LoggerHelpers.WriteSeparatorLine(ILogger, String, Boolean) CompetitionCoreHelpers.WriteVerboseHint(ILogger, String) CompetitionCoreHelpers.WriteVerbose(ILogger, String)"
  },
  "api/perftests/CodeJam.PerfTests.CompetitionPlatformAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionPlatformAttribute.html",
    "title": "Class CompetitionPlatformAttribute | CodeJam",
    "keywords": "Class CompetitionPlatformAttribute Specifies target platform for the competition. Inheritance System.Object System.Attribute CompetitionFeaturesAttribute CompetitionPlatformAttribute Inherited Members CompetitionFeaturesAttribute.BurstMode CompetitionFeaturesAttribute.ContinuousIntegrationMode CompetitionFeaturesAttribute.Platform CompetitionFeaturesAttribute.AnnotateSources CompetitionFeaturesAttribute.IgnoreExistingAnnotations CompetitionFeaturesAttribute.PreviousRunLogUri CompetitionFeaturesAttribute.ReportWarningsAsErrors CompetitionFeaturesAttribute.TroubleshootingMode CompetitionFeaturesAttribute.ImportantInfoLogger CompetitionFeaturesAttribute.DetailedLogger CompetitionFeaturesAttribute.GetFeatures() System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax public class CompetitionPlatformAttribute : CompetitionFeaturesAttribute, _Attribute, ICompetitionFeatures Constructors | Improve this Doc View Source CompetitionPlatformAttribute(Platform) Initializes a new instance of the CompetitionPlatformAttribute class. Declaration public CompetitionPlatformAttribute(Platform targetPlatform) Parameters Type Name Description BenchmarkDotNet.Environments.Platform targetPlatform The target platform."
  },
  "api/perftests/CodeJam.PerfTests.CompetitionPreviewMetricsAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionPreviewMetricsAttribute.html",
    "title": "Class CompetitionPreviewMetricsAttribute | CodeJam",
    "keywords": "Class CompetitionPreviewMetricsAttribute Enables metric preview feature (new metric values are logged but sources will not be updated. Inheritance System.Object System.Attribute CompetitionFeaturesAttribute CompetitionPreviewMetricsAttribute Inherited Members CompetitionFeaturesAttribute.BurstMode CompetitionFeaturesAttribute.ContinuousIntegrationMode CompetitionFeaturesAttribute.Platform CompetitionFeaturesAttribute.AnnotateSources CompetitionFeaturesAttribute.IgnoreExistingAnnotations CompetitionFeaturesAttribute.PreviousRunLogUri CompetitionFeaturesAttribute.ReportWarningsAsErrors CompetitionFeaturesAttribute.TroubleshootingMode CompetitionFeaturesAttribute.ImportantInfoLogger CompetitionFeaturesAttribute.DetailedLogger CompetitionFeaturesAttribute.GetFeatures() System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax public class CompetitionPreviewMetricsAttribute : CompetitionFeaturesAttribute, _Attribute, ICompetitionFeatures Constructors | Improve this Doc View Source CompetitionPreviewMetricsAttribute() Initializes a new instance of the CompetitionPreviewMetricsAttribute class. Declaration public CompetitionPreviewMetricsAttribute()"
  },
  "api/perftests/CodeJam.PerfTests.Configs.CompetitionFeatures.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.CompetitionFeatures.html",
    "title": "Class CompetitionFeatures | CodeJam",
    "keywords": "Class CompetitionFeatures Features for competition. Inheritance System.Object BenchmarkDotNet.Characteristics.CharacteristicObject BenchmarkDotNet.Characteristics.CharacteristicObject < CompetitionFeatures > CompetitionFeatures Inherited Members BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionFeatures>.Apply(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionFeatures>.Apply(BenchmarkDotNet.Characteristics.CharacteristicObject[]) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionFeatures>.ApplyAndFreeze(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionFeatures>.ApplyAndFreeze(BenchmarkDotNet.Characteristics.CharacteristicObject[]) BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionFeatures>.Freeze() BenchmarkDotNet.Characteristics.CharacteristicObject<CodeJam.PerfTests.Configs.CompetitionFeatures>.UnfreezeCopy() BenchmarkDotNet.Characteristics.CharacteristicObject.IdCharacteristic BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveId(BenchmarkDotNet.Characteristics.CharacteristicObject, System.String) BenchmarkDotNet.Characteristics.CharacteristicObject.AssertNotFrozen() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsRoot() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsNonFrozenRoot() BenchmarkDotNet.Characteristics.CharacteristicObject.AssertIsAssignable(BenchmarkDotNet.Characteristics.Characteristic, System.Object) BenchmarkDotNet.Characteristics.CharacteristicObject.GetCharacteristicsWithValues() BenchmarkDotNet.Characteristics.CharacteristicObject.HasValue(BenchmarkDotNet.Characteristics.Characteristic) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue<T>(BenchmarkDotNet.Characteristics.Characteristic<T>, BenchmarkDotNet.Characteristics.IResolver) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue(BenchmarkDotNet.Characteristics.Characteristic, BenchmarkDotNet.Characteristics.IResolver) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue<T>(BenchmarkDotNet.Characteristics.Characteristic<T>, T) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValue(BenchmarkDotNet.Characteristics.Characteristic, System.Object) BenchmarkDotNet.Characteristics.CharacteristicObject.ResolveValueAsNullable<T>(BenchmarkDotNet.Characteristics.Characteristic<T>) BenchmarkDotNet.Characteristics.CharacteristicObject.ApplyCore(BenchmarkDotNet.Characteristics.CharacteristicObject) BenchmarkDotNet.Characteristics.CharacteristicObject.FreezeCore() BenchmarkDotNet.Characteristics.CharacteristicObject.UnfreezeCopyCore() BenchmarkDotNet.Characteristics.CharacteristicObject.ToString() BenchmarkDotNet.Characteristics.CharacteristicObject.Owner BenchmarkDotNet.Characteristics.CharacteristicObject.OwnerOrSelf BenchmarkDotNet.Characteristics.CharacteristicObject.Frozen BenchmarkDotNet.Characteristics.CharacteristicObject.IsPropertyBag BenchmarkDotNet.Characteristics.CharacteristicObject.HasChanges BenchmarkDotNet.Characteristics.CharacteristicObject.Id System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public sealed class CompetitionFeatures : CharacteristicObject<CompetitionFeatures>, ICompetitionFeatures Constructors | Improve this Doc View Source CompetitionFeatures() Initializes a new instance of the CompetitionFeatures class. Declaration public CompetitionFeatures() | Improve this Doc View Source CompetitionFeatures(CharacteristicObject) Initializes a new instance of the CompetitionFeatures class. Declaration public CompetitionFeatures(CharacteristicObject other) Parameters Type Name Description BenchmarkDotNet.Characteristics.CharacteristicObject other Mode to apply. | Improve this Doc View Source CompetitionFeatures(CharacteristicObject[]) Initializes a new instance of the CompetitionFeatures class. Declaration public CompetitionFeatures(params CharacteristicObject[] others) Parameters Type Name Description BenchmarkDotNet.Characteristics.CharacteristicObject [] others Modes to apply. | Improve this Doc View Source CompetitionFeatures(String) Initializes a new instance of the CompetitionFeatures class. Declaration public CompetitionFeatures(string id) Parameters Type Name Description System.String id The identifier. | Improve this Doc View Source CompetitionFeatures(String, CharacteristicObject) Initializes a new instance of the CompetitionFeatures class. Declaration public CompetitionFeatures(string id, CharacteristicObject other) Parameters Type Name Description System.String id The identifier. BenchmarkDotNet.Characteristics.CharacteristicObject other Mode to apply. | Improve this Doc View Source CompetitionFeatures(String, CharacteristicObject[]) Initializes a new instance of the CompetitionFeatures class. Declaration public CompetitionFeatures(string id, params CharacteristicObject[] others) Parameters Type Name Description System.String id The identifier. BenchmarkDotNet.Characteristics.CharacteristicObject [] others Modes to apply. Fields | Improve this Doc View Source AnnotateSourcesCharacteristic Source annotations feature characteristic. Declaration public static readonly Characteristic<bool> AnnotateSourcesCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source BurstModeCharacteristic Burst mode characteristic Declaration public static readonly Characteristic<bool> BurstModeCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source ContinuousIntegrationModeCharacteristic The code is being run on a CI server characteristic. Declaration public static readonly Characteristic<bool> ContinuousIntegrationModeCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source DetailedLoggerCharacteristic Detailed logger characteristic. Declaration public static readonly Characteristic<bool> DetailedLoggerCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source IgnoreExistingAnnotationsCharacteristic Ignore existing annotations characteristic. Declaration public static readonly Characteristic<bool> IgnoreExistingAnnotationsCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source ImportantInfoLoggerCharacteristic Important info logger characteristic. Declaration public static readonly Characteristic<bool> ImportantInfoLoggerCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source PlatformCharacteristic Target platform for the competition characteristic. Declaration public static readonly Characteristic<Platform> PlatformCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < BenchmarkDotNet.Environments.Platform > | Improve this Doc View Source PreviousRunLogUriCharacteristic URI of the log that contains competition limits from previous run(s) characteristic. Declaration public static readonly Characteristic<string> PreviousRunLogUriCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.String > | Improve this Doc View Source ReportWarningsAsErrorsCharacteristic Fail tests if there are any warnings characteristic. Declaration public static readonly Characteristic<bool> ReportWarningsAsErrorsCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > | Improve this Doc View Source TroubleshootingModeCharacteristic Troubleshooting mode characteristic. Declaration public static readonly Characteristic<bool> TroubleshootingModeCharacteristic Field Value Type Description BenchmarkDotNet.Characteristics.Characteristic < System.Boolean > Properties | Improve this Doc View Source AnnotateSources Enables source annotations feature. Declaration public bool AnnotateSources { get; set; } Property Value Type Description System.Boolean true if source annotations feature should be enabled. | Improve this Doc View Source BurstMode Performs single run per measurement. Recommended for use if single call time >> than timer resolution (recommended minimum is 1000 ns). Declaration public bool BurstMode { get; set; } Property Value Type Description System.Boolean Target platform for the competition. | Improve this Doc View Source ContinuousIntegrationMode The code is being run on a CI server. LogAnnotations , DontSaveUpdatedAnnotations and ContinuousIntegrationMode are enabled, PreviousRunLogUri is ignored. Declaration public bool ContinuousIntegrationMode { get; set; } Property Value Type Description System.Boolean true if the code is being run on a CI server. | Improve this Doc View Source DetailedLogger Enables detailed logger. Declaration public bool DetailedLogger { get; set; } Property Value Type Description System.Boolean true if detailed logger should be used. | Improve this Doc View Source IgnoreExistingAnnotations Ignores existing annotations if AnnotateSources is enabled. Value of PreviousRunLogUri is ignored. Declaration public bool IgnoreExistingAnnotations { get; set; } Property Value Type Description System.Boolean true if reannotation feature should be enabled. | Improve this Doc View Source ImportantInfoLogger Enables important info logger. Declaration public bool ImportantInfoLogger { get; set; } Property Value Type Description System.Boolean true if important info logger should be used. | Improve this Doc View Source Platform Specifies target platform for the competition. Declaration public Platform Platform { get; set; } Property Value Type Description BenchmarkDotNet.Environments.Platform Target platform for the competition. | Improve this Doc View Source PreviousRunLogUri Sets the PreviousRunLogUri to the specified value. Declaration public string PreviousRunLogUri { get; set; } Property Value Type Description System.String The value for PreviousRunLogUri . | Improve this Doc View Source ReportWarningsAsErrors Fails tests if there are any warnings. Declaration public bool ReportWarningsAsErrors { get; set; } Property Value Type Description System.Boolean true if ReportWarningsAsErrors should be set to true. | Improve this Doc View Source TroubleshootingMode Enables DetailedLogging and AllowDebugBuilds options. Adds the CsvTimingsExporter exporter. Adds important info and detailed info loggers. Declaration public bool TroubleshootingMode { get; set; } Property Value Type Description System.Boolean true to enable troubleshooting mode."
  },
  "api/perftests/CodeJam.PerfTests.Configs.CompetitionIgnoreAllocationsAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.CompetitionIgnoreAllocationsAttribute.html",
    "title": "Class CompetitionIgnoreAllocationsAttribute | CodeJam",
    "keywords": "Class CompetitionIgnoreAllocationsAttribute Removes GC metrics (all with category equal to Category ). Inheritance System.Object System.Attribute CompetitionModifierAttribute CompetitionIgnoreAllocationsAttribute Inherited Members CompetitionModifierAttribute.Modifier System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public sealed class CompetitionIgnoreAllocationsAttribute : CompetitionModifierAttribute, _Attribute, ICompetitionModifierSource Constructors | Improve this Doc View Source CompetitionIgnoreAllocationsAttribute() Initializes a new instance of the CompetitionNoRelativeTimeAttribute class. Declaration public CompetitionIgnoreAllocationsAttribute() See Also CompetitionModifierAttribute"
  },
  "api/perftests/CodeJam.PerfTests.Configs.Factories.ICompetitionModifierSource.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.Factories.ICompetitionModifierSource.html",
    "title": "Interface ICompetitionModifierSource | CodeJam",
    "keywords": "Interface ICompetitionModifierSource Base interface for ICompetitionModifier attributes. Namespace : CodeJam.PerfTests.Configs.Factories Assembly : CodeJam.PerfTests.dll Syntax public interface ICompetitionModifierSource Properties | Improve this Doc View Source Modifier The competition config modifier. Declaration ICompetitionModifier Modifier { get; } Property Value Type Description ICompetitionModifier The competition config modifier."
  },
  "api/perftests/CodeJam.PerfTests.Configs.Factories.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.Factories.html",
    "title": "Namespace CodeJam.PerfTests.Configs.Factories | CodeJam",
    "keywords": "Namespace CodeJam.PerfTests.Configs.Factories Classes CompetitionConfigFactory Reusable API for creating competition config. CompetitionFactoryHelpers Reusable API for creating competition config. Interfaces ICompetitionConfigFactory Competition config factory ICompetitionConfigFactorySource Base interface for ICompetitionConfigFactory attributes. ICompetitionModifier Competition config modifier. ICompetitionModifierSource Base interface for ICompetitionModifier attributes."
  },
  "api/perftests/CodeJam.PerfTests.Exporters.CsvTimingsExporter.html": {
    "href": "api/perftests/CodeJam.PerfTests.Exporters.CsvTimingsExporter.html",
    "title": "Class CsvTimingsExporter | CodeJam",
    "keywords": "Class CsvTimingsExporter Exporter that creates .csv files with timings for all runs in the competition. Inheritance System.Object BenchmarkDotNet.Exporters.ExporterBase CsvTimingsExporter Inherited Members BenchmarkDotNet.Exporters.ExporterBase.ExportToFiles(BenchmarkDotNet.Reports.Summary, BenchmarkDotNet.Loggers.ILogger) BenchmarkDotNet.Exporters.ExporterBase.Name BenchmarkDotNet.Exporters.ExporterBase.FileNameSuffix System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Exporters Assembly : CodeJam.PerfTests.dll Syntax public class CsvTimingsExporter : ExporterBase, IExporter Constructors | Improve this Doc View Source CsvTimingsExporter() Initializes a new instance of the CsvTimingsExporter class. Declaration public CsvTimingsExporter() | Improve this Doc View Source CsvTimingsExporter(CsvSeparator) Initializes a new instance of the CsvTimingsExporter class. Declaration public CsvTimingsExporter(CsvSeparator separator) Parameters Type Name Description BenchmarkDotNet.Exporters.Csv.CsvSeparator separator The separator. Fields | Improve this Doc View Source Default The default exporter instance Declaration public static readonly IExporter Default Field Value Type Description BenchmarkDotNet.Exporters.IExporter Properties | Improve this Doc View Source FileCaption File caption. Declaration protected override string FileCaption { get; } Property Value Type Description System.String The file caption. Overrides BenchmarkDotNet.Exporters.ExporterBase.FileCaption | Improve this Doc View Source FileExtension File extension. Declaration protected override string FileExtension { get; } Property Value Type Description System.String The file extension. Overrides BenchmarkDotNet.Exporters.ExporterBase.FileExtension Methods | Improve this Doc View Source ExportToLog(Summary, ILogger) Exports summary to log. Declaration public override void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary Summary for the run. BenchmarkDotNet.Loggers.ILogger logger The logger. Overrides BenchmarkDotNet.Exporters.ExporterBase.ExportToLog(BenchmarkDotNet.Reports.Summary, BenchmarkDotNet.Loggers.ILogger) See Also BenchmarkDotNet.Exporters.IExporter"
  },
  "api/perftests/CodeJam.PerfTests.Exporters.StubExporter.html": {
    "href": "api/perftests/CodeJam.PerfTests.Exporters.StubExporter.html",
    "title": "Class StubExporter | CodeJam",
    "keywords": "Class StubExporter Stub exporter to shut up the BenchmarkDotNet.Validators.ConfigValidator Inheritance System.Object StubExporter Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Exporters Assembly : CodeJam.PerfTests.dll Syntax public class StubExporter : IExporter Properties | Improve this Doc View Source Name Gets the exporter name. Declaration public string Name { get; } Property Value Type Description System.String The exporter name. Implements BenchmarkDotNet.Exporters.IExporter.Name Methods | Improve this Doc View Source ExportToFiles(Summary, ILogger) Exports to files. Declaration public IEnumerable<string> ExportToFiles(Summary summary, ILogger consoleLogger) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary The summary. BenchmarkDotNet.Loggers.ILogger consoleLogger The logger. Returns Type Description System.Collections.Generic.IEnumerable < System.String > Export output. Implements BenchmarkDotNet.Exporters.IExporter.ExportToFiles(BenchmarkDotNet.Reports.Summary, BenchmarkDotNet.Loggers.ILogger) | Improve this Doc View Source ExportToLog(Summary, ILogger) Exports to log. Declaration public void ExportToLog(Summary summary, ILogger logger) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary The summary. BenchmarkDotNet.Loggers.ILogger logger The logger. Implements BenchmarkDotNet.Exporters.IExporter.ExportToLog(BenchmarkDotNet.Reports.Summary, BenchmarkDotNet.Loggers.ILogger) See Also BenchmarkDotNet.Exporters.IExporter"
  },
  "api/perftests/CodeJam.PerfTests.ExpectedTimeAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.ExpectedTimeAttribute.html",
    "title": "Class ExpectedTimeAttribute | CodeJam",
    "keywords": "Class ExpectedTimeAttribute Absolute time metric attribute based on 95th percentile. Inheritance System.Object System.Attribute MetricAttributeBase ExpectedTimeAttribute Inherited Members MetricAttributeBase.Min MetricAttributeBase.Max MetricAttributeBase.IStoredMetricValue.MetricAttributeType System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax [MetricInfo(\"Time\")] public class ExpectedTimeAttribute : MetricAttributeBase, _Attribute, IMetricAttribute<ExpectedTimeAttribute.ValuesProvider, TimeUnit>, IMetricAttribute<ExpectedTimeAttribute.ValuesProvider>, IStoredMetricValue Constructors | Improve this Doc View Source ExpectedTimeAttribute() Initializes a new instance of the ExpectedTimeAttribute class. Declaration public ExpectedTimeAttribute() | Improve this Doc View Source ExpectedTimeAttribute(Double, TimeUnit) Initializes a new instance of the ExpectedTimeAttribute class. Declaration public ExpectedTimeAttribute(double max, TimeUnit timeUnit = TimeUnit.Nanosecond) Parameters Type Name Description System.Double max The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially). TimeUnit timeUnit The time unit. | Improve this Doc View Source ExpectedTimeAttribute(Double, Double, TimeUnit) Initializes a new instance of the ExpectedTimeAttribute class. Declaration public ExpectedTimeAttribute(double min, double max, TimeUnit timeUnit = TimeUnit.Nanosecond) Parameters Type Name Description System.Double min The minimum value. The System.Double.NaN marks the value as unset but updateable during the annotation. The System.Double.NegativeInfinity should be used if value is negative infinity (ignored, essentially). System.Double max The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially). TimeUnit timeUnit The time unit. Properties | Improve this Doc View Source UnitOfMeasurement Gets unit of measurement for the metric. Declaration public TimeUnit UnitOfMeasurement { get; } Property Value Type Description TimeUnit The unit of measurement for the metric. Implements IMetricAttribute<TMetricProvider, TUnitOfMeasurement>.UnitOfMeasurement"
  },
  "api/perftests/CodeJam.PerfTests.Metrics.MetricInfo-1.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.MetricInfo-1.html",
    "title": "Class MetricInfo<TAttribute> | CodeJam",
    "keywords": "Class MetricInfo<TAttribute> Typed metric description. Use FromAttribute<TAttribute>() to create instance of the objec Inheritance System.Object MetricInfo MetricInfo<TAttribute> Inherited Members MetricInfo.FromAttribute<TAttribute>() MetricInfo.PrimaryMetric MetricInfo.DisplayName MetricInfo.AttributeType MetricInfo.MetricUnits MetricInfo.ValuesProvider MetricInfo.IsPrimaryMetric MetricInfo.IsRelative MetricInfo.Category MetricInfo.AnnotateInPlace MetricInfo.SingleValueMode MetricInfo.MetricColumns MetricInfo.GetColumnProvider() MetricInfo.GetColumnProvider(MetricValueColumns) MetricInfo.GetDiagnosers() MetricInfo.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public sealed class MetricInfo<TAttribute> : MetricInfo where TAttribute : Attribute, IStoredMetricValue Type Parameters Name Description TAttribute Type of the attribute used for metric annotation. Should implement IMetricAttribute<TMetricProvider> or IMetricAttribute<TMetricProvider, TUnitOfMeasurement> ; you can use MetricAttributeBase as a base implementation. Remarks Instances of this type are cached to enable equality by reference semantic. DO NOT expose API that enables creation of multiple instances of the same metric."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.MetricInfo.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.MetricInfo.html",
    "title": "Class MetricInfo | CodeJam",
    "keywords": "Class MetricInfo Metric description. Inheritance System.Object MetricInfo MetricInfo <TAttribute> Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public class MetricInfo Remarks Instances of this type are cached to enable equality by reference semantic. DO NOT expose API that enables creation of multiple instances of the same metric. Fields | Improve this Doc View Source PrimaryMetric The primary metric. Declaration public static readonly MetricInfo<CompetitionBenchmarkAttribute> PrimaryMetric Field Value Type Description MetricInfo < CompetitionBenchmarkAttribute > Properties | Improve this Doc View Source AnnotateInPlace Gets in-place annotation mode (all in-place attributes for same category will be placed at the same line). Declaration public bool AnnotateInPlace { get; } Property Value Type Description System.Boolean true if the in-place annotation mode is enabled; otherwise, false . | Improve this Doc View Source AttributeType Gets type of the metric attribute. Declaration public Type AttributeType { get; } Property Value Type Description System.Type The type of the metric attribute. | Improve this Doc View Source Category Gets category of the metric. Declaration public string Category { get; } Property Value Type Description System.String The category of the metric. | Improve this Doc View Source DisplayName Gets display name of the metric. Declaration public string DisplayName { get; } Property Value Type Description System.String The display name of the metric. | Improve this Doc View Source IsPrimaryMetric Gets a value indicating whether this instance is a primary metric (a metric for CompetitionBenchmarkAttribute ). Declaration public bool IsPrimaryMetric { get; } Property Value Type Description System.Boolean true if this instance is primary metric; otherwise, false . | Improve this Doc View Source IsRelative Gets a value indicating whether the metric is relative. Declaration public bool IsRelative { get; } Property Value Type Description System.Boolean true if the metric is relative; otherwise, false . | Improve this Doc View Source MetricColumns Gets columns to include into summary output. Declaration public MetricValueColumns MetricColumns { get; } Property Value Type Description MetricValueColumns The columns to include into summary output. | Improve this Doc View Source MetricUnits Gets metric measurement scale. Declaration public MetricUnitScale MetricUnits { get; } Property Value Type Description MetricUnitScale The metric measurement scale. | Improve this Doc View Source SingleValueMode Gets single value treatment mode. Declaration public MetricSingleValueMode SingleValueMode { get; } Property Value Type Description MetricSingleValueMode The single value treatment mode. | Improve this Doc View Source ValuesProvider Gets metric values provider. Declaration public IMetricValuesProvider ValuesProvider { get; } Property Value Type Description IMetricValuesProvider The metric values provider. Methods | Improve this Doc View Source FromAttribute<TAttribute>() Creates instance of the MetricInfo<TAttribute> class. Declaration public static MetricInfo<TAttribute> FromAttribute<TAttribute>()where TAttribute : Attribute, IStoredMetricValue Returns Type Description MetricInfo <TAttribute> Instance of the MetricInfo<TAttribute> . Type Parameters Name Description TAttribute Type of the attribute used for metric annotation. Should implement IMetricAttribute<TMetricProvider> or IMetricAttribute<TMetricProvider, TUnitOfMeasurement> ; you can use MetricAttributeBase as a base implementation. | Improve this Doc View Source GetColumnProvider() Gets column provider for the metric values. Declaration public IColumnProvider GetColumnProvider() Returns Type Description BenchmarkDotNet.Columns.IColumnProvider Column provider for the metric values | Improve this Doc View Source GetColumnProvider(MetricValueColumns) Gets column provider for the metric values. Declaration public IColumnProvider GetColumnProvider(MetricValueColumns columns) Parameters Type Name Description MetricValueColumns columns The columns to include. Returns Type Description BenchmarkDotNet.Columns.IColumnProvider Column provider for the metric values | Improve this Doc View Source GetDiagnosers() Gets diagnosers for the metric values. Declaration public IDiagnoser[] GetDiagnosers() Returns Type Description BenchmarkDotNet.Diagnosers.IDiagnoser [] Diagnosers for the metric values | Improve this Doc View Source ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString()"
  },
  "api/perftests/CodeJam.PerfTests.Metrics.MetricInfoAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.MetricInfoAttribute.html",
    "title": "Class MetricInfoAttribute | CodeJam",
    "keywords": "Class MetricInfoAttribute Options for metric attribute. Inheritance System.Object System.Attribute MetricInfoAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax [AttributeUsage(AttributeTargets.Class, Inherited = false, AllowMultiple = false)] public sealed class MetricInfoAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source MetricInfoAttribute(String) Initializes a new instance of the MetricInfoAttribute class. Declaration public MetricInfoAttribute(string category) Parameters Type Name Description System.String category The category of the metric. | Improve this Doc View Source MetricInfoAttribute(String, MetricSingleValueMode) Initializes a new instance of the MetricInfoAttribute class. Declaration public MetricInfoAttribute(string category, MetricSingleValueMode singleValueMode) Parameters Type Name Description System.String category The category of the metric. MetricSingleValueMode singleValueMode The single value treatment mode. Properties | Improve this Doc View Source AnnotateInPlace Gets or sets in-place annotation mode (all in-place attributes for same category will be placed at the same line). Declaration public bool AnnotateInPlace { get; set; } Property Value Type Description System.Boolean true if the in-place annotation mode is enabled; otherwise, false . | Improve this Doc View Source Category Gets category of the metric. Declaration public string Category { get; } Property Value Type Description System.String The category of the metric. | Improve this Doc View Source DisplayName Gets or sets display name of the metric. Declaration public string DisplayName { get; set; } Property Value Type Description System.String The display name of the metric. | Improve this Doc View Source MetricColumns Gets columns to include into summary output. Declaration public MetricValueColumns MetricColumns { get; set; } Property Value Type Description MetricValueColumns The columns to include into summary output. | Improve this Doc View Source SingleValueMode Gets single value treatment mode. Declaration public MetricSingleValueMode SingleValueMode { get; } Property Value Type Description MetricSingleValueMode The single value treatment mode."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.MetricInfoHelpers.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.MetricInfoHelpers.html",
    "title": "Class MetricInfoHelpers | CodeJam",
    "keywords": "Class MetricInfoHelpers Helpers for the MetricInfo Inheritance System.Object MetricInfoHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public static class MetricInfoHelpers Methods | Improve this Doc View Source GetMetricInfoAttribute(Type) Gets metric attribute information. Declaration public static MetricInfoAttribute GetMetricInfoAttribute(Type metricAttributeType) Parameters Type Name Description System.Type metricAttributeType Type of the metric attribute. Returns Type Description MetricInfoAttribute Metric attribute information, if any | Improve this Doc View Source GetMinMetricValue(Double, MetricInfo) Returns minimum metric value. Declaration public static double GetMinMetricValue(this double metricMaxValue, MetricInfo metric) Parameters Type Name Description System.Double metricMaxValue The maximum metric value. MetricInfo metric The metric information. Returns Type Description System.Double Minimum metric value. | Improve this Doc View Source GetMinMetricValue(Double, Type) Returns minimum metric value. Declaration public static double GetMinMetricValue(this double metricMaxValue, Type metricAttributeType) Parameters Type Name Description System.Double metricMaxValue The maximum metric value. System.Type metricAttributeType Type of the metric attribute. Returns Type Description System.Double Minimum metric value. | Improve this Doc View Source GetShortAttributeName(Type) Gets the name of the attribute without 'Attribute' suffix. Declaration public static string GetShortAttributeName(this Type attributeType) Parameters Type Name Description System.Type attributeType Type of the attribute. Returns Type Description System.String Name of the attribute without 'Attribute' suffix. | Improve this Doc View Source ShouldStoreMinMetricValue(MetricRange, MetricUnit, MetricInfo) Determines if the minimum metric value should be stored. Declaration public static bool ShouldStoreMinMetricValue(this MetricRange metricRange, MetricUnit metricUnit, MetricInfo metric) Parameters Type Name Description MetricRange metricRange The metric range. MetricUnit metricUnit The metric unit. MetricInfo metric The metric information. Returns Type Description System.Boolean true , if the minimum metric value should be stored. | Improve this Doc View Source ShouldStoreMinMetricValue(MetricRange, MetricUnit, MetricSingleValueMode) Determines if the minimum metric value should be stored. Declaration public static bool ShouldStoreMinMetricValue(this MetricRange metricRange, MetricUnit metricUnit, MetricSingleValueMode singleValueMode) Parameters Type Name Description MetricRange metricRange The metric range. MetricUnit metricUnit The metric unit. MetricSingleValueMode singleValueMode The single value treatment mode. Returns Type Description System.Boolean true , if the minimum metric value should be stored."
  },
  "api/perftests/CodeJam.PerfTests.Running.Core.CompetitionRunnerBase.HostLogger.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Core.CompetitionRunnerBase.HostLogger.html",
    "title": "Class CompetitionRunnerBase.HostLogger | CodeJam",
    "keywords": "Class CompetitionRunnerBase.HostLogger Base class for competition runner's host logger. Inheritance System.Object FilteringLogger CompetitionRunnerBase.HostLogger ConsoleCompetitionRunner.ConsoleHostLogger Inherited Members FilteringLogger.LogVerbosePrefix FilteringLogger.LogInfoPrefix FilteringLogger.LogImportantInfoPrefix FilteringLogger.LogImportantAreaStart FilteringLogger.LogImportantAreaEnd FilteringLogger.BeginLogImportant(IConfig) FilteringLogger.WrappedLogger FilteringLogger.LogFilter FilteringLogger.ShouldWrite(LogKind) FilteringLogger.PreprocessLine(String) FilteringLogger.WriteLine() FilteringLogger.WriteLine(LogKind, String) FilteringLogger.Write(LogKind, String) FilteringLogger.IFlushableLogger.Flush() System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Core Assembly : CodeJam.PerfTests.dll Syntax protected abstract class HostLogger : FilteringLogger, IFlushableLogger, ILogger Constructors | Improve this Doc View Source HostLogger(ILogger, LogFilter) Initializes a new instance of the CompetitionRunnerBase.HostLogger class. Declaration protected HostLogger(ILogger wrappedLogger, LogFilter logMode) Parameters Type Name Description BenchmarkDotNet.Loggers.ILogger wrappedLogger The logger to redirect the output. Cannot be null. LogFilter logMode Host logging mode. Extension Methods LoggerHelpers.WriteSeparatorLine(ILogger) LoggerHelpers.WriteSeparatorLine(ILogger, String) LoggerHelpers.WriteSeparatorLine(ILogger, String, Boolean) CompetitionCoreHelpers.WriteVerboseHint(ILogger, String) CompetitionCoreHelpers.WriteVerbose(ILogger, String) See Also FilteringLogger"
  },
  "api/perftests/CodeJam.PerfTests.Running.Core.CompetitionRunnerBase.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Core.CompetitionRunnerBase.html",
    "title": "Class CompetitionRunnerBase | CodeJam",
    "keywords": "Class CompetitionRunnerBase Base class for competition benchmark runners Inheritance System.Object CompetitionRunnerBase ConsoleCompetitionRunner Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Core Assembly : CodeJam.PerfTests.dll Syntax public abstract class CompetitionRunnerBase Properties | Improve this Doc View Source DumpSummaryToHostLogger Gets a value indicating whether the last run summary should be dumped into host logger. Declaration protected virtual bool DumpSummaryToHostLogger { get; } Property Value Type Description System.Boolean true if the last run summary should be dumped into host logger; otherwise, false . Methods | Improve this Doc View Source CreateHostLogger(LogFilter) Creates a host logger. Declaration protected abstract CompetitionRunnerBase.HostLogger CreateHostLogger(LogFilter hostLogMode) Parameters Type Name Description LogFilter hostLogMode The host log mode. Returns Type Description CompetitionRunnerBase.HostLogger An instance of CompetitionRunnerBase.HostLogger | Improve this Doc View Source GetOutputDirectory(Assembly) Returns output directory that should be used for running the test. Declaration protected virtual string GetOutputDirectory(Assembly targetAssembly) Parameters Type Name Description System.Reflection.Assembly targetAssembly The target assembly tests will be run for. Returns Type Description System.String Output directory that should be used for running the test or null if the current directory should be used. | Improve this Doc View Source InitCompetitionConfigOverride(ManualCompetitionConfig) Customize competition config. Declaration protected virtual void InitCompetitionConfigOverride(ManualCompetitionConfig competitionConfig) Parameters Type Name Description ManualCompetitionConfig competitionConfig The competition configuration. | Improve this Doc View Source ReportAssertionsFailed(String, CompetitionState) Reports failed assertions to user. Declaration protected abstract void ReportAssertionsFailed(string messages, CompetitionState competitionState) Parameters Type Name Description System.String messages The messages to report. CompetitionState competitionState State of the run. | Improve this Doc View Source ReportExecutionErrors(String, CompetitionState) Reports the execution errors to user. Declaration protected abstract void ReportExecutionErrors(string messages, CompetitionState competitionState) Parameters Type Name Description System.String messages The messages to report. CompetitionState competitionState State of the run. | Improve this Doc View Source ReportHostLogger(CompetitionRunnerBase.HostLogger, Summary) Reports content of the host logger to user. Declaration protected abstract void ReportHostLogger(CompetitionRunnerBase.HostLogger logger, Summary summary) Parameters Type Name Description CompetitionRunnerBase.HostLogger logger The host logger. BenchmarkDotNet.Reports.Summary summary The summary to report. | Improve this Doc View Source ReportWarnings(String, CompetitionState) Reports warnings to user. Declaration protected abstract void ReportWarnings(string messages, CompetitionState competitionState) Parameters Type Name Description System.String messages The messages to report. CompetitionState competitionState State of the run. | Improve this Doc View Source Run(Assembly, CompetitionFeatures) Runs all benchmarks defined in the assembly. Declaration public IReadOnlyDictionary<Type, CompetitionState> Run(Assembly assembly, CompetitionFeatures competitionFeatures = null) Parameters Type Name Description System.Reflection.Assembly assembly Assembly with benchmarks to run. CompetitionFeatures competitionFeatures The competition features. Returns Type Description System.Collections.Generic.IReadOnlyDictionary < System.Type , CompetitionState > The state of the competition for each benchmark that was run. | Improve this Doc View Source Run(Assembly, ICompetitionConfig) Runs all benchmarks defined in the assembly. Declaration public IReadOnlyDictionary<Type, CompetitionState> Run(Assembly assembly, ICompetitionConfig competitionConfig) Parameters Type Name Description System.Reflection.Assembly assembly Assembly with benchmarks to run. ICompetitionConfig competitionConfig Custom competition config. Returns Type Description System.Collections.Generic.IReadOnlyDictionary < System.Type , CompetitionState > The state of the competition for each benchmark that was run. | Improve this Doc View Source Run(Type, CompetitionFeatures) Runs the benchmark. Declaration public CompetitionState Run(Type benchmarkType, CompetitionFeatures competitionFeatures = null) Parameters Type Name Description System.Type benchmarkType Benchmark class to run. CompetitionFeatures competitionFeatures The competition features. Returns Type Description CompetitionState The state of the competition. | Improve this Doc View Source Run(Type, ICompetitionConfig) Runs the benchmark. Declaration public CompetitionState Run(Type benchmarkType, ICompetitionConfig competitionConfig) Parameters Type Name Description System.Type benchmarkType Benchmark class to run. ICompetitionConfig competitionConfig Custom competition config. Returns Type Description CompetitionState The state of the competition. | Improve this Doc View Source Run(Type[], CompetitionFeatures) Runs all benchmarks defined in the assembly. Declaration public IReadOnlyDictionary<Type, CompetitionState> Run(Type[] benchmarkTypes, CompetitionFeatures competitionFeatures = null) Parameters Type Name Description System.Type [] benchmarkTypes Benchmark classes to run. CompetitionFeatures competitionFeatures The competition features. Returns Type Description System.Collections.Generic.IReadOnlyDictionary < System.Type , CompetitionState > The state of the competition for each benchmark that was run. | Improve this Doc View Source Run(Type[], ICompetitionConfig) Runs all benchmarks defined in the assembly. Declaration public IReadOnlyDictionary<Type, CompetitionState> Run(Type[] benchmarkTypes, ICompetitionConfig competitionConfig) Parameters Type Name Description System.Type [] benchmarkTypes Benchmark classes to run. ICompetitionConfig competitionConfig Custom competition config. Returns Type Description System.Collections.Generic.IReadOnlyDictionary < System.Type , CompetitionState > The state of the competition for each benchmark that was run. | Improve this Doc View Source Run<T>(T, CompetitionFeatures) Runs the benchmark. Declaration public CompetitionState Run<T>(T thisReference, CompetitionFeatures competitionFeatures = null)where T : class Parameters Type Name Description T thisReference Reference used to infer type of the benchmark. CompetitionFeatures competitionFeatures The competition features. Returns Type Description CompetitionState The state of the competition. Type Parameters Name Description T Benchmark class to run. | Improve this Doc View Source Run<T>(T, ICompetitionConfig) Runs the benchmark. Declaration public CompetitionState Run<T>(T thisReference, ICompetitionConfig competitionConfig)where T : class Parameters Type Name Description T thisReference Reference used to infer type of the benchmark. ICompetitionConfig competitionConfig Custom competition config. Returns Type Description CompetitionState The state of the competition. Type Parameters Name Description T Benchmark class to run. | Improve this Doc View Source Run<T>(CompetitionFeatures) Runs the benchmark. Declaration public CompetitionState Run<T>(CompetitionFeatures competitionFeatures = null)where T : class Parameters Type Name Description CompetitionFeatures competitionFeatures The competition features. Returns Type Description CompetitionState The state of the competition. Type Parameters Name Description T Benchmark class to run. | Improve this Doc View Source Run<T>(ICompetitionConfig) Runs the benchmark. Declaration public CompetitionState Run<T>(ICompetitionConfig competitionConfig)where T : class Parameters Type Name Description ICompetitionConfig competitionConfig Custom competition config. Returns Type Description CompetitionState The state of the competition. Type Parameters Name Description T Benchmark class to run."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.html",
    "title": "Namespace CodeJam.PerfTests.Metrics | CodeJam",
    "keywords": "Namespace CodeJam.PerfTests.Metrics Classes GcMetricValuesProvider Implementation of IMetricValuesProvider that returns various values from Benchmark's GcStats LogNormalMetricCalculator Metric calculator for relative metrics (especially for microbenchmarks). Uses lognormal distribution for results estimation. MetricAttributeBase Base metric attribute implementation. MetricInfo Metric description. MetricInfo<TAttribute> Typed metric description. Use FromAttribute<TAttribute>() to create instance of the objec MetricInfoAttribute Options for metric attribute. MetricInfoHelpers Helpers for the MetricInfo MetricUnit Metric measurement unit. MetricUnitAttribute Description of metric unit of measurement. MetricUnitScale Metric measurement scale. MetricValueHelpers Extension methods for MetricUnit and MetricUnitScale . MetricValuesProviderBase Base implementation of the IMetricValuesProvider PercentileMetricCalculator Metric calculator for absolute metrics (especially for long-runing benchmarks). Uses percentiles for results estimation. SingleValueMetricCalculator Helper calculator for metrics that provide only single value instead of a multiple sample set. TimeMetricValuesProvider Implementation of IMetricValuesProvider that returns timings (in nanoseconds if the ResultIsRelative is false ). Structs MetricRange Range of metric values. Interfaces IMetricAttribute<TMetricProvider> Interface for custom metric attributes that has no unit of measurement. IMetricAttribute<TMetricProvider, TUnitOfMeasurement> Interface for custom metric attributes that has unit of measurement. IMetricCalculator Helper type that allows to reuse statistic calculation logic across different implementations IMetricValuesProvider Interface for metric values provider IStoredMetricValue Base interface for stored metric values. Enums GcMetricSource Property of the BenchmarkDotNet.Engines.GcStats to be used as a GC metric value MetricSingleValueMode The single value treatment mode. MetricValueColumns Metric value columns to return."
  },
  "api/perftests/CodeJam.PerfTests.Running.Messages.IMessageLogger.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Messages.IMessageLogger.html",
    "title": "Interface IMessageLogger | CodeJam",
    "keywords": "Interface IMessageLogger The message logger. Namespace : CodeJam.PerfTests.Running.Messages Assembly : CodeJam.PerfTests.dll Syntax public interface IMessageLogger Properties | Improve this Doc View Source Logger Gets logger (can be used for direct log output). Declaration ILogger Logger { get; } Property Value Type Description BenchmarkDotNet.Loggers.ILogger The logger. Methods | Improve this Doc View Source WriteMessage(MessageSeverity, String, String) Adds a message for the competition. Declaration void WriteMessage(MessageSeverity messageSeverity, string message, string hint = null) Parameters Type Name Description MessageSeverity messageSeverity Severity of the message. System.String message Text of the message. System.String hint Hints for the message. Extension Methods CompetitionCoreHelpers.WriteMessage(IMessageLogger, MessageSeverity, Target, String, String) CompetitionCoreHelpers.WriteExceptionMessage(IMessageLogger, MessageSeverity, String, Exception) CompetitionCoreHelpers.WriteExceptionMessage(IMessageLogger, MessageSeverity, Target, String, Exception) CompetitionCoreHelpers.WriteExecutionErrorMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteExecutionErrorMessage(IMessageLogger, Target, String, String) CompetitionCoreHelpers.WriteSetupErrorMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteSetupErrorMessage(IMessageLogger, Target, String, String) CompetitionCoreHelpers.WriteTestErrorMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteTestErrorMessage(IMessageLogger, Target, String, String) CompetitionCoreHelpers.WriteWarningMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteWarningMessage(IMessageLogger, Target, String, String) CompetitionCoreHelpers.WriteInfoMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteInfoMessage(IMessageLogger, Target, String, String)"
  },
  "api/perftests/CodeJam.PerfTests.Running.Messages.Message.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Messages.Message.html",
    "title": "Class Message | CodeJam",
    "keywords": "Class Message Competition message. Inheritance System.Object Message Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Messages Assembly : CodeJam.PerfTests.dll Syntax public class Message : IMessage Constructors | Improve this Doc View Source Message(Int32, Int32, TimeSpan, MessageSource, MessageSeverity, String, String) Initializes a new instance of the Message class. Declaration public Message(int runNumber, int runMessageNumber, TimeSpan elapsed, MessageSource messageSource, MessageSeverity messageSeverity, string messageText, string hintText) Parameters Type Name Description System.Int32 runNumber Number of the run the message belongs to. System.Int32 runMessageNumber Number of the message in the run. System.TimeSpan elapsed Time elapsed from the start of the benchmark. MessageSource messageSource Source of the message. MessageSeverity messageSeverity Severity of the message. System.String messageText Text of the message. System.String hintText Hints for the message. Properties | Improve this Doc View Source Elapsed Gets time elapsed since start of the competition. Declaration public TimeSpan Elapsed { get; } Property Value Type Description System.TimeSpan Time elapsed since start of the competition. Implements IMessage.Elapsed | Improve this Doc View Source HintText Gets text that describes possible solution of the problem or additional varbose info. Declaration public string HintText { get; } Property Value Type Description System.String Hints for the message. Implements IMessage.HintText | Improve this Doc View Source MessageSeverity Gets severity of the message. Declaration public MessageSeverity MessageSeverity { get; } Property Value Type Description MessageSeverity The severity of the message. Implements IMessage.MessageSeverity | Improve this Doc View Source MessageSource Gets source of the message. Declaration public MessageSource MessageSource { get; } Property Value Type Description MessageSource The source of the message. Implements IMessage.MessageSource | Improve this Doc View Source MessageText Gets text of the message. Declaration public string MessageText { get; } Property Value Type Description System.String The text of the message. Implements IMessage.MessageText | Improve this Doc View Source RunMessageNumber Gets number of the message in the run. Declaration public int RunMessageNumber { get; } Property Value Type Description System.Int32 The number of the message in the run. Implements IMessage.RunMessageNumber | Improve this Doc View Source RunNumber Gets number of the run the message belongs to. Declaration public int RunNumber { get; } Property Value Type Description System.Int32 The number of the run the message belongs to. Implements IMessage.RunNumber See Also IMessage"
  },
  "api/perftests/CodeJam.PerfTests.Gc0Attribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.Gc0Attribute.html",
    "title": "Class Gc0Attribute | CodeJam",
    "keywords": "Class Gc0Attribute GC 0 count per 1000 operations metric attribute. Inheritance System.Object System.Attribute MetricAttributeBase Gc0Attribute Inherited Members MetricAttributeBase.Min MetricAttributeBase.Max MetricAttributeBase.UnitOfMeasurement MetricAttributeBase.IStoredMetricValue.MetricAttributeType System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax [MetricInfo(\"GcMemory\", AnnotateInPlace = true)] public class Gc0Attribute : MetricAttributeBase, _Attribute, IMetricAttribute<Gc0Attribute.ValuesProvider>, IStoredMetricValue Constructors | Improve this Doc View Source Gc0Attribute() Initializes a new instance of the Gc0Attribute class. Declaration public Gc0Attribute() | Improve this Doc View Source Gc0Attribute(Double) Initializes a new instance of the Gc0Attribute class. Declaration public Gc0Attribute(double value) Parameters Type Name Description System.Double value Count of GC per 1000 operations. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially). | Improve this Doc View Source Gc0Attribute(Double, Double) Initializes a new instance of the Gc0Attribute class. Declaration public Gc0Attribute(double min, double max) Parameters Type Name Description System.Double min The minimum value. The System.Double.NaN marks the value as unset but updateable during the annotation. The System.Double.NegativeInfinity should be used if value is negative infinity (ignored, essentially). System.Double max The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. Use System.Double.PositiveInfinity if value is positive infinity (ignored, essentially)."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.MetricRange.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.MetricRange.html",
    "title": "Struct MetricRange | CodeJam",
    "keywords": "Struct MetricRange Range of metric values. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public struct MetricRange : IEquatable<MetricRange>, IFormattable Constructors | Improve this Doc View Source MetricRange(Double, Double) Initializes a new instance of the MetricRange struct. Declaration public MetricRange(double min, double max) Parameters Type Name Description System.Double min The minimum value. The EmptyMetricValue marks the range as unset but updateable during the annotation. Use FromNegativeInfinity to set min value to negative infinity (ignored, essentially). System.Double max The maximum value. Use EmptyMetricValue to mark the range as unset but updateable during the annotation. Use ToPositiveInfinity to set max value to positive infinity (ignored, essentially). Fields | Improve this Doc View Source Empty Empty metric values range (unset but updateable during the annotation). The Min and Max are set to EmptyMetricValue . Declaration public static readonly MetricRange Empty Field Value Type Description MetricRange | Improve this Doc View Source EmptyMetricValue The empty metric value. Equals to System.Double.NaN . Declaration public const double EmptyMetricValue = NaN Field Value Type Description System.Double | Improve this Doc View Source FromNegativeInfinity Negative infinity metric value. Equals to System.Double.NegativeInfinity . Declaration public const double FromNegativeInfinity = -Infinity Field Value Type Description System.Double | Improve this Doc View Source Infinite Infinite metric values range (ignored, essentially). The Min and Max are set to FromNegativeInfinity and ToPositiveInfinity , respectively. Declaration public static readonly MetricRange Infinite Field Value Type Description MetricRange | Improve this Doc View Source ToPositiveInfinity Positive infinity metric value. Equals to System.Double.PositiveInfinity . Declaration public const double ToPositiveInfinity = Infinity Field Value Type Description System.Double Properties | Improve this Doc View Source IsEmpty The range is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if the range is empty; otherwise, false . | Improve this Doc View Source IsNotEmpty The range is NOT empty. Declaration public bool IsNotEmpty { get; } Property Value Type Description System.Boolean true if the range is not empty; otherwise, false . | Improve this Doc View Source Max Gets maximum metric value. Declaration public double Max { get; } Property Value Type Description System.Double The maximum metric value. The EmptyMetricValue returned if the range ie empty. The ToPositiveInfinity returned if the value is positive infinity (ignored, essentially). | Improve this Doc View Source Min Gets minimum metric value. Declaration public double Min { get; } Property Value Type Description System.Double The minimum metric value. The EmptyMetricValue returned if the range ie empty. The FromNegativeInfinity returned if the value is negative infinity (ignored, essentially). Methods | Improve this Doc View Source Contains(MetricRange) Determines whether the range contains another one. Declaration public bool Contains(MetricRange other) Parameters Type Name Description MetricRange other The metric range to check. Returns Type Description System.Boolean true , if the range contains another one. | Improve this Doc View Source Equals(MetricRange) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(MetricRange other) Parameters Type Name Description MetricRange other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Determines whether the obj is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with this instance. Returns Type Description System.Boolean true if the obj is equal to this instance; otherwise, false . Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns string representation of the range. Declaration public override string ToString() Returns Type Description System.String The string representation of the range. Overrides System.ValueType.ToString() | Improve this Doc View Source ToString(IFormatProvider) Returns string representation of the range. Declaration public string ToString(IFormatProvider formatProvider) Parameters Type Name Description System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String) Returns string representation of the range. Declaration public string ToString(string format) Parameters Type Name Description System.String format The format string. Returns Type Description System.String The string representation of the range. | Improve this Doc View Source ToString(String, IFormatProvider) Returns string representation of the range. Declaration public string ToString(string format, IFormatProvider formatProvider) Parameters Type Name Description System.String format The format string. System.IFormatProvider formatProvider The format provider. Returns Type Description System.String The string representation of the range. Implements System.IFormattable.ToString(System.String, System.IFormatProvider) | Improve this Doc View Source Union(MetricRange) Returns a union range containing both of metric ranges. Declaration public MetricRange Union(MetricRange other) Parameters Type Name Description MetricRange other The metric range to union with. Returns Type Description MetricRange A union range containing both of the metric ranges. Operators | Improve this Doc View Source Equality(MetricRange, MetricRange) Implements the operator ==. Declaration public static bool operator ==(MetricRange a, MetricRange b) Parameters Type Name Description MetricRange a The metric1. MetricRange b The metric2. Returns Type Description System.Boolean The result of the operator. | Improve this Doc View Source Inequality(MetricRange, MetricRange) Implements the operator !=. Declaration public static bool operator !=(MetricRange a, MetricRange b) Parameters Type Name Description MetricRange a The metric1. MetricRange b The metric2. Returns Type Description System.Boolean The result of the operator. Extension Methods MetricInfoHelpers.ShouldStoreMinMetricValue(MetricRange, MetricUnit, MetricInfo) MetricInfoHelpers.ShouldStoreMinMetricValue(MetricRange, MetricUnit, MetricSingleValueMode) MetricValueHelpers.ContainsWithRounding(MetricRange, MetricRange, MetricUnit) MetricValueHelpers.MinMaxAreSame(MetricRange, MetricUnit) MetricValueHelpers.ToString(MetricRange, MetricUnitScale) MetricValueHelpers.ToString(MetricRange, MetricUnit) MetricValueHelpers.GetMinMaxString(MetricRange, MetricUnit, out String, out String)"
  },
  "api/perftests/CodeJam.PerfTests.Metrics.MetricSingleValueMode.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.MetricSingleValueMode.html",
    "title": "Enum MetricSingleValueMode | CodeJam",
    "keywords": "Enum MetricSingleValueMode The single value treatment mode. Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public enum MetricSingleValueMode Fields Name Description BothMinAndMax Exact match: value specifies both min and max limits FromInfinityToMax The value is max limit, min limit is negative infinity. FromZeroToMax The value is max limit, min limit is 0 ."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.MetricUnit.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.MetricUnit.html",
    "title": "Class MetricUnit | CodeJam",
    "keywords": "Class MetricUnit Metric measurement unit. Inheritance System.Object MetricUnit Inherited Members System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public class MetricUnit Fields | Improve this Doc View Source Empty Empty measurement unit. Declaration public static readonly MetricUnit Empty Field Value Type Description MetricUnit | Improve this Doc View Source MaxRoundingDigits The maximum supported number of fractional digits for storing and comparing metric values. Declaration public const int MaxRoundingDigits = 15 Field Value Type Description System.Int32 Properties | Improve this Doc View Source AppliesFrom Gets apply threshold for the measurement unit. Declaration public double AppliesFrom { get; } Property Value Type Description System.Double The apply threshold for the measurement unit. | Improve this Doc View Source DisplayName Gets display name of the measurement unit. Declaration public string DisplayName { get; } Property Value Type Description System.String The display name of the measurement unit. | Improve this Doc View Source EnumValue Gets enum value for the measurement unit. Declaration public Enum EnumValue { get; } Property Value Type Description System.Enum The enum value for the measurement unit. | Improve this Doc View Source IsEmpty Gets a value indicating whether this instance is empty measurement unit. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if this instance is empty; otherwise, false . | Improve this Doc View Source RoundingDigits Gets number of fractional digits for storing and comparing metric values. If value is null number of fractional digits detected automatically. Declaration public int ? RoundingDigits { get; } Property Value Type Description System.Nullable < System.Int32 > Number of fractional digits for storing and comparing metric values. | Improve this Doc View Source ScaleCoefficient Gets scale coefficient for the measurement unit. Declaration public double ScaleCoefficient { get; } Property Value Type Description System.Double The scale coefficient for the measurement unit. Methods | Improve this Doc View Source ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.Object.ToString()"
  },
  "api/perftests/CodeJam.PerfTests.Metrics.MetricUnitAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.MetricUnitAttribute.html",
    "title": "Class MetricUnitAttribute | CodeJam",
    "keywords": "Class MetricUnitAttribute Description of metric unit of measurement. Inheritance System.Object System.Attribute MetricUnitAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax [AttributeUsage(AttributeTargets.Field, AllowMultiple = false, Inherited = false)] public class MetricUnitAttribute : Attribute, _Attribute Constructors | Improve this Doc View Source MetricUnitAttribute() Initializes a new instance of the MetricUnitAttribute class. Declaration public MetricUnitAttribute() | Improve this Doc View Source MetricUnitAttribute(String) Initializes a new instance of the MetricUnitAttribute class. Declaration public MetricUnitAttribute(string displayName) Parameters Type Name Description System.String displayName The display name. Properties | Improve this Doc View Source AppliesFrom Gets or sets apply threshold for the measurement unit. If equals to System.Double.NaN the value of the enum member is used. Declaration public double AppliesFrom { get; set; } Property Value Type Description System.Double The apply threshold for the measurement unit. | Improve this Doc View Source DisplayName Gets display name of the measurement unit. If is null the name of the enum member is used as a coefficient. Declaration public string DisplayName { get; } Property Value Type Description System.String The display name of the measurement unit. | Improve this Doc View Source RoundingDigits Gets or sets number of fractional digits for storing and comparing metric values. If value is -1 number of fractional digits detected automatically. Declaration public int RoundingDigits { get; set; } Property Value Type Description System.Int32 Number of fractional digits for storing and comparing metric values. | Improve this Doc View Source ScaleCoefficient Gets or sets scale coefficient for the measurement unit. If equals to System.Double.NaN the value of the enum member is used as a coefficient. Declaration public double ScaleCoefficient { get; set; } Property Value Type Description System.Double The scale coefficient for the measurement unit."
  },
  "api/perftests/CodeJam.PerfTests.Running.Core.ConsoleCompetitionRunner.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Core.ConsoleCompetitionRunner.html",
    "title": "Class ConsoleCompetitionRunner | CodeJam",
    "keywords": "Class ConsoleCompetitionRunner Console competition runner. Inheritance System.Object CompetitionRunnerBase ConsoleCompetitionRunner Inherited Members CompetitionRunnerBase.Run<T>(CompetitionFeatures) CompetitionRunnerBase.Run<T>(T, CompetitionFeatures) CompetitionRunnerBase.Run(Type, CompetitionFeatures) CompetitionRunnerBase.Run<T>(ICompetitionConfig) CompetitionRunnerBase.Run<T>(T, ICompetitionConfig) CompetitionRunnerBase.Run(Type, ICompetitionConfig) CompetitionRunnerBase.Run(Assembly, CompetitionFeatures) CompetitionRunnerBase.Run(Type[], CompetitionFeatures) CompetitionRunnerBase.Run(Assembly, ICompetitionConfig) CompetitionRunnerBase.Run(Type[], ICompetitionConfig) CompetitionRunnerBase.GetOutputDirectory(Assembly) CompetitionRunnerBase.DumpSummaryToHostLogger System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Core Assembly : CodeJam.PerfTests.dll Syntax public class ConsoleCompetitionRunner : CompetitionRunnerBase Methods | Improve this Doc View Source CreateHostLogger(LogFilter) Creates a host logger. Declaration protected override CompetitionRunnerBase.HostLogger CreateHostLogger(LogFilter hostLogMode) Parameters Type Name Description LogFilter hostLogMode The host log mode. Returns Type Description CompetitionRunnerBase.HostLogger An instance of CompetitionRunnerBase.HostLogger Overrides CompetitionRunnerBase.CreateHostLogger(LogFilter) | Improve this Doc View Source InitCompetitionConfigOverride(ManualCompetitionConfig) Customize competition config. Declaration protected override void InitCompetitionConfigOverride(ManualCompetitionConfig competitionConfig) Parameters Type Name Description ManualCompetitionConfig competitionConfig The competition configuration. Overrides CompetitionRunnerBase.InitCompetitionConfigOverride(ManualCompetitionConfig) | Improve this Doc View Source ReportAssertionsFailed(String, CompetitionState) Reports failed assertions to user. Declaration protected override void ReportAssertionsFailed(string messages, CompetitionState competitionState) Parameters Type Name Description System.String messages The messages to report. CompetitionState competitionState State of the run. Overrides CompetitionRunnerBase.ReportAssertionsFailed(String, CompetitionState) | Improve this Doc View Source ReportExecutionErrors(String, CompetitionState) Reports the execution errors to user. Declaration protected override void ReportExecutionErrors(string messages, CompetitionState competitionState) Parameters Type Name Description System.String messages The messages to report. CompetitionState competitionState State of the run. Overrides CompetitionRunnerBase.ReportExecutionErrors(String, CompetitionState) | Improve this Doc View Source ReportHostLogger(CompetitionRunnerBase.HostLogger, Summary) Reports content of the host logger to user. Declaration protected override void ReportHostLogger(CompetitionRunnerBase.HostLogger logger, Summary summary) Parameters Type Name Description CompetitionRunnerBase.HostLogger logger The host logger. BenchmarkDotNet.Reports.Summary summary The summary to report. Overrides CompetitionRunnerBase.ReportHostLogger(CompetitionRunnerBase.HostLogger, Summary) | Improve this Doc View Source ReportWarnings(String, CompetitionState) Reports warnings to user. Declaration protected override void ReportWarnings(string messages, CompetitionState competitionState) Parameters Type Name Description System.String messages The messages to report. CompetitionState competitionState State of the run. Overrides CompetitionRunnerBase.ReportWarnings(String, CompetitionState) See Also CompetitionRunnerBase"
  },
  "api/perftests/CodeJam.PerfTests.Running.Core.ConsoleHelpers.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Core.ConsoleHelpers.html",
    "title": "Class ConsoleHelpers | CodeJam",
    "keywords": "Class ConsoleHelpers Console helpers. Inheritance System.Object ConsoleHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Core Assembly : CodeJam.PerfTests.dll Syntax public static class ConsoleHelpers Methods | Improve this Doc View Source NotifyWorkDoneAndWaitForConfirmation() Reports that work is completed and asks user to press any key to continue. Declaration public static void NotifyWorkDoneAndWaitForConfirmation() | Improve this Doc View Source NotifyWorkDoneAndWaitForConfirmation(String) Reports that work is completed and asks user to press any key to continue. Declaration public static void NotifyWorkDoneAndWaitForConfirmation(string notifyMessage) Parameters Type Name Description System.String notifyMessage The notification message."
  },
  "api/perftests/CodeJam.PerfTests.Running.Core.EnvironmentHelpers.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Core.EnvironmentHelpers.html",
    "title": "Class EnvironmentHelpers | CodeJam",
    "keywords": "Class EnvironmentHelpers Environment helpers. Inheritance System.Object EnvironmentHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Core Assembly : CodeJam.PerfTests.dll Syntax public static class EnvironmentHelpers Methods | Improve this Doc View Source HasAnyEnvironmentVariable(IEnumerable<String>) Determines whether any environment variable is set. Declaration public static bool HasAnyEnvironmentVariable(IEnumerable<string> variables) Parameters Type Name Description System.Collections.Generic.IEnumerable < System.String > variables The variables to check. Case is ignored. Returns Type Description System.Boolean true if any environment variable from variables is set. | Improve this Doc View Source HasAnyEnvironmentVariable(String[]) Determines whether any environment variable is set. Declaration public static bool HasAnyEnvironmentVariable(params string[] variables) Parameters Type Name Description System.String [] variables The variables to check. Case is ignored. Returns Type Description System.Boolean true if any environment variable from variables is set. | Improve this Doc View Source ParseConfigurationSection<TSection>(String, IEnumerable<Assembly>) Retuns configuration section from app.config or (if none) from first of the fallbackAssemblies that have the section in its config. Declaration public static TSection ParseConfigurationSection<TSection>(string sectionName, IEnumerable<Assembly> fallbackAssemblies)where TSection : ConfigurationSection Parameters Type Name Description System.String sectionName Name of the section. System.Collections.Generic.IEnumerable < System.Reflection.Assembly > fallbackAssemblies The assemblies to check for the config section if the app.config does not contain the section. Returns Type Description TSection Configuration section with the name specified in sectionName . Type Parameters Name Description TSection Type of the section. | Improve this Doc View Source ParseConfigurationSection<TSection>(String, Assembly[]) Retuns configuration section from app.config or (if none) from first of the fallbackAssemblies that have the section in its config. Declaration public static TSection ParseConfigurationSection<TSection>(string sectionName, params Assembly[] fallbackAssemblies)where TSection : ConfigurationSection Parameters Type Name Description System.String sectionName Name of the section. System.Reflection.Assembly [] fallbackAssemblies The assemblies to check for the config section if the app.config does not contain the section. Returns Type Description TSection Configuration section with the name specified in sectionName . Type Parameters Name Description TSection Type of the section."
  },
  "api/perftests/CodeJam.PerfTests.Running.Core.IoHelpers.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Core.IoHelpers.html",
    "title": "Class IoHelpers | CodeJam",
    "keywords": "Class IoHelpers IO helpers Inheritance System.Object IoHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Running.Core Assembly : CodeJam.PerfTests.dll Syntax public static class IoHelpers Methods | Improve this Doc View Source ReadFileContent(String) Reads file content and fails if not able to detect encoding. Declaration public static string[] ReadFileContent(string path) Parameters Type Name Description System.String path The path. Returns Type Description System.String [] File lines. | Improve this Doc View Source TryGetTextFromUri(String) Tries to obtain text from the given URI. Declaration public static TextReader TryGetTextFromUri(string uri) Parameters Type Name Description System.String uri The URI to geth the text from. Returns Type Description System.IO.TextReader The text reader or null if none. | Improve this Doc View Source TryGetTextFromUri(String, Nullable<TimeSpan>) Tries to obtain text from the given URI. Declaration public static TextReader TryGetTextFromUri(string uri, TimeSpan? timeOut) Parameters Type Name Description System.String uri The URI to geth the text from. System.Nullable < System.TimeSpan > timeOut The timeout. Returns Type Description System.IO.TextReader The text reader or null if none. | Improve this Doc View Source WriteFileContent(String, String[]) Writes file content without empty line at the end. Declaration public static void WriteFileContent(string path, string[] lines) Parameters Type Name Description System.String path The path. System.String [] lines The lines to write."
  },
  "api/perftests/CodeJam.PerfTests.Running.Messages.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.Messages.html",
    "title": "Namespace CodeJam.PerfTests.Running.Messages | CodeJam",
    "keywords": "Namespace CodeJam.PerfTests.Running.Messages Classes Message Competition message. Interfaces IMessage Common interface for competition messages. IMessageLogger The message logger. Enums MessageSeverity Severity of the message. MessageSource Source of the message."
  },
  "api/perftests/CodeJam.PerfTests.Running.SourceAnnotations.ResourceKey.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.SourceAnnotations.ResourceKey.html",
    "title": "Struct ResourceKey | CodeJam",
    "keywords": "Struct ResourceKey Key for assembly resources. Can be persisted in the current appdomain only. Inherited Members System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() Namespace : CodeJam.PerfTests.Running.SourceAnnotations Assembly : CodeJam.PerfTests.dll Syntax public struct ResourceKey : IEquatable<ResourceKey> Constructors | Improve this Doc View Source ResourceKey(Assembly, String) Initializes a new instance of the ResourceKey struct. Declaration public ResourceKey(Assembly assembly, string resourceName) Parameters Type Name Description System.Reflection.Assembly assembly The assembly that contains resource. System.String resourceName The name of the resource. Properties | Improve this Doc View Source Assembly Gets the assembly that contains resource. Declaration public Assembly Assembly { get; } Property Value Type Description System.Reflection.Assembly The assembly that contains resource. | Improve this Doc View Source IsEmpty Gets a value indicating whether this instance is empty. Declaration public bool IsEmpty { get; } Property Value Type Description System.Boolean true if this instance is empty; otherwise, false . | Improve this Doc View Source ResourceName Gets the name of the resource. Declaration public string ResourceName { get; } Property Value Type Description System.String The name of the resource. Methods | Improve this Doc View Source Equals(ResourceKey) Indicates whether the current object is equal to another object of the same type. Declaration public bool Equals(ResourceKey other) Parameters Type Name Description ResourceKey other An object to compare with this object. Returns Type Description System.Boolean true if the current object is equal to the other parameter; otherwise, false. Implements System.IEquatable<T>.Equals(T) | Improve this Doc View Source Equals(Object) Determines whether the obj is equal to this instance. Declaration public override bool Equals(object obj) Parameters Type Name Description System.Object obj The System.Object to compare with this instance. Returns Type Description System.Boolean true if the obj is equal to this instance; otherwise, false . Overrides System.ValueType.Equals(System.Object) | Improve this Doc View Source GetHashCode() Returns a hash code for this instance. Declaration public override int GetHashCode() Returns Type Description System.Int32 A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. Overrides System.ValueType.GetHashCode() | Improve this Doc View Source ToString() Returns a System.String that represents this instance. Declaration public override string ToString() Returns Type Description System.String A System.String that represents this instance. Overrides System.ValueType.ToString() See Also System.IEquatable <T>"
  },
  "api/perftests/CodeJam.PerfTests.Running.SourceAnnotations.html": {
    "href": "api/perftests/CodeJam.PerfTests.Running.SourceAnnotations.html",
    "title": "Namespace CodeJam.PerfTests.Running.SourceAnnotations | CodeJam",
    "keywords": "Namespace CodeJam.PerfTests.Running.SourceAnnotations Structs ResourceKey Key for assembly resources. Can be persisted in the current appdomain only."
  },
  "api/perftests/CodeJam.PerfTests.TimeUnit.html": {
    "href": "api/perftests/CodeJam.PerfTests.TimeUnit.html",
    "title": "Enum TimeUnit | CodeJam",
    "keywords": "Enum TimeUnit Time measurement units Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax public enum TimeUnit Fields Name Description Microsecond Time measured in microseconds, us. Millisecond Time measured in milliseconds, ms. Nanosecond Time measured in nanoseconds, ns. Second Time measured in seconds, sec."
  },
  "api/perftests/CodeJam.PerfTests.Analysers.ResultAnalysis.html": {
    "href": "api/perftests/CodeJam.PerfTests.Analysers.ResultAnalysis.html",
    "title": "Class ResultAnalysis | CodeJam",
    "keywords": "Class ResultAnalysis Helper class to store competition analysis results. Inheritance System.Object Analysis ResultAnalysis Inherited Members Analysis.MessageSource Analysis.RunState Analysis.Config Analysis.Options Analysis.SafeToContinue Analysis.Logger Analysis.WriteMessage(MessageSeverity, String, String) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Analysers Assembly : CodeJam.PerfTests.dll Syntax public class ResultAnalysis : Analysis, IMessageLogger Constructors | Improve this Doc View Source ResultAnalysis(String, Summary) Initializes a new instance of the Analysis class. Declaration public ResultAnalysis(string id, Summary summary) Parameters Type Name Description System.String id The identifier. BenchmarkDotNet.Reports.Summary summary The summary. | Improve this Doc View Source ResultAnalysis(String, Summary, MessageSource) Initializes a new instance of the Analysis class. Declaration public ResultAnalysis(string id, Summary summary, MessageSource messageSource) Parameters Type Name Description System.String id The identifier. BenchmarkDotNet.Reports.Summary summary The summary. MessageSource messageSource Source for the messages. Properties | Improve this Doc View Source Conclusions Analysis conclusions. Declaration public IReadOnlyCollection<Conclusion> Conclusions { get; } Property Value Type Description System.Collections.Generic.IReadOnlyCollection < BenchmarkDotNet.Analysers.Conclusion > Analysis conclusions. | Improve this Doc View Source ConclusionsList The conclusions list. Declaration protected List<Conclusion> ConclusionsList { get; } Property Value Type Description System.Collections.Generic.List < BenchmarkDotNet.Analysers.Conclusion > The conclusions list. | Improve this Doc View Source Id Gets the analysis identifier. Declaration public string Id { get; } Property Value Type Description System.String The analysis identifier. | Improve this Doc View Source Summary The summary. Declaration public Summary Summary { get; } Property Value Type Description BenchmarkDotNet.Reports.Summary The summary. Methods | Improve this Doc View Source AddTestErrorConclusion(Target, String, BenchmarkReport) Reports test error conclusion. Declaration public override void AddTestErrorConclusion(Target target, string message, BenchmarkReport report = null) Parameters Type Name Description BenchmarkDotNet.Running.Target target Target the message applies for. System.String message Message text. BenchmarkDotNet.Reports.BenchmarkReport report The report the message belongs to. Overrides Analysis.AddTestErrorConclusion(Target, String, BenchmarkReport) | Improve this Doc View Source AddTestErrorConclusion(String, BenchmarkReport) Reports test error conclusion. Declaration public override void AddTestErrorConclusion(string message, BenchmarkReport report = null) Parameters Type Name Description System.String message Message text. BenchmarkDotNet.Reports.BenchmarkReport report The report the message belongs to. Overrides Analysis.AddTestErrorConclusion(String, BenchmarkReport) | Improve this Doc View Source AddWarningConclusion(Target, String, String, BenchmarkReport) Reports analyser warning conclusion. Declaration public override void AddWarningConclusion(Target target, string message, string hint, BenchmarkReport report = null) Parameters Type Name Description BenchmarkDotNet.Running.Target target Target the message applies for. System.String message Message text. System.String hint Hint how to fix the warning. BenchmarkDotNet.Reports.BenchmarkReport report The report the message belongs to. Overrides Analysis.AddWarningConclusion(Target, String, String, BenchmarkReport) | Improve this Doc View Source AddWarningConclusion(String, String, BenchmarkReport) Reports analyser warning conclusion. Declaration public override void AddWarningConclusion(string message, string hint, BenchmarkReport report = null) Parameters Type Name Description System.String message Message text. System.String hint Hint how to fix the warning. BenchmarkDotNet.Reports.BenchmarkReport report The report the message belongs to. Overrides Analysis.AddWarningConclusion(String, String, BenchmarkReport) Extension Methods CompetitionCoreHelpers.WriteMessage(IMessageLogger, MessageSeverity, Target, String, String) CompetitionCoreHelpers.WriteExceptionMessage(IMessageLogger, MessageSeverity, String, Exception) CompetitionCoreHelpers.WriteExceptionMessage(IMessageLogger, MessageSeverity, Target, String, Exception) CompetitionCoreHelpers.WriteExecutionErrorMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteExecutionErrorMessage(IMessageLogger, Target, String, String) CompetitionCoreHelpers.WriteSetupErrorMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteSetupErrorMessage(IMessageLogger, Target, String, String) CompetitionCoreHelpers.WriteTestErrorMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteTestErrorMessage(IMessageLogger, Target, String, String) CompetitionCoreHelpers.WriteWarningMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteWarningMessage(IMessageLogger, Target, String, String) CompetitionCoreHelpers.WriteInfoMessage(IMessageLogger, String, String) CompetitionCoreHelpers.WriteInfoMessage(IMessageLogger, Target, String, String)"
  },
  "api/perftests/CodeJam.PerfTests.Analysers.html": {
    "href": "api/perftests/CodeJam.PerfTests.Analysers.html",
    "title": "Namespace CodeJam.PerfTests.Analysers | CodeJam",
    "keywords": "Namespace CodeJam.PerfTests.Analysers Classes Analysis Helper class to trace competition analysis. CompetitionMetricValue The competition metric value. ResultAnalysis Helper class to store competition analysis results."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.TimeMetricValuesProvider.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.TimeMetricValuesProvider.html",
    "title": "Class TimeMetricValuesProvider | CodeJam",
    "keywords": "Class TimeMetricValuesProvider Implementation of IMetricValuesProvider that returns timings (in nanoseconds if the ResultIsRelative is false ). Inheritance System.Object MetricValuesProviderBase TimeMetricValuesProvider Inherited Members MetricValuesProviderBase.CreateColumnProvider(MetricInfo, MetricValueColumns) MetricValuesProviderBase.TryGetReport(Benchmark, Summary, BenchmarkReport) MetricValuesProviderBase.TryGetReports(Benchmark, Summary, BenchmarkReport, BenchmarkReport) MetricValuesProviderBase.MetricCalculator MetricValuesProviderBase.ResultIsRelative MetricValuesProviderBase.TryGetMeanValue(Benchmark, Summary) MetricValuesProviderBase.TryGetVariance(Benchmark, Summary) MetricValuesProviderBase.TryGetActualValues(Benchmark, Summary) MetricValuesProviderBase.TryGetLimitValues(Benchmark, Summary) MetricValuesProviderBase.GetColumnProvider(MetricInfo, MetricValueColumns) MetricValuesProviderBase.GetDiagnosers(MetricInfo) MetricValuesProviderBase.GetColumnProviderOverride(MetricInfo, MetricValueColumns) MetricValuesProviderBase.TryGetValues(Benchmark, Summary, Double[]) MetricValuesProviderBase.TryGetRelativeValues(Benchmark, Summary, Double[], Double[]) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public class TimeMetricValuesProvider : MetricValuesProviderBase, IMetricValuesProvider Constructors | Improve this Doc View Source TimeMetricValuesProvider(IMetricCalculator, Boolean) Initializes a new instance of the TimeMetricValuesProvider class. Declaration public TimeMetricValuesProvider(IMetricCalculator calculator, bool resultIsRelative) Parameters Type Name Description IMetricCalculator calculator The metric calculator. System.Boolean resultIsRelative true if the metric is relative. Fields | Improve this Doc View Source Category The category of metric values. Declaration public const string Category = \"Time\" Field Value Type Description System.String Methods | Improve this Doc View Source GetDiagnosersOverride(MetricInfo) Gets diagnosers the metric values. Declaration protected override IDiagnoser[] GetDiagnosersOverride(MetricInfo metric) Parameters Type Name Description MetricInfo metric The metric to get diagnosers for. Returns Type Description BenchmarkDotNet.Diagnosers.IDiagnoser [] Diagnosers for the metric values Overrides MetricValuesProviderBase.GetDiagnosersOverride(MetricInfo) | Improve this Doc View Source GetValuesFromReport(BenchmarkReport, Summary) Timings for the benchmark report in nanoseconds. Declaration protected override double[] GetValuesFromReport(BenchmarkReport benchmarkReport, Summary summary) Parameters Type Name Description BenchmarkDotNet.Reports.BenchmarkReport benchmarkReport The benchmark report. BenchmarkDotNet.Reports.Summary summary The summary. Returns Type Description System.Double [] Metric values from benchmark report Overrides MetricValuesProviderBase.GetValuesFromReport(BenchmarkReport, Summary) See Also MetricValuesProviderBase"
  },
  "api/perftests/CodeJam.PerfTests.Columns.CompetitionOptionsColumnProvider.html": {
    "href": "api/perftests/CodeJam.PerfTests.Columns.CompetitionOptionsColumnProvider.html",
    "title": "Class CompetitionOptionsColumnProvider | CodeJam",
    "keywords": "Class CompetitionOptionsColumnProvider A column provider for CompetitionCharacteristicColumn Inheritance System.Object CompetitionOptionsColumnProvider Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Columns Assembly : CodeJam.PerfTests.dll Syntax public sealed class CompetitionOptionsColumnProvider : IColumnProvider Fields | Improve this Doc View Source Instance The instance of column provider. Declaration public static readonly CompetitionOptionsColumnProvider Instance Field Value Type Description CompetitionOptionsColumnProvider Methods | Improve this Doc View Source GetColumns(Summary) Gets competition options columns. Declaration public IEnumerable<IColumn> GetColumns(Summary summary) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary The summary. Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Columns.IColumn > The competition options columns Implements BenchmarkDotNet.Columns.IColumnProvider.GetColumns(BenchmarkDotNet.Reports.Summary) See Also BenchmarkDotNet.Columns.IColumnProvider CompetitionCharacteristicColumn"
  },
  "api/perftests/CodeJam.PerfTests.CompetitionConfigFactoryAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionConfigFactoryAttribute.html",
    "title": "Class CompetitionConfigFactoryAttribute | CodeJam",
    "keywords": "Class CompetitionConfigFactoryAttribute Competition config factory attribute. Inheritance System.Object System.Attribute CompetitionConfigFactoryAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, Inherited = true, AllowMultiple = false)] public class CompetitionConfigFactoryAttribute : Attribute, _Attribute, ICompetitionConfigFactorySource Constructors | Improve this Doc View Source CompetitionConfigFactoryAttribute(Func<ICompetitionConfigFactory>) Initializes a new instance of the CompetitionConfigFactoryAttribute class. Declaration protected CompetitionConfigFactoryAttribute(Func<ICompetitionConfigFactory> valueFactory) Parameters Type Name Description System.Func < ICompetitionConfigFactory > valueFactory The value factory. | Improve this Doc View Source CompetitionConfigFactoryAttribute(Type) Initializes a new instance of the CompetitionConfigFactoryAttribute class. Declaration public CompetitionConfigFactoryAttribute(Type valueType) Parameters Type Name Description System.Type valueType Type of the competition config factory. Should have a public parameterless constructor. Properties | Improve this Doc View Source ConfigFactory The competition config factory. Declaration public ICompetitionConfigFactory ConfigFactory { get; } Property Value Type Description ICompetitionConfigFactory The competition config factory. Implements ICompetitionConfigFactorySource.ConfigFactory See Also ICompetitionConfigFactorySource"
  },
  "api/perftests/CodeJam.PerfTests.CompetitionFeaturesAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionFeaturesAttribute.html",
    "title": "Class CompetitionFeaturesAttribute | CodeJam",
    "keywords": "Class CompetitionFeaturesAttribute Modifier attribute for competition features. Inheritance System.Object System.Attribute CompetitionFeaturesAttribute CompetitionAnnotateSourcesAttribute CompetitionBurstModeAttribute CompetitionPlatformAttribute CompetitionPreviewMetricsAttribute CompetitionReannotateSourcesAttribute CompetitionTroubleshootingModeAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, Inherited = true, AllowMultiple = true)] public class CompetitionFeaturesAttribute : Attribute, _Attribute, ICompetitionFeatures Constructors | Improve this Doc View Source CompetitionFeaturesAttribute() Initializes a new instance of the CompetitionFeaturesAttribute class. Declaration public CompetitionFeaturesAttribute() | Improve this Doc View Source CompetitionFeaturesAttribute(CompetitionFeatures) Initializes a new instance of the CompetitionFeaturesAttribute class. Declaration protected CompetitionFeaturesAttribute(CompetitionFeatures features) Parameters Type Name Description CompetitionFeatures features The features. Properties | Improve this Doc View Source AnnotateSources Enables source annotations feature. Declaration public bool AnnotateSources { get; set; } Property Value Type Description System.Boolean true if source annotations feature should be enabled. | Improve this Doc View Source BurstMode Performs single run per measurement. Recommended for use if single call time >> than timer resolution (recommended minimum is 1000 ns). Declaration public bool BurstMode { get; set; } Property Value Type Description System.Boolean Target platform for the competition. | Improve this Doc View Source ContinuousIntegrationMode The code is being run on a CI server. LogAnnotations , DontSaveUpdatedAnnotations and ContinuousIntegrationMode are enabled, PreviousRunLogUri is ignored. Declaration public bool ContinuousIntegrationMode { get; set; } Property Value Type Description System.Boolean true if the code is being run on a CI server. | Improve this Doc View Source DetailedLogger Enables detailed logger. Declaration public bool DetailedLogger { get; set; } Property Value Type Description System.Boolean true if detailed logger should be used. | Improve this Doc View Source IgnoreExistingAnnotations Ignores existing annotations if AnnotateSources is enabled. Value of PreviousRunLogUri is ignored. Declaration public bool IgnoreExistingAnnotations { get; set; } Property Value Type Description System.Boolean true if reannotation feature should be enabled. | Improve this Doc View Source ImportantInfoLogger Enables important info logger. Declaration public bool ImportantInfoLogger { get; set; } Property Value Type Description System.Boolean true if important info logger should be used. | Improve this Doc View Source Platform Specifies target platform for the competition. Declaration public Platform Platform { get; set; } Property Value Type Description BenchmarkDotNet.Environments.Platform Target platform for the competition. | Improve this Doc View Source PreviousRunLogUri Sets the PreviousRunLogUri to the specified value. Declaration public string PreviousRunLogUri { get; set; } Property Value Type Description System.String The value for PreviousRunLogUri . | Improve this Doc View Source ReportWarningsAsErrors Fails tests if there are any warnings. Declaration public bool ReportWarningsAsErrors { get; set; } Property Value Type Description System.Boolean true if ReportWarningsAsErrors should be set to true. | Improve this Doc View Source TroubleshootingMode Enables DetailedLogging and AllowDebugBuilds options. Adds the CsvTimingsExporter exporter. Adds important info and detailed info loggers. Declaration public bool TroubleshootingMode { get; set; } Property Value Type Description System.Boolean true to enable troubleshooting mode. Methods | Improve this Doc View Source GetFeatures() Gets the features from the attribute. Declaration public CompetitionFeatures GetFeatures() Returns Type Description CompetitionFeatures Features from the attribute See Also CompetitionFeatures"
  },
  "api/perftests/CodeJam.PerfTests.CompetitionHelpers.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionHelpers.html",
    "title": "Class CompetitionHelpers | CodeJam",
    "keywords": "Class CompetitionHelpers Reusable API for performance tests. Inheritance System.Object CompetitionHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax public static class CompetitionHelpers Fields | Improve this Doc View Source PerfTestCategory Default category prefix for performance tests. Declaration public const string PerfTestCategory = \"Performance\" Field Value Type Description System.String | Improve this Doc View Source TemporarilyExcludedReason Default explanation for bad performance tests. Declaration public const string TemporarilyExcludedReason = \"Temporary disabled as the results are unstable. Please, run the test manually from the Test Explorer window.\" Field Value Type Description System.String Properties | Improve this Doc View Source ConfigForAssembly Default configuration for calling assembly that should be used for most performance tests. Declaration public static ICompetitionConfig ConfigForAssembly { get; } Property Value Type Description ICompetitionConfig Default competition configuration. | Improve this Doc View Source DefaultConfig Default configuration that ignores calling assembly configuration attributes. Declaration public static ICompetitionConfig DefaultConfig { get; } Property Value Type Description ICompetitionConfig Default competition configuration. Methods | Improve this Doc View Source CreateConfig(Assembly, CompetitionFeatures) Creates competition config for type. Declaration public static ICompetitionConfig CreateConfig(Assembly targetAssembly = null, CompetitionFeatures competitionFeatures = null) Parameters Type Name Description System.Reflection.Assembly targetAssembly Assembly to create config for. CompetitionFeatures competitionFeatures The competition features. Returns Type Description ICompetitionConfig Competition config for type. | Improve this Doc View Source CreateConfig(Type, CompetitionFeatures) Creates competition config for type. Declaration public static ICompetitionConfig CreateConfig(Type benchmarkType, CompetitionFeatures competitionFeatures = null) Parameters Type Name Description System.Type benchmarkType Benchmark class to run. CompetitionFeatures competitionFeatures The competition features. Returns Type Description ICompetitionConfig Competition config for type."
  },
  "api/perftests/CodeJam.PerfTests.CompetitionModifierAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionModifierAttribute.html",
    "title": "Class CompetitionModifierAttribute | CodeJam",
    "keywords": "Class CompetitionModifierAttribute Competition config modifier attribute. Inheritance System.Object System.Attribute CompetitionModifierAttribute CompetitionIgnoreAllocationsAttribute CompetitionMaximumRerunsAttribute CompetitionMeasureAllAttribute CompetitionMeasureAllocationsAttribute CompetitionNoRelativeTimeAttribute Inherited Members System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax [AttributeUsage(AttributeTargets.Assembly | AttributeTargets.Class, Inherited = true, AllowMultiple = true)] public class CompetitionModifierAttribute : Attribute, _Attribute, ICompetitionModifierSource Constructors | Improve this Doc View Source CompetitionModifierAttribute(Func<ICompetitionModifier>) Initializes a new instance of the CompetitionModifierAttribute class. Declaration protected CompetitionModifierAttribute(Func<ICompetitionModifier> valueFactory) Parameters Type Name Description System.Func < ICompetitionModifier > valueFactory The competition modifier factory. | Improve this Doc View Source CompetitionModifierAttribute(Type) Initializes a new instance of the CompetitionModifierAttribute class. Declaration public CompetitionModifierAttribute(Type competitionModifierType) Parameters Type Name Description System.Type competitionModifierType Type of the competition modifier. Should implement the ICompetitionModifier interface and have a public parameterless constructor. Properties | Improve this Doc View Source Modifier The competition modifier. Declaration public ICompetitionModifier Modifier { get; } Property Value Type Description ICompetitionModifier The competition modifier. Implements ICompetitionModifierSource.Modifier See Also ICompetitionModifierSource"
  },
  "api/perftests/CodeJam.PerfTests.Configs.ConcurrentRunBehavior.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.ConcurrentRunBehavior.html",
    "title": "Enum ConcurrentRunBehavior | CodeJam",
    "keywords": "Enum ConcurrentRunBehavior Behavior for concurrent competition runs. Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public enum ConcurrentRunBehavior Fields Name Description Default Same as Lock : use global (cross-process) lock to prevent concurrent runs. Fail Competition will be failed. Lock Use global (cross-process) lock to prevent concurrent runs. Skip Competition will be skipped."
  },
  "api/perftests/CodeJam.PerfTests.Configs.Factories.CompetitionConfigFactory.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.Factories.CompetitionConfigFactory.html",
    "title": "Class CompetitionConfigFactory | CodeJam",
    "keywords": "Class CompetitionConfigFactory Reusable API for creating competition config. Inheritance System.Object CompetitionConfigFactory Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs.Factories Assembly : CodeJam.PerfTests.dll Syntax public class CompetitionConfigFactory : ICompetitionConfigFactory Constructors | Improve this Doc View Source CompetitionConfigFactory(String) Initializes a new instance of the CompetitionConfigFactory class. Declaration public CompetitionConfigFactory(string configId) Parameters Type Name Description System.String configId The config identifier. Fields | Improve this Doc View Source BurstModeModifier The modifier for burst mode jobs. Declaration public static readonly Job BurstModeModifier Field Value Type Description BenchmarkDotNet.Jobs.Job | Improve this Doc View Source DefaultColumns Columns for default config. Declaration public static IColumnProvider DefaultColumns Field Value Type Description BenchmarkDotNet.Columns.IColumnProvider | Improve this Doc View Source DefaultCompetitionOptions Default competition config options. Declaration public static readonly CompetitionOptions DefaultCompetitionOptions Field Value Type Description CompetitionOptions | Improve this Doc View Source DefaultJob Default competition config job. Declaration public static readonly Job DefaultJob Field Value Type Description BenchmarkDotNet.Jobs.Job | Improve this Doc View Source DefaultMetrics Columns for troubleshooting mode config. Declaration public static IReadOnlyList<MetricInfo> DefaultMetrics Field Value Type Description System.Collections.Generic.IReadOnlyList < MetricInfo > | Improve this Doc View Source FallbackInstance Default instance of CompetitionConfigFactory Declaration protected static readonly CompetitionConfigFactory FallbackInstance Field Value Type Description CompetitionConfigFactory | Improve this Doc View Source TroubleshootingModeColumns Columns for troubleshooting mode config. Declaration public static IColumnProvider TroubleshootingModeColumns Field Value Type Description BenchmarkDotNet.Columns.IColumnProvider Properties | Improve this Doc View Source ConfigId The config identifier. Declaration public string ConfigId { get; } Property Value Type Description System.String The config identifier. Methods | Improve this Doc View Source ApplyCompetitionModifiers(ManualCompetitionConfig, ICustomAttributeProvider) Applies competition modifiers. Declaration protected virtual void ApplyCompetitionModifiers(ManualCompetitionConfig competitionConfig, ICustomAttributeProvider metadataSource) Parameters Type Name Description ManualCompetitionConfig competitionConfig The competition configuration. System.Reflection.ICustomAttributeProvider metadataSource The metadata source. | Improve this Doc View Source CompleteConfig(ManualCompetitionConfig) Completes competition config creation. Declaration protected virtual ICompetitionConfig CompleteConfig(ManualCompetitionConfig competitionConfig) Parameters Type Name Description ManualCompetitionConfig competitionConfig Current competition config. Returns Type Description ICompetitionConfig Read-only competition config. | Improve this Doc View Source CompleteFeatures(CompetitionFeatures) Completes competition features creation. Declaration protected virtual CompetitionFeatures CompleteFeatures(CompetitionFeatures competitionFeatures) Parameters Type Name Description CompetitionFeatures competitionFeatures Current competition features. Returns Type Description CompetitionFeatures Frozen competition features. | Improve this Doc View Source Create(Assembly, CompetitionFeatures) Creates competition config for type. Declaration public ICompetitionConfig Create(Assembly targetAssembly, CompetitionFeatures competitionFeatures) Parameters Type Name Description System.Reflection.Assembly targetAssembly Assembly to create config for. CompetitionFeatures competitionFeatures The competition features. Returns Type Description ICompetitionConfig Competition config for type. Implements ICompetitionConfigFactory.Create(Assembly, CompetitionFeatures) | Improve this Doc View Source Create(Type, CompetitionFeatures) Creates competition config for type. Declaration public ICompetitionConfig Create(Type benchmarkType, CompetitionFeatures competitionFeatures) Parameters Type Name Description System.Type benchmarkType Benchmark class to run. CompetitionFeatures competitionFeatures The competition features. Returns Type Description ICompetitionConfig Competition config for type. Implements ICompetitionConfigFactory.Create(Type, CompetitionFeatures) | Improve this Doc View Source CreateCompetitionFeaturesUnfrozen(String, ICustomAttributeProvider) Creates competition features. BenchmarkDotNet.Characteristics.CharacteristicObject.Frozen is false. Declaration protected virtual CompetitionFeatures CreateCompetitionFeaturesUnfrozen(string jobId, ICustomAttributeProvider metadataSource) Parameters Type Name Description System.String jobId The job identifier. System.Reflection.ICustomAttributeProvider metadataSource The metadata source. Returns Type Description CompetitionFeatures New competition features. BenchmarkDotNet.Characteristics.CharacteristicObject.Frozen is false. | Improve this Doc View Source CreateCompetitionOptionsUnfrozen(ICustomAttributeProvider, CompetitionFeatures) Creates options for the competition. The BenchmarkDotNet.Characteristics.CharacteristicObject.Frozen is false. Declaration protected virtual CompetitionOptions CreateCompetitionOptionsUnfrozen(ICustomAttributeProvider metadataSource, CompetitionFeatures competitionFeatures) Parameters Type Name Description System.Reflection.ICustomAttributeProvider metadataSource The metadata source. CompetitionFeatures competitionFeatures The competition features. Returns Type Description CompetitionOptions Options for the competition. The BenchmarkDotNet.Characteristics.CharacteristicObject.Frozen is false. | Improve this Doc View Source CreateCore(ICustomAttributeProvider, CompetitionFeatures) Creates competition config for type. Declaration protected ICompetitionConfig CreateCore(ICustomAttributeProvider metadataSource, CompetitionFeatures competitionFeatures) Parameters Type Name Description System.Reflection.ICustomAttributeProvider metadataSource The metadata source. CompetitionFeatures competitionFeatures The competition features. Returns Type Description ICompetitionConfig Competition config for type. | Improve this Doc View Source CreateEmptyConfig(ICustomAttributeProvider, CompetitionFeatures) Creates empty competition config without job and competition options applied. Declaration protected virtual ManualCompetitionConfig CreateEmptyConfig(ICustomAttributeProvider metadataSource, CompetitionFeatures competitionFeatures) Parameters Type Name Description System.Reflection.ICustomAttributeProvider metadataSource The metadata source. CompetitionFeatures competitionFeatures The competition features. Returns Type Description ManualCompetitionConfig New empty competition config. | Improve this Doc View Source CreateJobUnfrozen(String, ICustomAttributeProvider, CompetitionFeatures) Creates job for the competition. BenchmarkDotNet.Characteristics.CharacteristicObject.Frozen is false. Declaration protected virtual Job CreateJobUnfrozen(string jobId, ICustomAttributeProvider metadataSource, CompetitionFeatures competitionFeatures) Parameters Type Name Description System.String jobId The job identifier. System.Reflection.ICustomAttributeProvider metadataSource The metadata source. CompetitionFeatures competitionFeatures The competition features. Returns Type Description BenchmarkDotNet.Jobs.Job New job for the competition. BenchmarkDotNet.Characteristics.CharacteristicObject.Frozen is false. | Improve this Doc View Source FindFactoryAndCreate(Assembly, CompetitionFeatures) Creates competition config for type. Declaration public static ICompetitionConfig FindFactoryAndCreate(Assembly targetAssembly, CompetitionFeatures competitionFeatures) Parameters Type Name Description System.Reflection.Assembly targetAssembly Assembly to create config for. CompetitionFeatures competitionFeatures The competition features. Returns Type Description ICompetitionConfig Competition config for type. | Improve this Doc View Source FindFactoryAndCreate(Type, CompetitionFeatures) Creates competition config for type. Declaration public static ICompetitionConfig FindFactoryAndCreate(Type benchmarkType, CompetitionFeatures competitionFeatures) Parameters Type Name Description System.Type benchmarkType Benchmark class to run. CompetitionFeatures competitionFeatures The competition features. Returns Type Description ICompetitionConfig Competition config for type."
  },
  "api/perftests/CodeJam.PerfTests.Configs.Factories.CompetitionFactoryHelpers.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.Factories.CompetitionFactoryHelpers.html",
    "title": "Class CompetitionFactoryHelpers | CodeJam",
    "keywords": "Class CompetitionFactoryHelpers Reusable API for creating competition config. Inheritance System.Object CompetitionFactoryHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs.Factories Assembly : CodeJam.PerfTests.dll Syntax public static class CompetitionFactoryHelpers Fields | Improve this Doc View Source DetailedLogSuffix The detailed log extension suffix. Can be used as a condition for CI build artifacts Declaration public const string DetailedLogSuffix = \".Detailed.PerfTests.log\" Field Value Type Description System.String | Improve this Doc View Source ImportantOnlyLogSuffix The important only log extension suffix. Can be used as a condition for CI build artifacts Declaration public const string ImportantOnlyLogSuffix = \".ImportantOnly.PerfTests.log\" Field Value Type Description System.String | Improve this Doc View Source SectionName Name of the config section. Declaration public const string SectionName = \"CodeJam.PerfTests\" Field Value Type Description System.String | Improve this Doc View Source WellKnownCiVariables Well-known Continuous Integration services environment variables Declaration public static readonly IReadOnlyList<string> WellKnownCiVariables Field Value Type Description System.Collections.Generic.IReadOnlyList < System.String > Methods | Improve this Doc View Source FeaturesFromAppConfig(Assembly[]) Reads CompetitionFeatures from assembly level options config section. Declaration public static CompetitionFeatures FeaturesFromAppConfig(params Assembly[] assembliesToCheck) Parameters Type Name Description System.Reflection.Assembly [] assembliesToCheck Assemblies to check for the config section if the app.config does not contain the section. Returns Type Description CompetitionFeatures CompetitionFeatures section filled from first of app.config, assembliesToCheck or CodeJam.PerfTests assembly. | Improve this Doc View Source GetAssembly(ICustomAttributeProvider) Returns assembly for the metadata source. Declaration public static Assembly GetAssembly(ICustomAttributeProvider metadataSource) Parameters Type Name Description System.Reflection.ICustomAttributeProvider metadataSource The metadata source. Returns Type Description System.Reflection.Assembly Assembly for the metadata source | Improve this Doc View Source GetCompetitionFeatures(ICustomAttributeProvider) Creates competition features object. If metadataSource is null , new instance of competition features is returned. Else, competition features are obtained from app.config, if any and are updated with values from CompetitionFeaturesAttribute , if any. Declaration public static CompetitionFeatures GetCompetitionFeatures(ICustomAttributeProvider metadataSource) Parameters Type Name Description System.Reflection.ICustomAttributeProvider metadataSource The metadata source. Returns Type Description CompetitionFeatures A new instance of competition features object | Improve this Doc View Source GetDetailedLogger(Assembly) Gets the detailed logger. Declaration public static ILogger GetDetailedLogger(Assembly targetAssembly) Parameters Type Name Description System.Reflection.Assembly targetAssembly Assembly to create config for. Returns Type Description BenchmarkDotNet.Loggers.ILogger Detailed logger for the assembly. | Improve this Doc View Source GetImportantInfoLogger(Assembly) Gets the important information logger. Declaration public static ILogger GetImportantInfoLogger(Assembly targetAssembly) Parameters Type Name Description System.Reflection.Assembly targetAssembly Assembly to create config for. Returns Type Description BenchmarkDotNet.Loggers.ILogger Important information logger for the assembly | Improve this Doc View Source RunsUnderContinuousIntegration() Checks that run is performed under continuous integration. Declaration public static bool RunsUnderContinuousIntegration() Returns Type Description System.Boolean"
  },
  "api/perftests/CodeJam.PerfTests.Configs.Factories.ICompetitionConfigFactory.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.Factories.ICompetitionConfigFactory.html",
    "title": "Interface ICompetitionConfigFactory | CodeJam",
    "keywords": "Interface ICompetitionConfigFactory Competition config factory Namespace : CodeJam.PerfTests.Configs.Factories Assembly : CodeJam.PerfTests.dll Syntax public interface ICompetitionConfigFactory Methods | Improve this Doc View Source Create(Assembly, CompetitionFeatures) Creates competition config for type. Declaration ICompetitionConfig Create(Assembly targetAssembly, CompetitionFeatures competitionFeatures) Parameters Type Name Description System.Reflection.Assembly targetAssembly Assembly to create config for. CompetitionFeatures competitionFeatures The competition features. Returns Type Description ICompetitionConfig Competition config for type. | Improve this Doc View Source Create(Type, CompetitionFeatures) Creates competition config for type. Declaration ICompetitionConfig Create(Type benchmarkType, CompetitionFeatures competitionFeatures) Parameters Type Name Description System.Type benchmarkType Benchmark class to run. CompetitionFeatures competitionFeatures The competition features. Returns Type Description ICompetitionConfig Competition config for type."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.GcMetricValuesProvider.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.GcMetricValuesProvider.html",
    "title": "Class GcMetricValuesProvider | CodeJam",
    "keywords": "Class GcMetricValuesProvider Implementation of IMetricValuesProvider that returns various values from Benchmark's GcStats Inheritance System.Object MetricValuesProviderBase GcMetricValuesProvider Inherited Members MetricValuesProviderBase.CreateColumnProvider(MetricInfo, MetricValueColumns) MetricValuesProviderBase.TryGetReport(Benchmark, Summary, BenchmarkReport) MetricValuesProviderBase.TryGetReports(Benchmark, Summary, BenchmarkReport, BenchmarkReport) MetricValuesProviderBase.MetricCalculator MetricValuesProviderBase.ResultIsRelative MetricValuesProviderBase.TryGetMeanValue(Benchmark, Summary) MetricValuesProviderBase.TryGetVariance(Benchmark, Summary) MetricValuesProviderBase.TryGetActualValues(Benchmark, Summary) MetricValuesProviderBase.TryGetLimitValues(Benchmark, Summary) MetricValuesProviderBase.GetColumnProvider(MetricInfo, MetricValueColumns) MetricValuesProviderBase.GetDiagnosers(MetricInfo) MetricValuesProviderBase.GetColumnProviderOverride(MetricInfo, MetricValueColumns) MetricValuesProviderBase.TryGetValues(Benchmark, Summary, Double[]) MetricValuesProviderBase.TryGetRelativeValues(Benchmark, Summary, Double[], Double[]) System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public class GcMetricValuesProvider : MetricValuesProviderBase, IMetricValuesProvider Constructors | Improve this Doc View Source GcMetricValuesProvider(GcMetricSource, Boolean) Initializes a new instance of the TimeMetricValuesProvider class. Declaration public GcMetricValuesProvider(GcMetricSource metricSource, bool resultIsRelative) Parameters Type Name Description GcMetricSource metricSource Property of the BenchmarkDotNet.Engines.GcStats to be used as a GC metric value. System.Boolean resultIsRelative true if the metric is relative. Fields | Improve this Doc View Source Category The category of metric values. Declaration public const string Category = \"GcMemory\" Field Value Type Description System.String Properties | Improve this Doc View Source MetricSource Property of the BenchmarkDotNet.Engines.GcStats to be used as a GC metric value. Declaration public GcMetricSource MetricSource { get; } Property Value Type Description GcMetricSource Property of the BenchmarkDotNet.Engines.GcStats to be used as a GC metric value. Methods | Improve this Doc View Source GetDiagnosersOverride(MetricInfo) Gets diagnosers the metric values. Declaration protected override IDiagnoser[] GetDiagnosersOverride(MetricInfo metric) Parameters Type Name Description MetricInfo metric The metric to get diagnosers for. Returns Type Description BenchmarkDotNet.Diagnosers.IDiagnoser [] Diagnosers for the metric values Overrides MetricValuesProviderBase.GetDiagnosersOverride(MetricInfo) | Improve this Doc View Source GetValuesFromReport(BenchmarkReport, Summary) Timings for the benchmark report in nanoseconds. Declaration protected override double[] GetValuesFromReport(BenchmarkReport benchmarkReport, Summary summary) Parameters Type Name Description BenchmarkDotNet.Reports.BenchmarkReport benchmarkReport The benchmark report. BenchmarkDotNet.Reports.Summary summary The summary. Returns Type Description System.Double [] Metric values from benchmark report Overrides MetricValuesProviderBase.GetValuesFromReport(BenchmarkReport, Summary) See Also MetricValuesProviderBase"
  },
  "api/perftests/CodeJam.PerfTests.Metrics.IMetricAttribute-1.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.IMetricAttribute-1.html",
    "title": "Interface IMetricAttribute<TMetricProvider> | CodeJam",
    "keywords": "Interface IMetricAttribute<TMetricProvider> Interface for custom metric attributes that has no unit of measurement. Inherited Members IStoredMetricValue.MetricAttributeType IStoredMetricValue.Min IStoredMetricValue.Max IStoredMetricValue.UnitOfMeasurement Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public interface IMetricAttribute<TMetricProvider> : IStoredMetricValue where TMetricProvider : IMetricValuesProvider, new () Type Parameters Name Description TMetricProvider The type of the metric provider. See Also IMetricAttribute <TMetricProvider, TUnitOfMeasurement> IStoredMetricValue"
  },
  "api/perftests/CodeJam.PerfTests.Metrics.IMetricAttribute-2.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.IMetricAttribute-2.html",
    "title": "Interface IMetricAttribute<TMetricProvider, TUnitOfMeasurement> | CodeJam",
    "keywords": "Interface IMetricAttribute<TMetricProvider, TUnitOfMeasurement> Interface for custom metric attributes that has unit of measurement. Inherited Members IStoredMetricValue.MetricAttributeType IStoredMetricValue.Min IStoredMetricValue.Max Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public interface IMetricAttribute<TMetricProvider, TUnitOfMeasurement> : IMetricAttribute<TMetricProvider>, IStoredMetricValue where TMetricProvider : IMetricValuesProvider, new ()where TUnitOfMeasurement : struct Type Parameters Name Description TMetricProvider The type of the metric provider. TUnitOfMeasurement The type of the unit of measurement. Properties | Improve this Doc View Source UnitOfMeasurement Gets unit of measurement for the metric. Declaration TUnitOfMeasurement UnitOfMeasurement { get; } Property Value Type Description TUnitOfMeasurement The unit of measurement for the metric. See Also IMetricAttribute <TMetricProvider, TUnitOfMeasurement> IStoredMetricValue"
  },
  "api/perftests/CodeJam.PerfTests.Metrics.IMetricCalculator.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.IMetricCalculator.html",
    "title": "Interface IMetricCalculator | CodeJam",
    "keywords": "Interface IMetricCalculator Helper type that allows to reuse statistic calculation logic across different implementations Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public interface IMetricCalculator Methods | Improve this Doc View Source TryGetActualValues(Double[]) Gets actual values range for the set of values. Declaration MetricRange TryGetActualValues(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description MetricRange Actual values range for for the set of values (or empty range if none). | Improve this Doc View Source TryGetLimitValues(Double[]) Gets expected limits range for the set of values. Declaration MetricRange TryGetLimitValues(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description MetricRange Limit values range for the set of values (or empty range if none). | Improve this Doc View Source TryGetMeanValue(Double[]) Gets actual value for the set of values. Declaration double ? TryGetMeanValue(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description System.Nullable < System.Double > Actual value for the set of values or null if none. | Improve this Doc View Source TryGetRelativeActualValues(Double[], Double[]) Gets actual values range for the set of values (relative metric). Declaration MetricRange TryGetRelativeActualValues(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description MetricRange Actual values range for the set of values (or empty range if none). | Improve this Doc View Source TryGetRelativeLimitValues(Double[], Double[]) Gets expected limits range for the set of values (relative metric). Declaration MetricRange TryGetRelativeLimitValues(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description MetricRange Limit values range for the set of values (or empty range if none). | Improve this Doc View Source TryGetRelativeMeanValue(Double[], Double[]) Gets actual value for the set of values (relative metric). Declaration double ? TryGetRelativeMeanValue(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description System.Nullable < System.Double > Actual value for the set of values or null if none. | Improve this Doc View Source TryGetRelativeVariance(Double[], Double[]) Gets variance for the set of values (relative metric). Declaration double ? TryGetRelativeVariance(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description System.Nullable < System.Double > Variance for the set of values or null if none. | Improve this Doc View Source TryGetVariance(Double[]) Gets variance for the set of values. Declaration double ? TryGetVariance(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description System.Nullable < System.Double > Variance for the set of values or null if none."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.PercentileMetricCalculator.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.PercentileMetricCalculator.html",
    "title": "Class PercentileMetricCalculator | CodeJam",
    "keywords": "Class PercentileMetricCalculator Metric calculator for absolute metrics (especially for long-runing benchmarks). Uses percentiles for results estimation. Inheritance System.Object PercentileMetricCalculator Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public sealed class PercentileMetricCalculator : IMetricCalculator Constructors | Improve this Doc View Source PercentileMetricCalculator(Int32, Int32, Int32) Initializes a new instance of the PercentileMetricCalculator class. Declaration public PercentileMetricCalculator(int meanPercentile, int actualValuesPercentileDelta, int limitValuesPercentileDelta) Parameters Type Name Description System.Int32 meanPercentile The mean percentile. System.Int32 actualValuesPercentileDelta Actual values percentile delta. System.Int32 limitValuesPercentileDelta Limits percentile delta. Fields | Improve this Doc View Source P50 Metric is based on 45..55th percentiles. Declaration public static readonly IMetricCalculator P50 Field Value Type Description IMetricCalculator | Improve this Doc View Source P85 Metric is based on 85th percentiles. Declaration public static readonly IMetricCalculator P85 Field Value Type Description IMetricCalculator | Improve this Doc View Source P95 Metric is based on 95th percentiles. Declaration public static readonly IMetricCalculator P95 Field Value Type Description IMetricCalculator Properties | Improve this Doc View Source ActualValuesPercentileDelta Actual values percentile delta. Declaration public int ActualValuesPercentileDelta { get; } Property Value Type Description System.Int32 Actual values percentile delta. | Improve this Doc View Source LimitValuesPercentileDelta Limits percentile delta. Declaration public int LimitValuesPercentileDelta { get; } Property Value Type Description System.Int32 Limits percentile deltas. | Improve this Doc View Source MeanPercentile The mean percentile. Declaration public int MeanPercentile { get; } Property Value Type Description System.Int32 The mean percentile. Methods | Improve this Doc View Source TryGetActualValues(Double[]) Gets actual values range for the set of values. Declaration public MetricRange TryGetActualValues(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description MetricRange Actual values range for for the set of values (or empty range if none). Implements IMetricCalculator.TryGetActualValues(Double[]) | Improve this Doc View Source TryGetLimitValues(Double[]) Gets expected limits range for the set of values. Declaration public MetricRange TryGetLimitValues(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description MetricRange Limit values range for the set of values (or empty range if none). Implements IMetricCalculator.TryGetLimitValues(Double[]) | Improve this Doc View Source TryGetMeanValue(Double[]) Gets actual value for the set of values. Declaration public double ? TryGetMeanValue(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description System.Nullable < System.Double > Actual value for the set of values or null if none. Implements IMetricCalculator.TryGetMeanValue(Double[]) | Improve this Doc View Source TryGetRelativeActualValues(Double[], Double[]) Gets actual values range for the set of values (relative metric). Declaration public MetricRange TryGetRelativeActualValues(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description MetricRange Actual values range for the set of values (or empty range if none). Implements IMetricCalculator.TryGetRelativeActualValues(Double[], Double[]) | Improve this Doc View Source TryGetRelativeLimitValues(Double[], Double[]) Gets expected limits range for the set of values (relative metric). Declaration public MetricRange TryGetRelativeLimitValues(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description MetricRange Limit values range for the set of values (or empty range if none). Implements IMetricCalculator.TryGetRelativeLimitValues(Double[], Double[]) | Improve this Doc View Source TryGetRelativeMeanValue(Double[], Double[]) Gets actual value for the set of values (relative metric). Declaration public double ? TryGetRelativeMeanValue(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description System.Nullable < System.Double > Actual value for the set of values or null if none. Implements IMetricCalculator.TryGetRelativeMeanValue(Double[], Double[]) | Improve this Doc View Source TryGetRelativeVariance(Double[], Double[]) Gets variance for the set of values (relative metric). Declaration public double ? TryGetRelativeVariance(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description System.Nullable < System.Double > Variance for the set of values or null if none. Implements IMetricCalculator.TryGetRelativeVariance(Double[], Double[]) | Improve this Doc View Source TryGetVariance(Double[]) Gets variance for the set of values. Declaration public double ? TryGetVariance(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description System.Nullable < System.Double > Variance for the set of values or null if none. Implements IMetricCalculator.TryGetVariance(Double[]) See Also IMetricCalculator"
  },
  "api/perftests/CodeJam.PerfTests.Metrics.SingleValueMetricCalculator.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.SingleValueMetricCalculator.html",
    "title": "Class SingleValueMetricCalculator | CodeJam",
    "keywords": "Class SingleValueMetricCalculator Helper calculator for metrics that provide only single value instead of a multiple sample set. Inheritance System.Object SingleValueMetricCalculator Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public sealed class SingleValueMetricCalculator : IMetricCalculator Fields | Improve this Doc View Source Instance Instance of the provider. Declaration public static readonly IMetricCalculator Instance Field Value Type Description IMetricCalculator Methods | Improve this Doc View Source TryGetActualValues(Double[]) Gets actual values range for the set of values. Declaration public MetricRange TryGetActualValues(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description MetricRange Actual values range for for the set of values (or empty range if none). Implements IMetricCalculator.TryGetActualValues(Double[]) | Improve this Doc View Source TryGetLimitValues(Double[]) Gets expected limits range for the set of values. Declaration public MetricRange TryGetLimitValues(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description MetricRange Limit values range for the set of values (or empty range if none). Implements IMetricCalculator.TryGetLimitValues(Double[]) | Improve this Doc View Source TryGetMeanValue(Double[]) Gets actual value for the set of values. Declaration public double ? TryGetMeanValue(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description System.Nullable < System.Double > Actual value for the set of values or null if none. Implements IMetricCalculator.TryGetMeanValue(Double[]) | Improve this Doc View Source TryGetRelativeActualValues(Double[], Double[]) Gets actual values range for the set of values (relative metric). Declaration public MetricRange TryGetRelativeActualValues(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description MetricRange Actual values range for the set of values (or empty range if none). Implements IMetricCalculator.TryGetRelativeActualValues(Double[], Double[]) | Improve this Doc View Source TryGetRelativeLimitValues(Double[], Double[]) Gets expected limits range for the set of values (relative metric). Declaration public MetricRange TryGetRelativeLimitValues(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description MetricRange Limit values range for the set of values (or empty range if none). Implements IMetricCalculator.TryGetRelativeLimitValues(Double[], Double[]) | Improve this Doc View Source TryGetRelativeMeanValue(Double[], Double[]) Gets actual value for the set of values (relative metric). Declaration public double ? TryGetRelativeMeanValue(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description System.Nullable < System.Double > Actual value for the set of values or null if none. Implements IMetricCalculator.TryGetRelativeMeanValue(Double[], Double[]) | Improve this Doc View Source TryGetRelativeVariance(Double[], Double[]) Gets variance for the set of values (relative metric). Declaration public double ? TryGetRelativeVariance(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description System.Nullable < System.Double > Variance for the set of values or null if none. Implements IMetricCalculator.TryGetRelativeVariance(Double[], Double[]) | Improve this Doc View Source TryGetVariance(Double[]) Gets variance for the set of values. Declaration public double ? TryGetVariance(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description System.Nullable < System.Double > Variance for the set of values or null if none. Implements IMetricCalculator.TryGetVariance(Double[]) See Also IMetricCalculator"
  },
  "api/perftests/index.html": {
    "href": "api/perftests/index.html",
    "title": "CodeJam library | CodeJam",
    "keywords": "CodeJam library"
  },
  "api/perftests/BenchmarkDotNet.Configs.ReadOnlyConfig.html": {
    "href": "api/perftests/BenchmarkDotNet.Configs.ReadOnlyConfig.html",
    "title": "Class ReadOnlyConfig | CodeJam",
    "keywords": "Class ReadOnlyConfig Wrapper class for readonly config. Inheritance System.Object ReadOnlyConfig ReadOnlyCompetitionConfig Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : BenchmarkDotNet.Configs Assembly : CodeJam.PerfTests.dll Syntax public class ReadOnlyConfig : IConfig Constructors | Improve this Doc View Source ReadOnlyConfig(IConfig) Initializes a new instance of the ReadOnlyConfig class. Declaration public ReadOnlyConfig(IConfig config) Parameters Type Name Description BenchmarkDotNet.Configs.IConfig config The config to wrap. Properties | Improve this Doc View Source KeepBenchmarkFiles Determines if all auto-generated files should be kept or removed after running benchmarks. Declaration public bool KeepBenchmarkFiles { get; } Property Value Type Description System.Boolean Implements BenchmarkDotNet.Configs.IConfig.KeepBenchmarkFiles | Improve this Doc View Source UnionRule Get union rule. Declaration public ConfigUnionRule UnionRule { get; } Property Value Type Description BenchmarkDotNet.Configs.ConfigUnionRule Union rule. Implements BenchmarkDotNet.Configs.IConfig.UnionRule Methods | Improve this Doc View Source GetAnalysers() Get benchmark analysers. Declaration public IEnumerable<IAnalyser> GetAnalysers() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Analysers.IAnalyser > Benchmark analysers. Implements BenchmarkDotNet.Configs.IConfig.GetAnalysers() | Improve this Doc View Source GetColumnProviders() Get benchmark column providers. Declaration public IEnumerable<IColumnProvider> GetColumnProviders() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Columns.IColumnProvider > Benchmark column columns. Implements BenchmarkDotNet.Configs.IConfig.GetColumnProviders() | Improve this Doc View Source GetDiagnosers() Get benchmark diagnosers. Declaration public IEnumerable<IDiagnoser> GetDiagnosers() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Diagnosers.IDiagnoser > Benchmark diagnosers. Implements BenchmarkDotNet.Configs.IConfig.GetDiagnosers() | Improve this Doc View Source GetExporters() Get benchmark exporters. Declaration public IEnumerable<IExporter> GetExporters() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Exporters.IExporter > Benchmark exporters. Implements BenchmarkDotNet.Configs.IConfig.GetExporters() | Improve this Doc View Source GetFilters() Gets the filters. Declaration public IEnumerable<IFilter> GetFilters() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Filters.IFilter > Filters Implements BenchmarkDotNet.Configs.IConfig.GetFilters() | Improve this Doc View Source GetHardwareCounters() Gets hardware counters. Declaration public IEnumerable<HardwareCounter> GetHardwareCounters() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Diagnosers.HardwareCounter > Hardware counters Implements BenchmarkDotNet.Configs.IConfig.GetHardwareCounters() | Improve this Doc View Source GetJobs() Get benchmark jobs. Declaration public IEnumerable<Job> GetJobs() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Jobs.Job > Benchmark jobs. Implements BenchmarkDotNet.Configs.IConfig.GetJobs() | Improve this Doc View Source GetLoggers() Get benchmark loggers. Declaration public IEnumerable<ILogger> GetLoggers() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Loggers.ILogger > Benchmark loggers. Implements BenchmarkDotNet.Configs.IConfig.GetLoggers() | Improve this Doc View Source GetOrderProvider() Get order provider. Declaration public IOrderProvider GetOrderProvider() Returns Type Description BenchmarkDotNet.Order.IOrderProvider Order provider. Implements BenchmarkDotNet.Configs.IConfig.GetOrderProvider() | Improve this Doc View Source GetSummaryStyle() Gets summary style. Declaration public ISummaryStyle GetSummaryStyle() Returns Type Description BenchmarkDotNet.Reports.ISummaryStyle Summary style Implements BenchmarkDotNet.Configs.IConfig.GetSummaryStyle() | Improve this Doc View Source GetValidators() Get benchmark validators. Declaration public IEnumerable<IValidator> GetValidators() Returns Type Description System.Collections.Generic.IEnumerable < BenchmarkDotNet.Validators.IValidator > Benchmark validators. Implements BenchmarkDotNet.Configs.IConfig.GetValidators() Extension Methods BenchmarkHelpers.AsReadOnly(IConfig) See Also BenchmarkDotNet.Configs.IConfig"
  },
  "api/perftests/BenchmarkDotNet.Loggers.LazySynchronizedStreamLogger.html": {
    "href": "api/perftests/BenchmarkDotNet.Loggers.LazySynchronizedStreamLogger.html",
    "title": "Class LazySynchronizedStreamLogger | CodeJam",
    "keywords": "Class LazySynchronizedStreamLogger Implementation of BenchmarkDotNet.Loggers.ILogger that supports lazy initialization and prevents output interleaving. Inheritance System.Object LazySynchronizedStreamLogger Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : BenchmarkDotNet.Loggers Assembly : CodeJam.PerfTests.dll Syntax public sealed class LazySynchronizedStreamLogger : IFlushableLogger, ILogger Constructors | Improve this Doc View Source LazySynchronizedStreamLogger(Func<TextWriter>) Initializes a new instance of the LazySynchronizedStreamLogger class. Declaration public LazySynchronizedStreamLogger(Func<TextWriter> writerFactory) Parameters Type Name Description System.Func < System.IO.TextWriter > writerFactory Factory method for the writer the log output will be redirected. | Improve this Doc View Source LazySynchronizedStreamLogger(String, Boolean) Initializes a new instance of the LazySynchronizedStreamLogger class. Declaration public LazySynchronizedStreamLogger(string filePath, bool append = false) Parameters Type Name Description System.String filePath The file path for the log. System.Boolean append if set to true the log will be appended to existing file; if false the log wil be overwritten. Methods | Improve this Doc View Source Flush() Flushes the log. Declaration public void Flush() Implements IFlushableLogger.Flush() | Improve this Doc View Source Write(LogKind, String) Write the text. Declaration public void Write(LogKind logKind, string text) Parameters Type Name Description BenchmarkDotNet.Loggers.LogKind logKind Kind of text. System.String text The text to write. Implements BenchmarkDotNet.Loggers.ILogger.Write(BenchmarkDotNet.Loggers.LogKind, System.String) | Improve this Doc View Source WriteLine() Write empty line. Declaration public void WriteLine() Implements BenchmarkDotNet.Loggers.ILogger.WriteLine() | Improve this Doc View Source WriteLine(LogKind, String) Write the line. Declaration public void WriteLine(LogKind logKind, string text) Parameters Type Name Description BenchmarkDotNet.Loggers.LogKind logKind Kind of text. System.String text The text to write. Implements BenchmarkDotNet.Loggers.ILogger.WriteLine(BenchmarkDotNet.Loggers.LogKind, System.String) Extension Methods LoggerHelpers.WriteSeparatorLine(ILogger) LoggerHelpers.WriteSeparatorLine(ILogger, String) LoggerHelpers.WriteSeparatorLine(ILogger, String, Boolean) CompetitionCoreHelpers.WriteVerboseHint(ILogger, String) CompetitionCoreHelpers.WriteVerbose(ILogger, String) See Also BenchmarkDotNet.Loggers.ILogger"
  },
  "api/perftests/BenchmarkDotNet.Loggers.html": {
    "href": "api/perftests/BenchmarkDotNet.Loggers.html",
    "title": "Namespace BenchmarkDotNet.Loggers | CodeJam",
    "keywords": "Namespace BenchmarkDotNet.Loggers Classes LazySynchronizedStreamLogger Implementation of BenchmarkDotNet.Loggers.ILogger that supports lazy initialization and prevents output interleaving. Interfaces IFlushableLogger Extension of BenchmarkDotNet.Loggers.ILogger interface that adds flush method."
  },
  "api/perftests/CodeJam.PerfTests.CompetitionReannotateSourcesAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionReannotateSourcesAttribute.html",
    "title": "Class CompetitionReannotateSourcesAttribute | CodeJam",
    "keywords": "Class CompetitionReannotateSourcesAttribute Enables source reannotations feature. Inheritance System.Object System.Attribute CompetitionFeaturesAttribute CompetitionReannotateSourcesAttribute Inherited Members CompetitionFeaturesAttribute.BurstMode CompetitionFeaturesAttribute.ContinuousIntegrationMode CompetitionFeaturesAttribute.Platform CompetitionFeaturesAttribute.AnnotateSources CompetitionFeaturesAttribute.IgnoreExistingAnnotations CompetitionFeaturesAttribute.PreviousRunLogUri CompetitionFeaturesAttribute.ReportWarningsAsErrors CompetitionFeaturesAttribute.TroubleshootingMode CompetitionFeaturesAttribute.ImportantInfoLogger CompetitionFeaturesAttribute.DetailedLogger CompetitionFeaturesAttribute.GetFeatures() System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax public class CompetitionReannotateSourcesAttribute : CompetitionFeaturesAttribute, _Attribute, ICompetitionFeatures Constructors | Improve this Doc View Source CompetitionReannotateSourcesAttribute() Initializes a new instance of the CompetitionReannotateSourcesAttribute class. Declaration public CompetitionReannotateSourcesAttribute()"
  },
  "api/perftests/CodeJam.PerfTests.CompetitionRunHelpers.html": {
    "href": "api/perftests/CodeJam.PerfTests.CompetitionRunHelpers.html",
    "title": "Class CompetitionRunHelpers | CodeJam",
    "keywords": "Class CompetitionRunHelpers Reusable API for code that used during perftest run. Inheritance System.Object CompetitionRunHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests Assembly : CodeJam.PerfTests.dll Syntax public static class CompetitionRunHelpers Fields | Improve this Doc View Source BurstModeLoopCount Empirically found constant loop count that provides accurate results for RelativeTime metric on different hardware. Equals to 16384; Best if used together with CodeJam.PerfTests.Configs.ICompetitionFeatures.BurstMode = true ( CompetitionBurstModeAttribute ). Declaration public const int BurstModeLoopCount = 16384 Field Value Type Description System.Int32 | Improve this Doc View Source SizeOfEmptyObject Size of allocated empty object. Declaration public static readonly int SizeOfEmptyObject Field Value Type Description System.Int32 | Improve this Doc View Source SizeOfObjectHeader Overhead for allocation for objects. Declaration public static readonly int SizeOfObjectHeader Field Value Type Description System.Int32 | Improve this Doc View Source SizeOfReferenceTypeSzArrayHeader Overhead for allocation of single dimension reference type array. Declaration public static readonly int SizeOfReferenceTypeSzArrayHeader Field Value Type Description System.Int32 | Improve this Doc View Source SizeOfStringHeader Overhead for allocation of string. Declaration public static readonly int SizeOfStringHeader Field Value Type Description System.Int32 | Improve this Doc View Source SizeOfSzArrayHeader Overhead for allocation of single dimension reference type array. Declaration public static readonly int SizeOfSzArrayHeader Field Value Type Description System.Int32 | Improve this Doc View Source SmallLoopCount Empirically found short loop count that provides accurate results for RelativeTime metric on different hardware. Equals to 128; May provide inaccurate results if used together with CodeJam.PerfTests.Configs.ICompetitionFeatures.BurstMode = true . Declaration public const int SmallLoopCount = 128 Field Value Type Description System.Int32 Methods | Improve this Doc View Source Delay(Int32) Default delay implementation. Performs delay for specified number of cycles. Declaration public static void Delay(int cycles) Parameters Type Name Description System.Int32 cycles The number of cycles to delay."
  },
  "api/perftests/CodeJam.PerfTests.Configs.CompetitionMaximumRerunsAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.CompetitionMaximumRerunsAttribute.html",
    "title": "Class CompetitionMaximumRerunsAttribute | CodeJam",
    "keywords": "Class CompetitionMaximumRerunsAttribute Sets the RerunsIfValidationFailed config value. Sets maximum count of retries performed if metric limits check failed. Inheritance System.Object System.Attribute CompetitionModifierAttribute CompetitionMaximumRerunsAttribute Inherited Members CompetitionModifierAttribute.Modifier System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public sealed class CompetitionMaximumRerunsAttribute : CompetitionModifierAttribute, _Attribute, ICompetitionModifierSource Constructors | Improve this Doc View Source CompetitionMaximumRerunsAttribute(Int32) Initializes a new instance of the CompetitionMaximumRerunsAttribute class. Declaration public CompetitionMaximumRerunsAttribute(int rerunsIfValidationFailed) Parameters Type Name Description System.Int32 rerunsIfValidationFailed Amount of reruns performed if validation failed. See Also CompetitionModifierAttribute"
  },
  "api/perftests/CodeJam.PerfTests.Configs.CompetitionMeasureAllAttribute.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.CompetitionMeasureAllAttribute.html",
    "title": "Class CompetitionMeasureAllAttribute | CodeJam",
    "keywords": "Class CompetitionMeasureAllAttribute Adds the ExpectedTime metric and GC metrics. Inheritance System.Object System.Attribute CompetitionModifierAttribute CompetitionMeasureAllAttribute Inherited Members CompetitionModifierAttribute.Modifier System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo) System.Attribute.GetCustomAttributes(System.Reflection.MemberInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type) System.Attribute.IsDefined(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.MemberInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.ParameterInfo, System.Boolean) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type) System.Attribute.IsDefined(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.ParameterInfo, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Module) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.IsDefined(System.Reflection.Module, System.Type) System.Attribute.IsDefined(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Module, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttributes(System.Reflection.Assembly) System.Attribute.GetCustomAttributes(System.Reflection.Assembly, System.Boolean) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type) System.Attribute.IsDefined(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type) System.Attribute.GetCustomAttribute(System.Reflection.Assembly, System.Type, System.Boolean) System.Attribute.Equals(System.Object) System.Attribute.GetHashCode() System.Attribute.Match(System.Object) System.Attribute.IsDefaultAttribute() System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfoCount(System.UInt32) System.Attribute.System.Runtime.InteropServices._Attribute.GetTypeInfo(System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.GetIDsOfNames(System.Guid, System.IntPtr, System.UInt32, System.UInt32, System.IntPtr) System.Attribute.System.Runtime.InteropServices._Attribute.Invoke(System.UInt32, System.Guid, System.UInt32, System.Int16, System.IntPtr, System.IntPtr, System.IntPtr, System.IntPtr) System.Attribute.TypeId System.Object.ToString() System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public sealed class CompetitionMeasureAllAttribute : CompetitionModifierAttribute, _Attribute, ICompetitionModifierSource Constructors | Improve this Doc View Source CompetitionMeasureAllAttribute() Initializes a new instance of the CompetitionMeasureAllAttribute class. Declaration public CompetitionMeasureAllAttribute() See Also CompetitionModifierAttribute"
  },
  "api/perftests/CodeJam.PerfTests.Configs.ICompetitionConfig.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.ICompetitionConfig.html",
    "title": "Interface ICompetitionConfig | CodeJam",
    "keywords": "Interface ICompetitionConfig Competition config. Inherited Members BenchmarkDotNet.Configs.IConfig.GetColumnProviders() BenchmarkDotNet.Configs.IConfig.GetExporters() BenchmarkDotNet.Configs.IConfig.GetLoggers() BenchmarkDotNet.Configs.IConfig.GetDiagnosers() BenchmarkDotNet.Configs.IConfig.GetAnalysers() BenchmarkDotNet.Configs.IConfig.GetJobs() BenchmarkDotNet.Configs.IConfig.GetValidators() BenchmarkDotNet.Configs.IConfig.GetHardwareCounters() BenchmarkDotNet.Configs.IConfig.GetFilters() BenchmarkDotNet.Configs.IConfig.GetOrderProvider() BenchmarkDotNet.Configs.IConfig.GetSummaryStyle() BenchmarkDotNet.Configs.IConfig.UnionRule BenchmarkDotNet.Configs.IConfig.KeepBenchmarkFiles Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public interface ICompetitionConfig : IConfig Properties | Improve this Doc View Source Options Competition parameters. Declaration CompetitionOptions Options { get; } Property Value Type Description CompetitionOptions Competition parameters. Methods | Improve this Doc View Source GetMetrics() Gets competition metrics. Declaration IEnumerable<MetricInfo> GetMetrics() Returns Type Description System.Collections.Generic.IEnumerable < MetricInfo > Competition metrics. Extension Methods BenchmarkHelpers.AsReadOnly(IConfig) CompetitionConfigExtensions.WithModifier(ICompetitionConfig, CompetitionOptions) CompetitionConfigExtensions.WithModifier(ICompetitionConfig, Job) CompetitionConfigExtensions.WithAllowDebugBuilds(ICompetitionConfig, Boolean) CompetitionConfigExtensions.WithDetailedLogging(ICompetitionConfig, Boolean) CompetitionConfigExtensions.WithReportWarningsAsErrors(ICompetitionConfig, Boolean) CompetitionConfigExtensions.WithTooFastBenchmarkLimit(ICompetitionConfig, TimeSpan) CompetitionConfigExtensions.WithLongRunningBenchmarkLimit(ICompetitionConfig, TimeSpan) CompetitionConfigExtensions.WithPreviousRunLogUri(ICompetitionConfig, String)"
  },
  "api/perftests/CodeJam.PerfTests.Configs.ICompetitionConfigSource.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.ICompetitionConfigSource.html",
    "title": "Interface ICompetitionConfigSource | CodeJam",
    "keywords": "Interface ICompetitionConfigSource Base interface for ICompetitionConfig attributes. Namespace : CodeJam.PerfTests.Configs Assembly : CodeJam.PerfTests.dll Syntax public interface ICompetitionConfigSource Properties | Improve this Doc View Source Config The competition config. Declaration ICompetitionConfig Config { get; } Property Value Type Description ICompetitionConfig The competition config."
  },
  "api/perftests/CodeJam.PerfTests.Loggers.LogFilter.html": {
    "href": "api/perftests/CodeJam.PerfTests.Loggers.LogFilter.html",
    "title": "Enum LogFilter | CodeJam",
    "keywords": "Enum LogFilter Log filtering mode. Namespace : CodeJam.PerfTests.Loggers Assembly : CodeJam.PerfTests.dll Syntax public enum LogFilter Fields Name Description AllMessages Log all messages. PrefixedOnly Log messages with with FilteringLogger prefixes prefixes only. PrefixedOrErrors Log error messages, hint messages and messages with FilteringLogger prefixes prefixes."
  },
  "api/perftests/CodeJam.PerfTests.Loggers.LoggerHelpers.html": {
    "href": "api/perftests/CodeJam.PerfTests.Loggers.LoggerHelpers.html",
    "title": "Class LoggerHelpers | CodeJam",
    "keywords": "Class LoggerHelpers Logger helpers. Inheritance System.Object LoggerHelpers Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Loggers Assembly : CodeJam.PerfTests.dll Syntax public static class LoggerHelpers Methods | Improve this Doc View Source FlushLoggers(IConfig) Flushes the loggers. Declaration public static void FlushLoggers(IConfig config) Parameters Type Name Description BenchmarkDotNet.Configs.IConfig config Config with loggers. | Improve this Doc View Source WriteSeparatorLine(ILogger) Helper method that writes separator log line. Declaration public static void WriteSeparatorLine(this ILogger logger) Parameters Type Name Description BenchmarkDotNet.Loggers.ILogger logger The logger. | Improve this Doc View Source WriteSeparatorLine(ILogger, String) Helper method that writes separator log line. Declaration public static void WriteSeparatorLine(this ILogger logger, string header) Parameters Type Name Description BenchmarkDotNet.Loggers.ILogger logger The logger. System.String header The separator line text. | Improve this Doc View Source WriteSeparatorLine(ILogger, String, Boolean) Helper method that writes separator log line. Declaration public static void WriteSeparatorLine(this ILogger logger, string header, bool topHeader) Parameters Type Name Description BenchmarkDotNet.Loggers.ILogger logger The logger. System.String header The separator line text. System.Boolean topHeader Write top-level header."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.IMetricValuesProvider.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.IMetricValuesProvider.html",
    "title": "Interface IMetricValuesProvider | CodeJam",
    "keywords": "Interface IMetricValuesProvider Interface for metric values provider Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public interface IMetricValuesProvider Properties | Improve this Doc View Source ResultIsRelative Gets a value indicating whether this instance is relative metric provider. Declaration bool ResultIsRelative { get; } Property Value Type Description System.Boolean true if this instance is relative metric provider; otherwise, false . Methods | Improve this Doc View Source GetColumnProvider(MetricInfo, MetricValueColumns) Gets column provider for the metric values. Declaration IColumnProvider GetColumnProvider(MetricInfo metric, MetricValueColumns columns) Parameters Type Name Description MetricInfo metric The metric to get columns for. MetricValueColumns columns The columns to include. Returns Type Description BenchmarkDotNet.Columns.IColumnProvider Column provider for the metric values | Improve this Doc View Source GetDiagnosers(MetricInfo) Gets diagnosers for the metric values. Declaration IDiagnoser[] GetDiagnosers(MetricInfo metric) Parameters Type Name Description MetricInfo metric The metric to get diagnosers for. Returns Type Description BenchmarkDotNet.Diagnosers.IDiagnoser [] Diagnosers for the metric values | Improve this Doc View Source TryGetActualValues(Benchmark, Summary) Gets range that describes actual values for the benchmark. Declaration MetricRange TryGetActualValues(Benchmark benchmark, Summary summary) Parameters Type Name Description BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.Summary summary Summary for the run. Returns Type Description MetricRange Range that describes actual values for the benchmark (or empty range if none). | Improve this Doc View Source TryGetLimitValues(Benchmark, Summary) Gets range that describes expected limits for the benchmark. Should be wider than TryGetActualValues(Benchmark, Summary) . Declaration MetricRange TryGetLimitValues(Benchmark benchmark, Summary summary) Parameters Type Name Description BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.Summary summary Summary for the run. Returns Type Description MetricRange Range that describes expected limits for the benchmark (or empty range if none). | Improve this Doc View Source TryGetMeanValue(Benchmark, Summary) Gets actual value for the benchmark (averaged). Declaration double ? TryGetMeanValue(Benchmark benchmark, Summary summary) Parameters Type Name Description BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.Summary summary Summary for the run. Returns Type Description System.Nullable < System.Double > Actual value for the benchmark or null if none. | Improve this Doc View Source TryGetVariance(Benchmark, Summary) Gets metric that describes variance of the value for the benchmark. Declaration double ? TryGetVariance(Benchmark benchmark, Summary summary) Parameters Type Name Description BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.Summary summary Summary for the run. Returns Type Description System.Nullable < System.Double > Metric that describes variance for the benchmark or null if none."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.IStoredMetricValue.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.IStoredMetricValue.html",
    "title": "Interface IStoredMetricValue | CodeJam",
    "keywords": "Interface IStoredMetricValue Base interface for stored metric values. Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public interface IStoredMetricValue Properties | Improve this Doc View Source Max Gets maximum value. Declaration double Max { get; } Property Value Type Description System.Double The maximum value. The System.Double.NaN marks the value as unset but updateable during the annotation. The System.Double.PositiveInfinity returned if value is positive infinity (ignored, essentially). IMPORTANT: If the UnitOfMeasurement is not null both Min and Max values are scaled. Use the MetricValueHelpers to normalize them. | Improve this Doc View Source MetricAttributeType Gets type of the attribute used for metric annotation. Declaration Type MetricAttributeType { get; } Property Value Type Description System.Type The type of the attribute used for metric annotation. | Improve this Doc View Source Min Gets minimum value. Declaration double Min { get; } Property Value Type Description System.Double The minimum value. The System.Double.NaN marks the value as unset but updateable during the annotation. The System.Double.NegativeInfinity returned if value is negative infinity (ignored, essentially). IMPORTANT: If the UnitOfMeasurement is not null both Min and Max values are scaled. Use the MetricValueHelpers to normalize them. | Improve this Doc View Source UnitOfMeasurement Gets enum value for the measurement unit. Declaration Enum UnitOfMeasurement { get; } Property Value Type Description System.Enum The enum value for the measurement unit."
  },
  "api/perftests/CodeJam.PerfTests.Metrics.LogNormalMetricCalculator.html": {
    "href": "api/perftests/CodeJam.PerfTests.Metrics.LogNormalMetricCalculator.html",
    "title": "Class LogNormalMetricCalculator | CodeJam",
    "keywords": "Class LogNormalMetricCalculator Metric calculator for relative metrics (especially for microbenchmarks). Uses lognormal distribution for results estimation. Inheritance System.Object LogNormalMetricCalculator Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Metrics Assembly : CodeJam.PerfTests.dll Syntax public sealed class LogNormalMetricCalculator : IMetricCalculator Fields | Improve this Doc View Source Instance Instance of the provider. Declaration public static readonly IMetricCalculator Instance Field Value Type Description IMetricCalculator Methods | Improve this Doc View Source TryGetActualValues(Double[]) Gets actual values range for the set of values. Declaration public MetricRange TryGetActualValues(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description MetricRange Actual values range for for the set of values (or empty range if none). Implements IMetricCalculator.TryGetActualValues(Double[]) | Improve this Doc View Source TryGetLimitValues(Double[]) Gets expected limits range for the set of values. Declaration public MetricRange TryGetLimitValues(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description MetricRange Limit values range for the set of values (or empty range if none). Implements IMetricCalculator.TryGetLimitValues(Double[]) | Improve this Doc View Source TryGetMeanValue(Double[]) Gets actual value for the set of values. Declaration public double ? TryGetMeanValue(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description System.Nullable < System.Double > Actual value for the set of values or null if none. Implements IMetricCalculator.TryGetMeanValue(Double[]) | Improve this Doc View Source TryGetRelativeActualValues(Double[], Double[]) Gets actual values range for the set of values (relative metric). Declaration public MetricRange TryGetRelativeActualValues(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description MetricRange Actual values range for the set of values (or empty range if none). Implements IMetricCalculator.TryGetRelativeActualValues(Double[], Double[]) | Improve this Doc View Source TryGetRelativeLimitValues(Double[], Double[]) Gets expected limits range for the set of values (relative metric). Declaration public MetricRange TryGetRelativeLimitValues(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description MetricRange Limit values range for the set of values (or empty range if none). Implements IMetricCalculator.TryGetRelativeLimitValues(Double[], Double[]) | Improve this Doc View Source TryGetRelativeMeanValue(Double[], Double[]) Gets actual value for the set of values (relative metric). Declaration public double ? TryGetRelativeMeanValue(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description System.Nullable < System.Double > Actual value for the set of values or null if none. Implements IMetricCalculator.TryGetRelativeMeanValue(Double[], Double[]) | Improve this Doc View Source TryGetRelativeVariance(Double[], Double[]) Gets variance for the set of values (relative metric). Declaration public double ? TryGetRelativeVariance(double[] values, double[] baselineValues) Parameters Type Name Description System.Double [] values Set of values. System.Double [] baselineValues The baseline values. Returns Type Description System.Nullable < System.Double > Variance for the set of values or null if none. Implements IMetricCalculator.TryGetRelativeVariance(Double[], Double[]) | Improve this Doc View Source TryGetVariance(Double[]) Gets variance for the set of values. Declaration public double ? TryGetVariance(double[] values) Parameters Type Name Description System.Double [] values Set of values. Returns Type Description System.Nullable < System.Double > Variance for the set of values or null if none. Implements IMetricCalculator.TryGetVariance(Double[]) See Also IMetricCalculator"
  },
  "api/perftests/CodeJam.PerfTests.Exporters.html": {
    "href": "api/perftests/CodeJam.PerfTests.Exporters.html",
    "title": "Namespace CodeJam.PerfTests.Exporters | CodeJam",
    "keywords": "Namespace CodeJam.PerfTests.Exporters Classes CsvTimingsExporter Exporter that creates .csv files with timings for all runs in the competition. StubExporter Stub exporter to shut up the BenchmarkDotNet.Validators.ConfigValidator"
  },
  "api/perftests/CodeJam.PerfTests.Columns.CompetitionCharacteristicColumn.html": {
    "href": "api/perftests/CodeJam.PerfTests.Columns.CompetitionCharacteristicColumn.html",
    "title": "Class CompetitionCharacteristicColumn | CodeJam",
    "keywords": "Class CompetitionCharacteristicColumn Column that displays one of CompetitionOptions characteristic. Inheritance System.Object CompetitionCharacteristicColumn Inherited Members System.Object.ToString() System.Object.Equals(System.Object) System.Object.Equals(System.Object, System.Object) System.Object.ReferenceEquals(System.Object, System.Object) System.Object.GetHashCode() System.Object.GetType() System.Object.MemberwiseClone() Namespace : CodeJam.PerfTests.Columns Assembly : CodeJam.PerfTests.dll Syntax public class CompetitionCharacteristicColumn : IColumn Constructors | Improve this Doc View Source CompetitionCharacteristicColumn(Characteristic) Initializes a new instance of the CompetitionCharacteristicColumn class. Declaration public CompetitionCharacteristicColumn(Characteristic characteristic) Parameters Type Name Description BenchmarkDotNet.Characteristics.Characteristic characteristic The characteristic. Properties | Improve this Doc View Source AlwaysShow Gets a value indicating whether [always show]. Declaration public bool AlwaysShow { get; } Property Value Type Description System.Boolean true if [always show]; otherwise, false . Implements BenchmarkDotNet.Columns.IColumn.AlwaysShow | Improve this Doc View Source Category Gets the category. Declaration public ColumnCategory Category { get; } Property Value Type Description BenchmarkDotNet.Columns.ColumnCategory The category. Implements BenchmarkDotNet.Columns.IColumn.Category | Improve this Doc View Source ColumnName Display column title in the summary. Declaration public string ColumnName { get; } Property Value Type Description System.String Display column title in the summary. Implements BenchmarkDotNet.Columns.IColumn.ColumnName | Improve this Doc View Source Id An unique identificator of the column. If there are several columns with the same Id, only one of them will be shown in the summary. Declaration public string Id { get; } Property Value Type Description System.String The unique identificator of the column. Implements BenchmarkDotNet.Columns.IColumn.Id | Improve this Doc View Source IsNumeric Defines if the column's value represents a number. Declaration public bool IsNumeric { get; } Property Value Type Description System.Boolean true if the column's value represents a number. Implements BenchmarkDotNet.Columns.IColumn.IsNumeric | Improve this Doc View Source Legend Column description. Declaration public string Legend { get; } Property Value Type Description System.String The column description. Implements BenchmarkDotNet.Columns.IColumn.Legend | Improve this Doc View Source PriorityInCategory Defines order of column in the same category. Declaration public int PriorityInCategory { get; } Property Value Type Description System.Int32 Order of column in the same category. Implements BenchmarkDotNet.Columns.IColumn.PriorityInCategory | Improve this Doc View Source UnitType Defines how to format column's value. Declaration public UnitType UnitType { get; } Property Value Type Description BenchmarkDotNet.Columns.UnitType Format column mode. Implements BenchmarkDotNet.Columns.IColumn.UnitType Methods | Improve this Doc View Source GetValue(Summary, Benchmark) Returns value for the column. Declaration public string GetValue(Summary summary, Benchmark benchmark) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary Summary for the run. BenchmarkDotNet.Running.Benchmark benchmark The benchmark. Returns Type Description System.String The value for the column Implements BenchmarkDotNet.Columns.IColumn.GetValue(BenchmarkDotNet.Reports.Summary, BenchmarkDotNet.Running.Benchmark) | Improve this Doc View Source GetValue(Summary, Benchmark, ISummaryStyle) Returns value for the column. Declaration public string GetValue(Summary summary, Benchmark benchmark, ISummaryStyle style) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary Summary for the run. BenchmarkDotNet.Running.Benchmark benchmark The benchmark. BenchmarkDotNet.Reports.ISummaryStyle style The summary style. Returns Type Description System.String The value for the column Implements BenchmarkDotNet.Columns.IColumn.GetValue(BenchmarkDotNet.Reports.Summary, BenchmarkDotNet.Running.Benchmark, BenchmarkDotNet.Reports.ISummaryStyle) | Improve this Doc View Source IsAvailable(Summary) Determines whether the specified summary is available. Declaration public bool IsAvailable(Summary summary) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary The summary. Returns Type Description System.Boolean true if the specified summary is available; otherwise, false . Implements BenchmarkDotNet.Columns.IColumn.IsAvailable(BenchmarkDotNet.Reports.Summary) | Improve this Doc View Source IsDefault(Summary, Benchmark) Determines whether the specified summary is default. Declaration public bool IsDefault(Summary summary, Benchmark benchmark) Parameters Type Name Description BenchmarkDotNet.Reports.Summary summary The summary. BenchmarkDotNet.Running.Benchmark benchmark The benchmark. Returns Type Description System.Boolean true if the specified summary is default; otherwise, false . Implements BenchmarkDotNet.Columns.IColumn.IsDefault(BenchmarkDotNet.Reports.Summary, BenchmarkDotNet.Running.Benchmark) See Also BenchmarkDotNet.Columns.IColumn"
  },
  "api/perftests/CodeJam.PerfTests.Configs.html": {
    "href": "api/perftests/CodeJam.PerfTests.Configs.html",
    "title": "Namespace CodeJam.PerfTests.Configs | CodeJam",
    "keywords": "Namespace CodeJam.PerfTests.Configs Classes CompetitionAdjustmentMode Competition adjustment parameters class. CompetitionAnnotationMode Competition annotations parameters class. CompetitionCheckMode Competition validation parameters class. CompetitionConfigExtensions Expensions for ICompetitionConfig CompetitionFeatures Features for competition. CompetitionIgnoreAllocationsAttribute Removes GC metrics (all with category equal to Category ). CompetitionMaximumRerunsAttribute Sets the RerunsIfValidationFailed config value. Sets maximum count of retries performed if metric limits check failed. CompetitionMeasureAllAttribute Adds the ExpectedTime metric and GC metrics. CompetitionMeasureAllocationsAttribute Adds the GcAllocations metric. CompetitionNoRelativeTimeAttribute Removes the RelativeTime metric. CompetitionOptions Competition options class. CompetitionRunMode Competition run parameters class. ManualCompetitionConfig Class to ease competition config creation ReadOnlyCompetitionConfig Wrapper class for readonly competition config. Interfaces ICompetitionConfig Competition config. ICompetitionConfigSource Base interface for ICompetitionConfig attributes. Enums ConcurrentRunBehavior Behavior for concurrent competition runs."
  }
}