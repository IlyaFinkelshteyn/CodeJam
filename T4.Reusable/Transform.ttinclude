<#@ template hostspecific="true"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Text.RegularExpressions" #><#+

	// ReSharper disable UnusedMember.Local
	private void Transform(string sourceFileName, ReplaceInfo[] additionalReplaces, params ReplaceInfo[] replaces)
	{
		var replaceList = new List<ReplaceInfo>(additionalReplaces);
		replaceList.AddRange(replaces);
		Transform(sourceFileName, replaceList.ToArray());
	}

	private void Transform(string sourceFileName, params ReplaceInfo[] replaces)
	{
		var filePath = Host.ResolvePath(sourceFileName);
		if (!File.Exists(filePath))
		{
			throw new FileNotFoundException("File '" + filePath + "' does not exist.");
		}

		Func<string, string, string, ReplaceInfo, string> replaceCore = (text, pattern, replacement, replaceInfo) =>
		{
			if (replaceInfo.SwapMode || replaceInfo.EscapePattern)
			{
				pattern = Regex.Escape(pattern);
			}
			pattern = replaceInfo.WholeWord
				? @"(?<=\W|^)" +  pattern + @"(?=\W|$)"
				: pattern;

			var newText = Regex.Replace(text, pattern, replacement);
			if (replaceInfo.ThrowOnFail && newText == text)
				throw new InvalidOperationException("The match for " + pattern + " not found");

			return newText;
		};

		var sourceText = File.ReadAllText(filePath);

		foreach (var replaceInfo in replaces)
		{
			if (replaceInfo.SwapMode)
			{
				// 1. Replace Replacement to temp
				sourceText = replaceCore(sourceText, replaceInfo.Replacement, "tempTempTemptemp", replaceInfo);
				// 2. Replace Pattern to Replacement
				sourceText = replaceCore(sourceText, replaceInfo.Pattern, replaceInfo.Replacement, replaceInfo);
				// 3. Replace temp to Pattern
				sourceText = replaceCore(sourceText, "tempTempTemptemp", replaceInfo.Pattern, replaceInfo);
			}
			else
			{
				sourceText = replaceCore(sourceText, replaceInfo.Pattern, replaceInfo.Replacement, replaceInfo);
			}
		}

		Write(sourceText);
	}

	internal class ReplaceInfo
	{
		public string Pattern { get; set; }
		public string Replacement { get; set; }
		public bool ThrowOnFail { get; set; }
		public bool WholeWord { get; set; }
		public bool SwapMode { get; set; }
		public bool EscapePattern { get; set; }
	}
#>