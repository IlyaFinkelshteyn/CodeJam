<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)T4.Reusable\Autogenerated.ttinclude" #>
<#@ include file="$(SolutionDir)Main\src\Arithmetic\Operators.ttinclude" #>
using NUnit.Framework;

using IntOp = CodeJam.Arithmetic.Operators<int>;
using NullableDoubleOp = CodeJam.Arithmetic.Operators<double?>;

namespace CodeJam.Arithmetic
{
	partial class OperatorsTest
	{
<#foreach (var op in ops) {
	if (op.OpType == OpType.Unary) {#>
		[Test]
		public void Int<#=op.Name#>() => Assert.AreEqual(<#=op.Sign#>42, IntOp.<#=op.Name#>(42));

<#		if (!op.IntOnly) {#>
		[Test]
		public void NullableDouble<#=op.Name#>() => Assert.AreEqual(<#=op.Sign#>42f, NullableDoubleOp.<#=op.Name#>(42f));

<#		}#>
<#	}#>
<#	else if (op.OpType == OpType.Binary) {#>
		[Test]
		public void Int<#=op.Name#>() => Assert.AreEqual(1 <#=op.Sign#> 2, IntOp.<#=op.Name#>(1, 2));

<#		if (!op.IntOnly) {#>
		[Test]
		public void NullableDouble<#=op.Name#>() => Assert.AreEqual(1f <#=op.Sign#> 2f, NullableDoubleOp.<#=op.Name#>(1, 2));

<#		}#>
<#	}#>
<#}#>
	}
}