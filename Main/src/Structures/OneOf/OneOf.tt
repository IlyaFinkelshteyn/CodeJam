<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)T4.Reusable\Autogenerated.ttinclude" #>
using System;

namespace CodeJam
{
<#for (var i = 2; i <=8; i++) {
	var types = List(i, j => $"T{j}");#>
	public abstract class OneOf<<#=types#>>
	{
		public abstract TResult Match<TResult>(<#=List(i, j => $"Func<T{j}, TResult> case{j}Func")#>);

		public abstract void Do(<#=List(i, j => $"Action<T{j}> case{j}Action")#>);

<#	for (var k = 1; k <= i; k++){#>
		private sealed class Case<#=k#> : OneOf<<#=types#>>
		{
			private T<#=k#> _value;

			public Case<#=k#>(T<#=k#> value)
			{
				_value = value;
			}

			public override TResult Match<TResult>(<#=List(i, j => $"Func<T{j}, TResult> case{j}Func")#>) => case<#=k#>Func(_value);

			public override void Do(<#=List(i, j => $"Action<T{j}> case{j}Action")#>) => case<#=k#>Action(_value);
		}

		public OneOf<<#=types#>> Create(T<#=k#> value) => new Case<#=k#>(value);

<#	}#>
	}

<#}#>
}