//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq.Expressions;

using JetBrains.Annotations;

namespace CodeJam.Reflection
{
	/// <summary>
	/// Provides a helper class to get the property, field, ctor or method from an expression.
	/// </summary>
	public static partial class ExpressionHelper
	{
		#region Action<...>
		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <param name="actionExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Action> Action(Expression<Action> actionExpression) =>
			actionExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <param name="actionExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Action<T1>> Action<T1>(Expression<Action<T1>> actionExpression) =>
			actionExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <typeparam name="T2">The type of argument #2.</typeparam>
		/// <param name="actionExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Action<T1, T2>> Action<T1, T2>(Expression<Action<T1, T2>> actionExpression) =>
			actionExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <typeparam name="T2">The type of argument #2.</typeparam>
		/// <typeparam name="T3">The type of argument #3.</typeparam>
		/// <param name="actionExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Action<T1, T2, T3>> Action<T1, T2, T3>(Expression<Action<T1, T2, T3>> actionExpression) =>
			actionExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <typeparam name="T2">The type of argument #2.</typeparam>
		/// <typeparam name="T3">The type of argument #3.</typeparam>
		/// <typeparam name="T4">The type of argument #4.</typeparam>
		/// <param name="actionExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Action<T1, T2, T3, T4>> Action<T1, T2, T3, T4>(Expression<Action<T1, T2, T3, T4>> actionExpression) =>
			actionExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <typeparam name="T2">The type of argument #2.</typeparam>
		/// <typeparam name="T3">The type of argument #3.</typeparam>
		/// <typeparam name="T4">The type of argument #4.</typeparam>
		/// <typeparam name="T5">The type of argument #5.</typeparam>
		/// <param name="actionExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Action<T1, T2, T3, T4, T5>> Action<T1, T2, T3, T4, T5>(Expression<Action<T1, T2, T3, T4, T5>> actionExpression) =>
			actionExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <typeparam name="T2">The type of argument #2.</typeparam>
		/// <typeparam name="T3">The type of argument #3.</typeparam>
		/// <typeparam name="T4">The type of argument #4.</typeparam>
		/// <typeparam name="T5">The type of argument #5.</typeparam>
		/// <typeparam name="T6">The type of argument #6.</typeparam>
		/// <param name="actionExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Action<T1, T2, T3, T4, T5, T6>> Action<T1, T2, T3, T4, T5, T6>(Expression<Action<T1, T2, T3, T4, T5, T6>> actionExpression) =>
			actionExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <typeparam name="T2">The type of argument #2.</typeparam>
		/// <typeparam name="T3">The type of argument #3.</typeparam>
		/// <typeparam name="T4">The type of argument #4.</typeparam>
		/// <typeparam name="T5">The type of argument #5.</typeparam>
		/// <typeparam name="T6">The type of argument #6.</typeparam>
		/// <typeparam name="T7">The type of argument #7.</typeparam>
		/// <param name="actionExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Action<T1, T2, T3, T4, T5, T6, T7>> Action<T1, T2, T3, T4, T5, T6, T7>(Expression<Action<T1, T2, T3, T4, T5, T6, T7>> actionExpression) =>
			actionExpression;
		#endregion

		#region Func<...>
		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="TResult">The result type.</typeparam>
		/// <param name="funcExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Func<TResult>> Func<TResult>(Expression<Func<TResult>> funcExpression) =>
			funcExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <typeparam name="TResult">The result type.</typeparam>
		/// <param name="funcExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Func<T1, TResult>> Func<T1, TResult>(Expression<Func<T1, TResult>> funcExpression) =>
			funcExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <typeparam name="T2">The type of argument #2.</typeparam>
		/// <typeparam name="TResult">The result type.</typeparam>
		/// <param name="funcExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Func<T1, T2, TResult>> Func<T1, T2, TResult>(Expression<Func<T1, T2, TResult>> funcExpression) =>
			funcExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <typeparam name="T2">The type of argument #2.</typeparam>
		/// <typeparam name="T3">The type of argument #3.</typeparam>
		/// <typeparam name="TResult">The result type.</typeparam>
		/// <param name="funcExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Func<T1, T2, T3, TResult>> Func<T1, T2, T3, TResult>(Expression<Func<T1, T2, T3, TResult>> funcExpression) =>
			funcExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <typeparam name="T2">The type of argument #2.</typeparam>
		/// <typeparam name="T3">The type of argument #3.</typeparam>
		/// <typeparam name="T4">The type of argument #4.</typeparam>
		/// <typeparam name="TResult">The result type.</typeparam>
		/// <param name="funcExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Func<T1, T2, T3, T4, TResult>> Func<T1, T2, T3, T4, TResult>(Expression<Func<T1, T2, T3, T4, TResult>> funcExpression) =>
			funcExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <typeparam name="T2">The type of argument #2.</typeparam>
		/// <typeparam name="T3">The type of argument #3.</typeparam>
		/// <typeparam name="T4">The type of argument #4.</typeparam>
		/// <typeparam name="T5">The type of argument #5.</typeparam>
		/// <typeparam name="TResult">The result type.</typeparam>
		/// <param name="funcExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Func<T1, T2, T3, T4, T5, TResult>> Func<T1, T2, T3, T4, T5, TResult>(Expression<Func<T1, T2, T3, T4, T5, TResult>> funcExpression) =>
			funcExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <typeparam name="T2">The type of argument #2.</typeparam>
		/// <typeparam name="T3">The type of argument #3.</typeparam>
		/// <typeparam name="T4">The type of argument #4.</typeparam>
		/// <typeparam name="T5">The type of argument #5.</typeparam>
		/// <typeparam name="T6">The type of argument #6.</typeparam>
		/// <typeparam name="TResult">The result type.</typeparam>
		/// <param name="funcExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Func<T1, T2, T3, T4, T5, T6, TResult>> Func<T1, T2, T3, T4, T5, T6, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, TResult>> funcExpression) =>
			funcExpression;

		/// <summary>Helper for type inference from the lambda expression.</summary>
		/// <typeparam name="T1">The type of argument #1.</typeparam>
		/// <typeparam name="T2">The type of argument #2.</typeparam>
		/// <typeparam name="T3">The type of argument #3.</typeparam>
		/// <typeparam name="T4">The type of argument #4.</typeparam>
		/// <typeparam name="T5">The type of argument #5.</typeparam>
		/// <typeparam name="T6">The type of argument #6.</typeparam>
		/// <typeparam name="T7">The type of argument #7.</typeparam>
		/// <typeparam name="TResult">The result type.</typeparam>
		/// <param name="funcExpression">The lambda expression.</param>
		/// <returns>The lambda expression passed.</returns>
		public static Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> Func<T1, T2, T3, T4, T5, T6, T7, TResult>(Expression<Func<T1, T2, T3, T4, T5, T6, T7, TResult>> funcExpression) =>
			funcExpression;
		#endregion
	}
}