<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)T4.Reusable\Autogenerated.ttinclude" #><#
	var types =      new[] {"byte",    "sbyte",    "short",  "ushort",  "int",     "uint",    "long",    "ulong",   "float",  "double", "decimal"};
	var typeNames =  new[] {"Byte",    "SByte",    "Int16",  "UInt16",  "Int32",   "UInt32",  "Int64",   "UInt64",  "Single", "Double", "Decimal"};
	var styles =     new[] {"Integer", "Integer",  "Number", "Integer", "Integer", "Integer", "Integer", "Integer", "Float",  "Float",  "Number"};
#>
using System;
using System.Globalization;

using JetBrains.Annotations;

namespace CodeJam.Strings
{
	partial class StringExtensions
	{
<#for (int i = 0; i < types.Length; i++)
{
	var type = types[i];
	var name = typeNames[i];
	var style = styles[i];
	WriteRegionLine(type);#>
		/// <summary>
		/// Converts the string representation of a number in a specified style and culture-specific format to its
		/// <see cref="<#=type#>"/> equivalent. A return value indicates whether the conversion succeeded.
		/// </summary>
		/// <param name="str">
		/// A string containing a number to convert. The string is interpreted using the style specified by
		/// <paramref name="numberStyle"/>.
		/// </param>
		/// <param name="numberStyle">
		/// A bitwise combination of enumeration values that indicates the style elements that can be present in
		/// <paramref name="str"/>. Default value is <#=style#>.
		/// </param>
		/// <param name="provider">
		/// An object that supplies culture-specific formatting information about <paramref name="str"/>.
		/// </param>
		/// <returns>
		/// When this method returns, contains the <see cref="<#=type#>"/> value equivalent of the number contained in
		/// <paramref name="str"/>, if the conversion succeeded, or null if the conversion failed. The conversion fails if
		/// the <paramref name="str"/> parameter is null or String.Empty, is not in a format compliant withstyle, or
		/// represents a number less than <see cref="<#=type#>.MinValue"/> or greater than <see cref="<#=type#>.MaxValue"/>.
		/// </returns>
		[Pure]
		public static <#=type#>? To<#=name#>(
			[CanBeNull] this string str,
			NumberStyles numberStyle = NumberStyles.<#=style#>,
			[CanBeNull] IFormatProvider provider = null)
		{
			<#=type#> result;
			return <#=type#>.TryParse(str, numberStyle, provider, out result) ? (<#=type#>?)result : null;
		}

		/// <summary>
		/// Converts the string representation of a number in a specified style and culture-invariant format to its
		/// <see cref="<#=type#>"/> equivalent. A return value indicates whether the conversion succeeded.
		/// </summary>
		/// <param name="str">
		/// A string containing a number to convert. The string is interpreted using the style specified by
		/// <paramref name="numberStyle"/>.
		/// </param>
		/// <param name="numberStyle">
		/// A bitwise combination of enumeration values that indicates the style elements that can be present in
		/// <paramref name="str"/>. Default value is <#=style#>.
		/// </param>
		/// <returns>
		/// When this method returns, contains the <see cref="<#=type#>"/> value equivalent of the number contained in
		/// <paramref name="str"/>, if the conversion succeeded, or null if the conversion failed. The conversion fails if
		/// the <paramref name="str"/> parameter is null or String.Empty, is not in a format compliant withstyle, or
		/// represents a number less than <see cref="<#=type#>.MinValue"/> or greater than <see cref="<#=type#>.MaxValue"/>.
		/// </returns>
		[Pure]
		public static <#=type#>? To<#=name#>Invariant(
			[CanBeNull] this string str,
			NumberStyles numberStyle = NumberStyles.<#=style#>)
		{
			<#=type#> result;
			return <#=type#>.TryParse(str, numberStyle,  CultureInfo.InvariantCulture, out result) ? (<#=type#>?)result : null;
		}
<#
}
FlushRegions();#>
	}
}