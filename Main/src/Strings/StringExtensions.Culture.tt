<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)T4.Reusable\Autogenerated.ttinclude" #><#
	var types = new[] {"byte", "sbyte", "short", "ushort", "int", "uint", "long", "ulong", "float", "double", "decimal", "DateTime"};
	var typeNames = new[] {"Byte", "SByte", "Int16", "UInt16", "Int32", "UInt32", "Int64", "UInt64", "Single", "Double", "Decimal", "DateTime"};
#>
using System;
using System.Globalization;

using JetBrains.Annotations;

namespace CodeJam.Strings
{
	partial class StringExtensions
	{
<#for (int i = 0; i < types.Length; i++) {
	var type = types[i];
	var name = typeNames[i]; #>
		/// <summary>
		/// Culture invariant version of <see cref="<#=type#>.Parse(string, System.IFormatProvider)"/>
		/// </summary>
		/// <param name="s">String to parse.</param>
		/// <returns>Parsed value of <paramref name="s"/> according to rules of invariant culture.</returns>
		[NotNull]
		[Pure]
		public static <#=type#> To<#=name#>Invariant([NotNull] this string s) =>
			<#=type#>.Parse(s, CultureInfo.InvariantCulture);

<#}#>
	}
}