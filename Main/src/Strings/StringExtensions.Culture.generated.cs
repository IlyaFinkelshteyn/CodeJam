//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Globalization;

using JetBrains.Annotations;

namespace CodeJam.Strings
{
	partial class StringExtensions
	{
		/// <summary>
		/// Culture invariant version of <see cref="byte.Parse(string, System.IFormatProvider)"/>
		/// </summary>
		/// <param name="s">String to parse.</param>
		/// <returns>Parsed value of <paramref name="s"/> according to rules of invariant culture.</returns>
		[NotNull]
		[Pure]
		public static byte ToByteInvariant([NotNull] this string s) =>
			byte.Parse(s, CultureInfo.InvariantCulture);

		/// <summary>
		/// Culture invariant version of <see cref="sbyte.Parse(string, System.IFormatProvider)"/>
		/// </summary>
		/// <param name="s">String to parse.</param>
		/// <returns>Parsed value of <paramref name="s"/> according to rules of invariant culture.</returns>
		[NotNull]
		[Pure]
		public static sbyte ToSByteInvariant([NotNull] this string s) =>
			sbyte.Parse(s, CultureInfo.InvariantCulture);

		/// <summary>
		/// Culture invariant version of <see cref="short.Parse(string, System.IFormatProvider)"/>
		/// </summary>
		/// <param name="s">String to parse.</param>
		/// <returns>Parsed value of <paramref name="s"/> according to rules of invariant culture.</returns>
		[NotNull]
		[Pure]
		public static short ToInt16Invariant([NotNull] this string s) =>
			short.Parse(s, CultureInfo.InvariantCulture);

		/// <summary>
		/// Culture invariant version of <see cref="ushort.Parse(string, System.IFormatProvider)"/>
		/// </summary>
		/// <param name="s">String to parse.</param>
		/// <returns>Parsed value of <paramref name="s"/> according to rules of invariant culture.</returns>
		[NotNull]
		[Pure]
		public static ushort ToUInt16Invariant([NotNull] this string s) =>
			ushort.Parse(s, CultureInfo.InvariantCulture);

		/// <summary>
		/// Culture invariant version of <see cref="int.Parse(string, System.IFormatProvider)"/>
		/// </summary>
		/// <param name="s">String to parse.</param>
		/// <returns>Parsed value of <paramref name="s"/> according to rules of invariant culture.</returns>
		[NotNull]
		[Pure]
		public static int ToInt32Invariant([NotNull] this string s) =>
			int.Parse(s, CultureInfo.InvariantCulture);

		/// <summary>
		/// Culture invariant version of <see cref="uint.Parse(string, System.IFormatProvider)"/>
		/// </summary>
		/// <param name="s">String to parse.</param>
		/// <returns>Parsed value of <paramref name="s"/> according to rules of invariant culture.</returns>
		[NotNull]
		[Pure]
		public static uint ToUInt32Invariant([NotNull] this string s) =>
			uint.Parse(s, CultureInfo.InvariantCulture);

		/// <summary>
		/// Culture invariant version of <see cref="long.Parse(string, System.IFormatProvider)"/>
		/// </summary>
		/// <param name="s">String to parse.</param>
		/// <returns>Parsed value of <paramref name="s"/> according to rules of invariant culture.</returns>
		[NotNull]
		[Pure]
		public static long ToInt64Invariant([NotNull] this string s) =>
			long.Parse(s, CultureInfo.InvariantCulture);

		/// <summary>
		/// Culture invariant version of <see cref="ulong.Parse(string, System.IFormatProvider)"/>
		/// </summary>
		/// <param name="s">String to parse.</param>
		/// <returns>Parsed value of <paramref name="s"/> according to rules of invariant culture.</returns>
		[NotNull]
		[Pure]
		public static ulong ToUInt64Invariant([NotNull] this string s) =>
			ulong.Parse(s, CultureInfo.InvariantCulture);

		/// <summary>
		/// Culture invariant version of <see cref="float.Parse(string, System.IFormatProvider)"/>
		/// </summary>
		/// <param name="s">String to parse.</param>
		/// <returns>Parsed value of <paramref name="s"/> according to rules of invariant culture.</returns>
		[NotNull]
		[Pure]
		public static float ToSingleInvariant([NotNull] this string s) =>
			float.Parse(s, CultureInfo.InvariantCulture);

		/// <summary>
		/// Culture invariant version of <see cref="double.Parse(string, System.IFormatProvider)"/>
		/// </summary>
		/// <param name="s">String to parse.</param>
		/// <returns>Parsed value of <paramref name="s"/> according to rules of invariant culture.</returns>
		[NotNull]
		[Pure]
		public static double ToDoubleInvariant([NotNull] this string s) =>
			double.Parse(s, CultureInfo.InvariantCulture);

		/// <summary>
		/// Culture invariant version of <see cref="decimal.Parse(string, System.IFormatProvider)"/>
		/// </summary>
		/// <param name="s">String to parse.</param>
		/// <returns>Parsed value of <paramref name="s"/> according to rules of invariant culture.</returns>
		[NotNull]
		[Pure]
		public static decimal ToDecimalInvariant([NotNull] this string s) =>
			decimal.Parse(s, CultureInfo.InvariantCulture);

		/// <summary>
		/// Culture invariant version of <see cref="DateTime.Parse(string, System.IFormatProvider)"/>
		/// </summary>
		/// <param name="s">String to parse.</param>
		/// <returns>Parsed value of <paramref name="s"/> according to rules of invariant culture.</returns>
		[NotNull]
		[Pure]
		public static DateTime ToDateTimeInvariant([NotNull] this string s) =>
			DateTime.Parse(s, CultureInfo.InvariantCulture);

	}
}