<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)T4.Reusable\Autogenerated.ttinclude" #>
using System;

using CodeJam.Collections;

using JetBrains.Annotations;

namespace CodeJam
{
	partial class Algorithms
	{
<#for (var i = 2; i <= 8; i++)
	GenerateMethod(i);#>
	}
}
<#+
private void GenerateMethod(int argCount)
{
	var typeArgs = List(argCount, i => "TArg" + i);
	var args = List(argCount, i => "arg" + i);#>
		/// <summary>
		/// Caches function value for specific arguments.
		/// </summary>
		/// <param name="func">Function to memoize.</param>
		/// <param name="threadSafe">If true - returns thread safe implementation</param>
<#+for (var i = 1; i <= argCount; i++) {#>
		/// <typeparam name="TArg<#=i#>">Type of argument <#=i#></typeparam>
<#+}#>
		/// <typeparam name="TResult">Type of result</typeparam>
		/// <returns>Memoized function</returns>
		[NotNull]
		[Pure]
		public static Func<<#=typeArgs#>, TResult> Memoize<<#=typeArgs#>, TResult>(
			[NotNull] this Func<<#=typeArgs#>, TResult> func,
			bool threadSafe = false)
		{
			var map =
				LazyDictionary.Create<ValueTuple<<#=typeArgs#>>, TResult>(
					key => func(<#=List(argCount, i => "key.Item" + i)#>),
					threadSafe);
			return (<#=args#>) => map[ValueTuple.Create(<#=args#>)];
		}

<#+}#>