//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Linq.Expressions;

using JetBrains.Annotations;

using static CodeJam.Arithmetic.OperatorsFactory;

namespace CodeJam.Arithmetic
{
	/// <summary>
	/// Callbacks for common arithmetic actions.
	/// Look at OperatorsPerformanceTest to see why.
	/// </summary>
	static partial class Operators<T>
	{
		#region Unary
		/// <summary>UnaryMinus operator factory.</summary>
		private static readonly Lazy<Func<T, T>> _unaryMinus =
			new Lazy<Func<T, T>>(() => UnaryOperator<T>(ExpressionType.Negate), _lazyMode);

		/// <summary>UnaryMinus operator.</summary>
		/// <value>The UnaryMinus operator.</value>
		[NotNull]
		public static Func<T, T> UnaryMinus => _unaryMinus.Value;

		#endregion

		#region Comparison
		/// <summary>AreEqual operator factory.</summary>
		private static readonly Lazy<Func<T, T, bool>> _areEqual =
			new Lazy<Func<T, T, bool>>(() => ComparisonOperator<T>(ExpressionType.Equal), _lazyMode);

		/// <summary>AreEqual operator.</summary>
		/// <value>The AreEqual operator.</value>
		[NotNull]
		public static Func<T, T, bool> AreEqual => _areEqual.Value;

		/// <summary>AreNotEqual operator factory.</summary>
		private static readonly Lazy<Func<T, T, bool>> _areNotEqual =
			new Lazy<Func<T, T, bool>>(() => ComparisonOperator<T>(ExpressionType.NotEqual), _lazyMode);

		/// <summary>AreNotEqual operator.</summary>
		/// <value>The AreNotEqual operator.</value>
		[NotNull]
		public static Func<T, T, bool> AreNotEqual => _areNotEqual.Value;

		/// <summary>GreaterThan operator factory.</summary>
		private static readonly Lazy<Func<T, T, bool>> _greaterThan =
			new Lazy<Func<T, T, bool>>(() => ComparisonOperator<T>(ExpressionType.GreaterThan), _lazyMode);

		/// <summary>GreaterThan operator.</summary>
		/// <value>The GreaterThan operator.</value>
		[NotNull]
		public static Func<T, T, bool> GreaterThan => _greaterThan.Value;

		/// <summary>GreaterThanOrEqual operator factory.</summary>
		private static readonly Lazy<Func<T, T, bool>> _greaterThanOrEqual =
			new Lazy<Func<T, T, bool>>(() => ComparisonOperator<T>(ExpressionType.GreaterThanOrEqual), _lazyMode);

		/// <summary>GreaterThanOrEqual operator.</summary>
		/// <value>The GreaterThanOrEqual operator.</value>
		[NotNull]
		public static Func<T, T, bool> GreaterThanOrEqual => _greaterThanOrEqual.Value;

		/// <summary>LessThan operator factory.</summary>
		private static readonly Lazy<Func<T, T, bool>> _lessThan =
			new Lazy<Func<T, T, bool>>(() => ComparisonOperator<T>(ExpressionType.LessThan), _lazyMode);

		/// <summary>LessThan operator.</summary>
		/// <value>The LessThan operator.</value>
		[NotNull]
		public static Func<T, T, bool> LessThan => _lessThan.Value;

		/// <summary>LessThanOrEqual operator factory.</summary>
		private static readonly Lazy<Func<T, T, bool>> _lessThanOrEqual =
			new Lazy<Func<T, T, bool>>(() => ComparisonOperator<T>(ExpressionType.LessThanOrEqual), _lazyMode);

		/// <summary>LessThanOrEqual operator.</summary>
		/// <value>The LessThanOrEqual operator.</value>
		[NotNull]
		public static Func<T, T, bool> LessThanOrEqual => _lessThanOrEqual.Value;
		#endregion

		#region Binary
		/// <summary>Plus operator factory.</summary>
		private static readonly Lazy<Func<T, T, T>> _plus =
			new Lazy<Func<T, T, T>>(() => BinaryOperator<T>(ExpressionType.Add), _lazyMode);

		/// <summary>Plus operator.</summary>
		/// <value>The Plus operator.</value>
		[NotNull]
		public static Func<T, T, T> Plus => _plus.Value;

		/// <summary>Minus operator factory.</summary>
		private static readonly Lazy<Func<T, T, T>> _minus =
			new Lazy<Func<T, T, T>>(() => BinaryOperator<T>(ExpressionType.Subtract), _lazyMode);

		/// <summary>Minus operator.</summary>
		/// <value>The Minus operator.</value>
		[NotNull]
		public static Func<T, T, T> Minus => _minus.Value;

		/// <summary>Mul operator factory.</summary>
		private static readonly Lazy<Func<T, T, T>> _mul =
			new Lazy<Func<T, T, T>>(() => BinaryOperator<T>(ExpressionType.Multiply), _lazyMode);

		/// <summary>Mul operator.</summary>
		/// <value>The Mul operator.</value>
		[NotNull]
		public static Func<T, T, T> Mul => _mul.Value;

		/// <summary>Div operator factory.</summary>
		private static readonly Lazy<Func<T, T, T>> _div =
			new Lazy<Func<T, T, T>>(() => BinaryOperator<T>(ExpressionType.Divide), _lazyMode);

		/// <summary>Div operator.</summary>
		/// <value>The Div operator.</value>
		[NotNull]
		public static Func<T, T, T> Div => _div.Value;

		/// <summary>Modulo operator factory.</summary>
		private static readonly Lazy<Func<T, T, T>> _modulo =
			new Lazy<Func<T, T, T>>(() => BinaryOperator<T>(ExpressionType.Modulo), _lazyMode);

		/// <summary>Modulo operator.</summary>
		/// <value>The Modulo operator.</value>
		[NotNull]
		public static Func<T, T, T> Modulo => _modulo.Value;

		/// <summary>Xor operator factory.</summary>
		private static readonly Lazy<Func<T, T, T>> _xor =
			new Lazy<Func<T, T, T>>(() => BinaryOperator<T>(ExpressionType.ExclusiveOr), _lazyMode);

		/// <summary>Xor operator.</summary>
		/// <value>The Xor operator.</value>
		[NotNull]
		public static Func<T, T, T> Xor => _xor.Value;

		/// <summary>BitwiseAnd operator factory.</summary>
		private static readonly Lazy<Func<T, T, T>> _bitwiseAnd =
			new Lazy<Func<T, T, T>>(() => BinaryOperator<T>(ExpressionType.And), _lazyMode);

		/// <summary>BitwiseAnd operator.</summary>
		/// <value>The BitwiseAnd operator.</value>
		[NotNull]
		public static Func<T, T, T> BitwiseAnd => _bitwiseAnd.Value;

		/// <summary>BitwiseOr operator factory.</summary>
		private static readonly Lazy<Func<T, T, T>> _bitwiseOr =
			new Lazy<Func<T, T, T>>(() => BinaryOperator<T>(ExpressionType.Or), _lazyMode);

		/// <summary>BitwiseOr operator.</summary>
		/// <value>The BitwiseOr operator.</value>
		[NotNull]
		public static Func<T, T, T> BitwiseOr => _bitwiseOr.Value;

		/// <summary>LeftShift operator factory.</summary>
		private static readonly Lazy<Func<T, T, T>> _leftShift =
			new Lazy<Func<T, T, T>>(() => BinaryOperator<T>(ExpressionType.LeftShift), _lazyMode);

		/// <summary>LeftShift operator.</summary>
		/// <value>The LeftShift operator.</value>
		[NotNull]
		public static Func<T, T, T> LeftShift => _leftShift.Value;

		/// <summary>RightShift operator factory.</summary>
		private static readonly Lazy<Func<T, T, T>> _rightShift =
			new Lazy<Func<T, T, T>>(() => BinaryOperator<T>(ExpressionType.RightShift), _lazyMode);

		/// <summary>RightShift operator.</summary>
		/// <value>The RightShift operator.</value>
		[NotNull]
		public static Func<T, T, T> RightShift => _rightShift.Value;
		#endregion
	}
}