<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)T4.Reusable\Autogenerated.ttinclude" #>
<#@ include file="Operators.ttinclude" #>
using System;
using System.Linq.Expressions;

using JetBrains.Annotations;

using static CodeJam.Arithmetic.OperatorsFactory;

namespace CodeJam.Arithmetic
{
	/// <summary>
	/// Callbacks for common arithmetic actions.
	/// Look at OperatorsPerformanceTest to see why.
	/// </summary>
	static partial class Operators<T>
	{
<#
	foreach (var op in ops)
	{
		WriteRegionLine(op.OpType.ToString());

		switch (op.OpType)
		{
			case OpType.Unary:
				EmitUnary(op);
				break;
			case OpType.Comparison:
				EmitComparison(op);
				break;
			default:
				EmitBinary(op);
				break;
		}
	}
	FlushRegions();
#>
	}
}<#+

	private void EmitUnary(OpInfo op)
	{
#>
		/// <summary><#=op.Name#> operator factory.</summary>
		private static readonly Lazy<Func<T, T>> _<#=op.LowerName#> =
			new Lazy<Func<T, T>>(() => UnaryOperator<T>(ExpressionType.<#=op.Type#>), LazyMode);

		/// <summary><#=op.Name#> operator.</summary>
		/// <value>The <#=op.Name#> operator.</value>
		[NotNull]
		public static Func<T, T> <#=op.Name#> => _<#=op.LowerName#>.Value;
<#+
	}

	private void EmitComparison(OpInfo op)
	{
#>
		/// <summary><#=op.Name#> operator factory.</summary>
		private static readonly Lazy<Func<T, T, bool>> _<#=op.LowerName#> =
			new Lazy<Func<T, T, bool>>(() => ComparisonOperator<T>(ExpressionType.<#=op.Type#>), LazyMode);

		/// <summary><#=op.Name#> operator.</summary>
		/// <value>The <#=op.Name#> operator.</value>
		[NotNull]
		public static Func<T, T, bool> <#=op.Name#> => _<#=op.LowerName#>.Value;
<#+
	}

	private void EmitBinary(OpInfo op)
	{
#>
		/// <summary><#=op.Name#> operator factory.</summary>
		private static readonly Lazy<Func<T, T, T>> _<#=op.LowerName#> =
			new Lazy<Func<T, T, T>>(() => BinaryOperator<T>(ExpressionType.<#=op.Type#>), LazyMode);

		/// <summary><#=op.Name#> operator.</summary>
		/// <value>The <#=op.Name#> operator.</value>
		[NotNull]
		public static Func<T, T, T> <#=op.Name#> => _<#=op.LowerName#>.Value;
<#+
	}
#>