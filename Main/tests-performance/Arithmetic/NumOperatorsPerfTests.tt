<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ include file="$(SolutionDir)T4.Reusable\Autogenerated.ttinclude" #>
<#@ include file="$(SolutionDir)Main\src\Arithmetic\Operators.ttinclude" #>
using System;

using BenchmarkDotNet.NUnit;

using NUnit.Framework;

using IntOp = CodeJam.Arithmetic.Operators<int>;
using NullableDoubleOp = CodeJam.Arithmetic.Operators<double?>;

using static CodeJam.AssemblyWideConfig;

namespace CodeJam.Arithmetic
{
	[TestFixture(Category = PerfTestsConstants.PerfTestCategory + ": Operators (generated)")]
	[CompetitionMetadata("CodeJam.Arithmetic.NumOperatorsPerfTests.generated.xml")]
	[Explicit("Server run speed not stable")]
	public class NumOperatorsPerfTests
	{
<#
	foreach (var op in ops)
	{
		if (op.OpType == OpType.Comparison)
			continue;

		WriteRegionLine(op.OpType.ToString(), "op.OpType");
		WriteRegionLine(op.Name, "op.Name");

		if (op.OpType == OpType.Unary)
		{
			EmitUnaryOpCase(op, "int", "Int");
		}
		else
		{
			EmitBinaryOpCase(op, "int", "Int");
			if (!op.IntOnly)
			{
				WriteLine();
				EmitBinaryOpCase(op, "double?", "NullableDouble");
			}
		}
	}
	FlushRegions();
#>
	}
}<#+

	private void EmitUnaryOpCase(OpInfo op, string type, string caseName)
	{
#>
		[Test]
		public void Run<#=caseName#><#=op.Name#>Case() => CompetitionBenchmarkRunner.Run<<#=caseName#><#=op.Name#>Case>(RunConfig);

		public class <#=caseName#><#=op.Name#>Case : <#=caseName#>OperatorsBaseCase
		{
			private readonly Func<<#=type#>, <#=type#>> _op<#=op.Name#> = Operators<<#=type#>>.<#=op.Name#>;

			[CompetitionBaseline]
			public <#=type#> <#=op.Name#>Baseline()
			{
				var result = default(<#=type#>);
				for (var i = 0; i < ValuesA.Length; i++)
					result = <#=op.Sign#>ValuesB[i];
				return result;
			}

			[CompetitionBenchmark]
			public  <#=type#> <#=op.Name#>Operator()
			{
				var result = default(<#=type#>);
				for (var i = 0; i < ValuesA.Length; i++)
					result = _op<#=op.Name#>(ValuesB[i]);
				return result;
			}
		}
<#+
	}

	private void EmitBinaryOpCase(OpInfo op, string type, string caseName)
	{
#>
		[Test]
		public void Run<#=caseName#><#=op.Name#>Case() => CompetitionBenchmarkRunner.Run<<#=caseName#><#=op.Name#>Case>(RunConfig);

		public class <#=caseName#><#=op.Name#>Case : <#=caseName#>OperatorsBaseCase
		{
			private readonly Func<<#=type#>, <#=type#>, <#=type#>> _op<#=op.Name#> = Operators<<#=type#>>.<#=op.Name#>;

			[CompetitionBaseline]
			public <#=type#> <#=op.Name#>Baseline()
			{
				var result = default(<#=type#>);
				for (var i = 0; i < ValuesA.Length; i++)
					result = ValuesA[i] <#=op.Sign#> ValuesB[i];
				return result;
			}

			[CompetitionBenchmark]
			public <#=type#> <#=op.Name#>Operator()
			{
				var result = default(<#=type#>);
				for (var i = 0; i < ValuesA.Length; i++)
					result = _op<#=op.Name#>(ValuesA[i], ValuesB[i]);
				return result;
			}
		}
<#+
	}
#>