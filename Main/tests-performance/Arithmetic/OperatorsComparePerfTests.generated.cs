//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;

using BenchmarkDotNet.NUnit;

using NUnit.Framework;

using static CodeJam.AssemblyWideConfig;

namespace CodeJam.Arithmetic
{
	[TestFixture(Category = PerfTestsConstants.PerfTestCategory + ": Operators<T>.Compare")]
	[CompetitionMetadata("CodeJam.Arithmetic.OperatorsComparePerfTests.generated.xml")]
	[Explicit(PerfTestsConstants.ExplicitExcludeReason)]
	public class OperatorsComparePerfTests
	{
		#region Compare
		[Test]
		public void RunIntCompareCase() =>
			CompetitionBenchmarkRunner.Run<IntCompareCase>(RunConfig);

		public class IntCompareCase : IntOperatorsBaseCase
		{
			private static readonly Func<int, int, int> _opCompare = Operators<int>.Compare;
			private static readonly Func<int, int, int> _emittedCompare = (a, b) => a.CompareTo(b);
			private static readonly Comparer<int> _comparer = Comparer<int>.Default;

			[CompetitionBaseline]
			public int Test00CompareBaseline()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
				{
					var a = ValuesA[i];
					var b = ValuesB[i];
					result = a.CompareTo(b);
				}
				return result;
			}

			[CompetitionBenchmark]
			public int Test01CompareOperator()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _opCompare(ValuesA[i], ValuesB[i]);
				return result;
			}

			[CompetitionBenchmark]
			public int Test02CompareEmitted()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _emittedCompare(ValuesA[i], ValuesB[i]);
				return result;
			}

			[CompetitionBenchmark]
			public int Test03Comparer()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _comparer.Compare(ValuesA[i], ValuesB[i]);
				return result;
			}
		}

		[Test]
		public void RunNullableIntCompareCase() =>
			CompetitionBenchmarkRunner.Run<NullableIntCompareCase>(RunConfig);

		public class NullableIntCompareCase : NullableIntOperatorsBaseCase
		{
			private static readonly Func<int?, int?, int> _opCompare = Operators<int?>.Compare;
			private static readonly Func<int?, int?, int> _emittedCompare = (a, b) => a == b ? 0 : (a > b ? 1 : -1);
			private static readonly Comparer<int?> _comparer = Comparer<int?>.Default;

			[CompetitionBaseline]
			public int Test00CompareBaseline()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
				{
					var a = ValuesA[i];
					var b = ValuesB[i];
					result = a == b ? 0 : (a > b ? 1 : -1);
				}
				return result;
			}

			[CompetitionBenchmark]
			public int Test01CompareOperator()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _opCompare(ValuesA[i], ValuesB[i]);
				return result;
			}

			[CompetitionBenchmark]
			public int Test02CompareEmitted()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _emittedCompare(ValuesA[i], ValuesB[i]);
				return result;
			}

			[CompetitionBenchmark]
			public int Test03Comparer()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _comparer.Compare(ValuesA[i], ValuesB[i]);
				return result;
			}
		}

		[Test]
		public void RunEnumCompareCase() =>
			CompetitionBenchmarkRunner.Run<EnumCompareCase>(RunConfig);

		public class EnumCompareCase : EnumOperatorsBaseCase
		{
			private static readonly Func<AttributeTargets, AttributeTargets, int> _opCompare = Operators<AttributeTargets>.Compare;
			private static readonly Func<AttributeTargets, AttributeTargets, int> _emittedCompare = (a, b) => a.CompareTo(b);
			private static readonly Comparer<AttributeTargets> _comparer = Comparer<AttributeTargets>.Default;

			[CompetitionBaseline]
			public int Test00CompareBaseline()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
				{
					var a = ValuesA[i];
					var b = ValuesB[i];
					result = a.CompareTo(b);
				}
				return result;
			}

			[CompetitionBenchmark]
			public int Test01CompareOperator()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _opCompare(ValuesA[i], ValuesB[i]);
				return result;
			}

			[CompetitionBenchmark]
			public int Test02CompareEmitted()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _emittedCompare(ValuesA[i], ValuesB[i]);
				return result;
			}

			[CompetitionBenchmark]
			public int Test03Comparer()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _comparer.Compare(ValuesA[i], ValuesB[i]);
				return result;
			}
		}

		[Test]
		public void RunNullableEnumCompareCase() =>
			CompetitionBenchmarkRunner.Run<NullableEnumCompareCase>(RunConfig);

		public class NullableEnumCompareCase : NullableEnumOperatorsBaseCase
		{
			private static readonly Func<AttributeTargets?, AttributeTargets?, int> _opCompare = Operators<AttributeTargets?>.Compare;
			private static readonly Func<AttributeTargets?, AttributeTargets?, int> _emittedCompare = (a, b) => a == b ? 0 : (a > b ? 1 : -1);
			private static readonly Comparer<AttributeTargets?> _comparer = Comparer<AttributeTargets?>.Default;

			[CompetitionBaseline]
			public int Test00CompareBaseline()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
				{
					var a = ValuesA[i];
					var b = ValuesB[i];
					result = a == b ? 0 : (a > b ? 1 : -1);
				}
				return result;
			}

			[CompetitionBenchmark]
			public int Test01CompareOperator()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _opCompare(ValuesA[i], ValuesB[i]);
				return result;
			}

			[CompetitionBenchmark]
			public int Test02CompareEmitted()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _emittedCompare(ValuesA[i], ValuesB[i]);
				return result;
			}

			[CompetitionBenchmark]
			public int Test03Comparer()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _comparer.Compare(ValuesA[i], ValuesB[i]);
				return result;
			}
		}

		[Test]
		public void RunNullableDateTimeCompareCase() =>
			CompetitionBenchmarkRunner.Run<NullableDateTimeCompareCase>(RunConfig);

		public class NullableDateTimeCompareCase : NullableDateTimeOperatorsBaseCase
		{
			private static readonly Func<DateTime?, DateTime?, int> _opCompare = Operators<DateTime?>.Compare;
			private static readonly Func<DateTime?, DateTime?, int> _emittedCompare = (a, b) => a == b ? 0 : (a > b ? 1 : -1);
			private static readonly Comparer<DateTime?> _comparer = Comparer<DateTime?>.Default;

			[CompetitionBaseline]
			public int Test00CompareBaseline()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
				{
					var a = ValuesA[i];
					var b = ValuesB[i];
					result = a == b ? 0 : (a > b ? 1 : -1);
				}
				return result;
			}

			[CompetitionBenchmark]
			public int Test01CompareOperator()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _opCompare(ValuesA[i], ValuesB[i]);
				return result;
			}

			[CompetitionBenchmark]
			public int Test02CompareEmitted()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _emittedCompare(ValuesA[i], ValuesB[i]);
				return result;
			}

			[CompetitionBenchmark]
			public int Test03Comparer()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _comparer.Compare(ValuesA[i], ValuesB[i]);
				return result;
			}
		}

		[Test]
		public void RunStringCompareCase() =>
			CompetitionBenchmarkRunner.Run<StringCompareCase>(RunConfig);

		public class StringCompareCase : StringOperatorsBaseCase
		{
			private static readonly Func<string, string, int> _opCompare = Operators<string>.Compare;
			private static readonly Func<string, string, int> _emittedCompare = (a, b) => string.CompareOrdinal(a, b);
			private static readonly Comparer<string> _comparer = Comparer<string>.Default;

			[CompetitionBaseline]
			public int Test00CompareBaseline()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
				{
					var a = ValuesA[i];
					var b = ValuesB[i];
					result = string.CompareOrdinal(a, b);
				}
				return result;
			}

			[CompetitionBenchmark]
			public int Test01CompareOperator()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _opCompare(ValuesA[i], ValuesB[i]);
				return result;
			}

			[CompetitionBenchmark]
			public int Test02CompareEmitted()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _emittedCompare(ValuesA[i], ValuesB[i]);
				return result;
			}

			[CompetitionBenchmark]
			public int Test03Comparer()
			{
				var result = default(int);
				for (var i = 0; i < ValuesB.Length; i++)
					result = _comparer.Compare(ValuesA[i], ValuesB[i]);
				return result;
			}
		}
		#endregion
	}
}