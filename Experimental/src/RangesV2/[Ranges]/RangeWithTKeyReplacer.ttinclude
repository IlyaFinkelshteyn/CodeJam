<#@ import namespace="System.IO" #>
<#@ include file="$(SolutionDir)T4.Reusable\Autogenerated.ttinclude" #>
<#@ include file="$(SolutionDir)T4.Reusable\Transform.ttinclude" #><#+

	private void Run(string sourceFileName, params ReplaceInfo[] additionalReplaces)
	{
		var oldClassPath = Host.ResolvePath(sourceFileName);
		if (!File.Exists(oldClassPath))
		{
			throw new FileNotFoundException("File '" + oldClassPath + "' does not exist.");
		}

		Transform(
			oldClassPath,
			additionalReplaces,
			new ReplaceInfo // Fix generic params
			{ 
				Pattern = @"(?<!(?:BoundaryTo<|BoundaryFrom<))T>",
				Replacement = "T, TKey>",
				ThrowOnFail = true
			},
			new ReplaceInfo // Fix generic params XML docs
			{ 
				Pattern = @"(\r\n.+?)(<typeparam name=""T"">(?:.|\r|\n)+?</typeparam>)",
				Replacement = @"$1$2$1<typeparam name=""TKey"">The type of the range key</typeparam>",
				ThrowOnFail = true
			},
			new ReplaceInfo // Fix method signature
			{ 
				Pattern = @"(T>? to(?:Value)?)(\)|,)",
				Replacement = @"$1, TKey key$2",
				ThrowOnFail = true
			},
			new ReplaceInfo // Fix method XML docs
			{ 
				Pattern = @"(\r\n.+?)(<param name=""to(?:Value)?"">(?:.|\r|\n)+?</param>)",
				Replacement = @"$1$2$1<param name=""key"">The value of the range key.</param>",
				ThrowOnFail = true
			},
			new ReplaceInfo // Fix parameter passing
			{ 
				Pattern = @"(,\s+to(?:Value)?)\)",
				Replacement = @"$1, key)",
				ThrowOnFail = true
			});
	}
#>
